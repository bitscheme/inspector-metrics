var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.194,1,1.846]],["body/classes/BaseMetric.html",[0,0.3,1,3.254,2,0.777,3,0.129,4,0.196,5,0.105,6,0.265,7,1.911,8,0.274,9,3.003,10,2.626,11,0.715,12,1.506,13,3.56,14,3.084,15,2.908,16,0.011,17,1.931,18,1.1,19,1.86,20,2.521,21,2.63,22,2.784,23,0.865,24,0.137,25,0.689,26,1.26,27,2.131,28,1.721,29,1.136,30,0.986,31,3.072,32,2.563,33,3.178,34,3.178,35,0.932,36,3.295,37,4.489,38,3.934,39,3.988,40,3.73,41,4.489,42,3.295,43,3.651,44,3.295,45,3.084,46,3.295,47,3.295,48,3.084,49,3.295,50,3.295,51,3.084,52,3.084,53,3.122,54,3.934,55,3.914,56,0.483,57,0.806,58,1.599,59,1.153,60,1.102,61,1.337,62,2.925,63,0.892,64,3.084,65,4.458,66,2.139,67,2.064,68,2.064,69,1.247,70,1.511,71,1.511,72,1.316,73,1.321,74,2.925,75,2.925,76,3.084,77,2.925,78,0.304,79,0.805,80,2.925,81,2.626,82,2.925,83,2.925,84,3.084,85,2.757,86,2.925,87,2.101,88,1.562,89,2.925,90,0.646,91,2.925,92,2.757,93,2.925,94,2.917,95,2.925,96,2.925,97,2.757,98,2.925,99,2.925,100,2.757,101,2.925,102,2.757,103,2.925,104,2.757,105,2.925,106,1.406,107,3.733,108,2.925,109,2.908,110,2.925,111,2.757,112,2.925,113,3.733,114,2.925,115,2.757,116,2.925,117,2.509,118,2.925,119,2.925,120,2.757,121,1.699,122,1.429,123,2.925,124,2.925,125,2.925,126,0.169,127,0.262,128,4.777,129,2.027,130,4.395,131,2.339,132,1.812,133,3.79,134,1.188,135,0.993,136,0.871,137,0.343,138,0.731,139,1.183,140,2.027,141,0.509,142,1.579,143,3.56,144,2.715,145,3.56,146,3.56,147,3.56,148,1.033,149,0.993,150,2.339,151,3.231,152,2.08,153,1.911,154,4.796,155,2.027,156,1.649,157,1.911,158,2.339,159,2.339,160,1.911,161,2.339,162,1.516,163,2.166,164,2.339,165,2.339,166,1.649,167,2.339,168,2.339,169,1.726,170,0.331,171,1.182,172,0.399,173,0.409,174,1.39,175,1.151,176,2.339,177,1.052,178,2.027,179,2.339,180,2.339,181,2.339,182,3.56,183,2.339,184,2.339,185,2.793,186,2.757,187,3.988,188,3.56,189,2.339,190,2.166,191,2.339,192,1.267,193,2.339,194,2.166,195,2.339,196,2.339,197,2.339,198,2.339,199,2.339,200,2.339,201,2.339,202,2.027,203,0.003,204,0.005,205,0.003]],["title/interfaces/BucketCounting.html",[170,0.242,206,2.196]],["body/interfaces/BucketCounting.html",[0,0.272,3,0.204,4,0.272,5,0.166,6,0.213,8,0.154,11,0.696,16,0.011,22,2.236,24,0.217,27,1.932,28,1.643,29,0.583,35,1.295,57,1.025,59,0.879,60,0.848,61,0.958,66,3.347,68,2.868,72,1.37,78,0.267,79,0.994,90,0.653,121,2.362,122,1.488,126,0.173,127,0.415,134,1.882,135,1.574,136,0.935,137,0.36,138,0.813,139,1.199,141,0.886,142,2.502,144,2.593,148,0.941,149,1.574,151,3.085,152,2.386,170,0.465,171,1.409,172,0.694,173,0.395,203,0.005,204,0.007,205,0.005,206,4.328,207,0.547,208,2.734,209,4.287,210,2.042,211,4.364,212,3.106,213,3.353,214,2.236,215,2.435,216,3.341,217,2.042,218,1.78,219,4.568,220,4.391,221,1.621,222,4.181,223,4.384,224,4.189,225,4.635,226,2.434,227,4.058,228,2.059,229,1.556,230,4.49,231,4.635,232,3.347,233,3.567,234,3.341,235,1.769,236,3.211,237,3.211,238,1.447,239,1.78,240,2.502,241,2.502,242,2.502,243,3.211,244,1.717,245,3.211,246,3.028,247,0.825,248,3.211,249,3.211,250,1.078,251,4.287,252,3.211,253,3.211,254,2.871,255,3.211,256,3.211,257,3.211,258,2.149,259,1.53,260,3.611,261,4.13,262,4.52,263,2.871,264,4.287,265,4.287,266,3.211,267,2.734,268,4.042,269,3.211,270,3.211,271,2.734,272,3.211,273,3.211,274,3.211]],["title/interfaces/BucketToCountMap.html",[170,0.242,261,2.283]],["body/interfaces/BucketToCountMap.html",[0,0.278,3,0.211,4,0.278,5,0.172,6,0.193,8,0.159,11,0.695,16,0.011,22,2.271,27,1.973,28,1.678,29,0.602,57,1.038,59,0.897,60,0.875,61,0.741,66,3.035,68,2.217,72,1.414,78,0.254,79,1.007,90,0.645,121,2.7,122,1.535,126,0.177,127,0.429,134,1.941,135,1.624,136,0.941,137,0.361,138,0.819,139,1.212,141,0.895,142,2.582,144,2.648,148,0.949,149,1.624,151,3.15,152,2.271,170,0.467,171,1.393,172,0.634,173,0.399,203,0.006,204,0.007,205,0.006,206,4.325,207,0.565,208,2.821,209,3.313,210,1.579,211,4.241,212,3.058,213,3.063,214,2.028,215,1.882,216,2.582,217,1.579,218,1.376,219,4.173,220,4.426,221,1.481,222,3.819,223,2.821,224,2.695,226,2.207,227,4.04,228,1.868,229,1.481,230,4.41,232,3.035,233,3.37,234,2.582,235,1.825,236,3.313,237,3.313,238,1.493,239,1.818,240,2.582,241,2.582,242,2.582,243,3.313,244,1.771,245,3.313,246,3.124,247,0.852,248,3.313,249,3.313,250,1.113,251,4.377,252,3.313,253,3.313,254,2.962,255,3.313,256,3.313,257,3.313,258,2.217,259,2.085,260,4.056,261,4.249,262,4.537,263,2.962,264,4.377,265,4.377,266,3.313,267,2.821,268,4.127,269,3.313,270,3.313,271,2.821,272,3.313,273,3.313,274,3.313,275,2.962,276,4.782]],["title/classes/Buckets.html",[0,0.194,227,2.042]],["body/classes/Buckets.html",[0,0.263,2,1.168,3,0.194,4,0.263,5,0.158,6,0.233,8,0.146,11,0.688,16,0.011,18,0.853,22,2.177,23,1.3,24,0.206,25,0.925,27,2.45,28,1.586,29,0.853,30,1.093,35,1.25,56,0.403,57,1.063,58,1.801,59,1.114,60,0.805,61,1.127,63,0.536,66,2.87,68,2.039,72,1.766,78,0.243,79,1.049,87,1.754,88,1.346,90,0.647,121,2.28,122,1.412,126,0.167,127,0.394,134,1.786,135,1.494,136,0.926,137,0.358,138,0.802,139,1.178,141,0.87,142,2.375,144,2.504,148,0.927,149,1.494,151,2.979,152,2.177,170,0.455,171,1.359,172,0.608,173,0.389,203,0.005,204,0.007,205,0.005,206,4.273,208,2.595,209,3.047,210,1.452,211,4.602,212,3.1,213,2.937,214,1.918,215,1.731,216,2.375,217,1.452,218,1.266,219,4.001,220,4.236,221,1.42,222,3.662,223,2.595,224,2.479,226,2.087,227,4.085,228,2.151,229,1.523,230,4.287,232,2.87,233,3.258,234,2.375,235,1.679,236,3.047,237,3.047,238,1.374,239,1.719,240,2.375,241,2.375,242,3.225,243,4.138,244,2.213,245,4.138,246,3.902,247,1.296,248,5.041,249,4.699,250,1.578,251,5.041,252,3.047,253,4.138,254,4.713,255,4.699,256,3.047,257,3.047,258,2.039,259,1.452,260,3.516,261,4.067,262,4.489,263,2.725,264,4.138,265,4.138,266,3.047,267,2.595,268,3.902,269,3.047,270,3.047,271,2.595,272,3.047,273,3.047,274,3.047,277,4.777,278,0.971,279,3.868,280,4.399,281,4.399,282,3.868,283,4.399,284,3.868,285,4.399,286,3.256,287,2.725,288,0.997,289,4.399,290,1.731,291,2.595,292,4.399,293,4.399,294,4.777,295,4.399,296,4.399,297,3.518,298,4.399]],["title/interfaces/CarbonData.html",[170,0.242,299,3.26]],["body/interfaces/CarbonData.html",[0,0.212,3,0.143,4,0.212,5,0.117,6,0.099,8,0.108,11,0.649,16,0.011,18,0.409,19,1.906,20,0.988,24,0.152,25,0.889,26,1.329,28,1.952,29,0.925,30,0.882,32,2.711,56,0.446,59,1.13,60,1.241,63,0.827,72,0.961,73,1.038,78,0.173,79,0.907,90,0.617,126,0.135,127,0.291,136,0.891,137,0.293,138,0.847,139,0.746,141,0.988,148,0.991,156,1.832,162,1.685,170,0.404,171,1.1,172,0.291,173,0.422,174,1.015,177,1.169,178,2.252,203,0.008,204,0.006,205,0.007,207,0.384,218,1.652,221,0.681,238,1.982,239,2.115,247,0.579,259,1.591,278,0.718,288,0.737,299,6.327,300,2.407,301,3.567,302,1.439,303,4.844,304,3.338,305,3.148,306,3.567,307,4.399,308,4.553,309,3.148,310,2.842,311,1.956,312,2.117,313,2.218,314,3.823,315,2.423,316,1.652,317,3.131,318,2.259,319,1.733,320,2.065,321,1.785,322,2.662,323,2.571,324,1.733,325,2.407,326,0.777,327,0.858,328,3.428,329,1.456,330,2.252,331,1.832,332,2.014,333,1.562,334,1.562,335,2.407,336,2.859,337,2.859,338,2.6,339,2.859,340,1.621,341,1.073,342,4.2,343,3.291,344,5.019,345,2.252,346,2.6,347,1.314,348,6.273,349,1.918,350,2.406,351,1.363,352,1.621,353,2.662,354,1.507,355,1.505,356,2.749,357,1.456,358,1.785,359,1.464,360,1.104,361,3.387,362,1.918,363,3.578,364,2.252,365,1.32,366,1.32,367,1.505,368,2.124,369,2.486,370,2.449,371,2.117,372,1.408,373,1.562,374,2.038,375,2.315,376,1.408,377,2.381,378,1.744,379,2.554,380,2.124,381,2.252,382,1.685,383,1.685,384,1.733,385,2.6,386,2.859,387,0.841,388,3.853,389,2.859,390,2.014,391,2.407,392,2.252,393,2.252,394,1.755,395,2.859,396,2.859,397,1.136,398,3.27,399,3.381,400,1.408,401,0.798,402,2.859,403,2.124,404,1.621,405,2.859,406,2.124,407,2.407,408,2.859,409,2.6,410,1.685,411,2.859,412,2.859,413,2.859,414,3.338,415,4.237,416,2.407,417,2.124,418,2.6,419,3.075,420,1.578,421,1.408,422,2.158,423,4.2,424,4.335,425,5.961,426,2.252,427,5.961,428,2.252,429,3.999,430,2.859,431,5.582,432,1.685,433,2.158,434,2.252,435,2.252,436,2.859,437,2.859,438,1.685,439,2.403,440,1.387,441,1.685,442,2.252,443,2.252,444,2.859,445,4.237,446,2.498,447,4.237,448,2.498,449,4.237,450,2.498,451,4.237,452,2.498,453,4.237,454,2.498,455,4.237,456,2.498,457,4.237,458,2.498,459,4.237,460,2.498,461,4.237,462,2.498,463,4.237,464,2.498,465,1.685,466,2.403,467,2.859,468,2.252,469,2.252,470,2.859,471,4.237,472,1.685,473,4.237,474,1.685,475,4.237,476,1.685,477,4.237,478,1.685,479,1.685,480,2.158,481,1.685,482,2.252,483,2.252,484,2.859,485,1.685,486,1.685,487,1.685,488,1.685,489,1.832,490,2.859]],["title/interfaces/CarbonMetricReporterOptions.html",[170,0.242,344,3.26]],["body/interfaces/CarbonMetricReporterOptions.html",[0,0.212,3,0.143,4,0.212,5,0.116,6,0.099,8,0.108,11,0.635,16,0.011,18,0.408,19,1.861,20,0.986,24,0.152,25,0.983,26,1.328,28,1.951,29,0.924,30,0.881,32,2.71,56,0.446,59,1.129,60,1.24,63,0.826,72,0.96,73,1.103,78,0.173,79,0.906,90,0.617,126,0.135,127,0.291,136,0.891,137,0.293,138,0.847,139,0.746,141,0.987,148,0.99,156,1.83,162,1.683,170,0.404,171,1.174,172,0.291,173,0.422,174,1.014,177,1.168,178,2.249,203,0.008,204,0.006,205,0.007,207,0.384,218,1.651,221,0.68,238,1.981,239,2.114,247,0.578,259,1.072,278,0.717,288,0.736,299,6.3,300,2.403,301,2.403,302,1.438,303,4.692,304,2.249,305,2.121,306,2.403,307,4.396,308,4.551,309,2.121,310,1.915,311,1.954,312,2.116,313,2.218,314,3.945,315,2.422,316,1.651,317,3.131,318,2.258,319,1.731,320,2.063,321,1.783,322,2.659,323,2.841,324,1.731,325,2.406,326,0.776,327,0.857,328,3.426,329,1.454,330,2.249,331,1.83,332,2.011,333,1.56,334,1.56,335,2.403,336,2.855,337,2.855,338,2.596,339,4.232,340,2.4,341,1.589,342,4.857,343,3.562,344,5.254,345,3.335,346,3.849,347,1.313,348,6.272,349,1.915,350,2.404,351,1.361,352,1.619,353,2.659,354,1.505,355,1.503,356,2.747,357,1.454,358,1.783,359,1.462,360,1.102,361,3.384,362,1.915,363,3.576,364,2.249,365,1.318,366,1.318,367,1.503,368,2.121,369,2.484,370,2.448,371,2.116,372,1.406,373,1.56,374,2.037,375,2.313,376,1.406,377,2.381,378,1.743,379,2.553,380,2.121,381,2.249,382,1.683,383,1.683,384,1.731,385,2.596,386,2.855,387,0.84,388,3.849,389,2.855,390,2.011,391,2.403,392,2.249,393,2.249,394,1.753,395,2.855,396,2.855,397,1.134,398,3.269,399,3.379,400,1.406,401,0.796,402,2.855,403,2.121,404,1.619,405,2.855,406,2.121,407,2.403,408,2.855,409,2.596,410,1.683,411,2.855,412,2.855,413,2.855,414,3.335,415,4.232,416,2.403,417,2.121,418,2.596,419,3.073,420,1.577,421,1.406,422,2.156,423,4.197,424,4.333,425,5.958,426,2.249,427,5.958,428,2.249,429,3.997,430,2.855,431,5.579,432,1.683,433,2.156,434,2.249,435,2.249,436,2.855,437,2.855,438,1.683,439,2.4,440,1.385,441,1.683,442,2.249,443,2.249,444,2.855,445,4.232,446,2.495,447,4.232,448,2.495,449,4.232,450,2.495,451,4.232,452,2.495,453,4.232,454,2.495,455,4.232,456,2.495,457,4.232,458,2.495,459,4.232,460,2.495,461,4.232,462,2.495,463,4.232,464,2.495,465,1.683,466,2.4,467,2.855,468,2.249,469,2.249,470,2.855,471,4.232,472,1.683,473,4.232,474,1.683,475,4.232,476,1.683,477,4.232,478,1.683,479,1.683,480,2.156,481,1.683,482,2.249,483,2.249,484,2.855,485,1.683,486,1.683,487,1.683,488,1.683,489,1.83,490,2.855]],["title/classes/Clock.html",[0,0.194,355,1.375]],["body/classes/Clock.html",[0,0.353,2,1.501,3,0.249,4,0.337,5,0.203,6,0.215,8,0.188,9,4.189,16,0.011,23,1.671,24,0.265,29,1.008,35,1.472,57,0.992,58,1.501,60,1.287,61,0.876,78,0.203,90,0.631,126,0.158,127,0.507,137,0.355,138,0.703,139,0.876,141,0.876,148,0.904,170,0.387,171,1.219,172,0.686,173,0.349,203,0.007,204,0.008,205,0.007,217,3.004,221,1.603,226,2.458,228,1.671,229,1.472,235,2.158,244,2.968,324,2.754,355,2.744,384,2.034,491,3.694,492,4.595,493,2.948,494,5.624,495,5.654,496,5.104,497,5.624,498,4.873,499,4.873,500,4.449,501,4.185,502,4.149,503,5.93,504,4.185,505,2.819,506,4.185,507,2.621,508,5.207,509,3.694,510,3.186,511,5.624,512,4.521,513,4.521,514,5.207,515,5.624,516,4.521,517,4.521,518,5.624,519,4.521,520,4.521,521,3.917,522,3.052,523,3.917]],["title/interfaces/ClusterOptions.html",[170,0.242,359,1.338]],["body/interfaces/ClusterOptions.html",[0,0.315,3,0.186,4,0.256,5,0.151,6,0.219,8,0.14,11,0.53,12,1.578,16,0.011,17,2.037,18,0.731,19,1.465,24,0.198,25,0.9,29,1.064,30,1.584,35,1.216,56,0.484,57,0.686,58,1.121,61,1.028,63,0.81,69,2.101,70,2.631,71,2.631,78,0.238,87,1.502,88,1.153,90,0.594,126,0.2,127,0.378,136,0.643,137,0.334,138,0.663,139,1.2,149,2.428,170,0.393,172,0.521,173,0.438,203,0.005,204,0.007,205,0.005,207,0.499,229,1.39,302,1.316,310,2.49,311,3.283,327,1.182,329,1.891,341,2.361,347,2.114,355,2.42,358,1.564,359,2.629,367,1.318,370,2.689,371,1.318,374,1.355,377,2.5,384,1.518,387,1.717,493,1.769,524,3.707,525,2.758,526,2.601,527,4.366,528,5.603,529,4.367,530,4.8,531,5.369,532,4.43,533,4.222,534,3.273,535,3.598,536,4.024,537,4.222,538,2.778,539,4.115,540,3.132,541,2.765,542,3.598,543,3.92,544,4.222,545,3.442,546,3.513,547,3.315,548,3.566,549,2.255,550,4.841,551,4.299,552,3.03,553,3.125,554,3.125,555,1.828,556,4.184,557,2.49,558,2.379,559,3.136,560,2.925,561,2.379,562,2.105,563,2.279,564,2.615,565,2.758,566,2.279,567,1.433,568,3.125,569,3.125,570,2.615,571,3.125,572,3.125,573,2.783,574,3.311,575,3.125,576,3.125,577,3.125,578,4.192]],["title/interfaces/Counting.html",[170,0.242,230,2.482]],["body/interfaces/Counting.html",[0,0.276,3,0.208,4,0.276,5,0.17,6,0.192,8,0.157,11,0.697,16,0.011,22,2.258,24,0.221,27,1.957,28,1.989,29,0.595,35,1.312,57,1.036,59,0.999,60,0.865,61,0.732,66,3.012,68,2.191,72,1.397,78,0.252,79,1.002,90,0.65,121,2.393,122,1.517,126,0.175,127,0.424,134,1.919,135,1.605,136,0.939,137,0.361,138,0.817,139,1.207,141,0.891,142,2.552,144,2.627,148,0.946,149,1.605,151,3.126,152,2.258,170,0.462,171,1.416,172,0.671,173,0.398,203,0.005,204,0.007,205,0.005,206,4.318,207,0.558,208,2.788,209,3.274,210,1.56,211,4.221,212,3.076,213,3.046,214,2.258,215,1.86,216,2.552,217,1.56,218,1.36,219,4.149,220,4.325,221,1.472,222,3.797,223,2.788,224,2.664,226,2.458,227,4.034,228,1.853,229,1.472,230,4.515,232,3.012,233,3.354,234,2.552,235,2.393,236,4.343,237,4.343,238,1.957,239,2.155,240,3.384,241,4.044,242,2.552,243,3.274,244,1.751,245,3.274,246,3.088,247,0.842,248,3.274,249,3.274,250,1.1,251,4.343,252,3.274,253,3.274,254,2.928,255,3.274,256,3.274,257,3.274,258,2.191,259,1.56,260,3.646,261,4.153,262,4.531,263,2.928,264,4.343,265,4.343,266,3.274,267,2.788,268,4.095,269,3.274,270,3.274,271,2.788,272,3.274,273,3.274,274,3.274,579,4.727]],["title/interfaces/CsvFileWriter.html",[170,0.242,580,2.728]],["body/interfaces/CsvFileWriter.html",[0,0.161,3,0.1,4,0.161,5,0.189,6,0.141,8,0.153,11,0.671,16,0.011,17,1.817,18,0.662,19,1.704,20,2.393,21,1.21,22,1.849,24,0.107,26,1.663,28,1.633,29,0.662,30,1.413,32,2.623,35,0.767,56,0.477,57,0.27,58,0.606,59,1.01,60,0.841,61,0.568,63,0.641,67,1.058,69,1.287,72,1.084,73,1.234,78,0.132,79,0.823,87,0.948,88,0.727,90,0.613,94,2.278,106,2.207,126,0.147,136,0.508,137,0.311,138,0.85,139,0.568,141,0.976,148,0.889,149,0.775,152,1.688,166,2.066,170,0.381,171,0.796,172,0.329,173,0.426,175,3.212,177,0.821,192,1.587,203,0.007,204,0.004,205,0.007,207,0.27,212,1.892,215,0.898,217,1.21,218,1.055,221,1.287,222,2.84,224,2.066,229,1.206,234,1.232,238,1.434,239,1.86,244,2.134,247,0.406,250,1.224,259,0.753,260,1.9,278,0.504,288,0.831,302,0.831,311,1.488,312,1.92,313,1.934,315,1.974,316,1.658,317,2.42,318,2.544,319,1.319,320,1.652,321,0.846,322,2.13,323,1.642,324,1.319,325,2.018,326,0.545,327,1.151,341,0.753,347,1.253,350,1.925,351,1.536,353,1.699,354,1.058,355,1.145,356,1.587,357,1.022,358,1.358,359,1.114,360,0.775,365,1.488,366,0.927,367,1.145,369,1.587,370,2.534,371,2.349,372,0.988,373,1.097,374,2.284,375,2.207,376,0.988,377,2.05,378,1.869,379,2.834,382,1.183,383,1.183,387,0.948,390,1.414,397,1.281,398,3.054,400,0.988,401,1.29,403,1.491,404,1.138,419,1.989,421,0.988,422,1.022,429,2.162,432,1.183,433,1.022,438,1.183,440,1.055,441,1.183,446,1.9,448,1.9,450,1.9,452,1.9,454,1.9,456,1.9,458,1.9,460,1.9,462,1.9,464,1.9,465,1.183,472,1.183,474,1.183,476,1.183,478,1.183,479,1.183,480,1.022,481,1.183,485,1.183,486,1.183,487,1.183,488,1.183,489,1.286,493,0.957,527,1.232,538,0.846,540,1.753,541,1.688,543,1.699,546,2.135,547,1.699,548,1.138,549,0.775,552,1.399,562,1.138,567,1.956,573,1.536,574,1.828,580,4.163,581,1.414,582,2.931,583,2.395,584,1.642,585,3.643,586,2.931,587,2.714,588,5.154,589,2.283,590,3.188,591,1.761,592,3.258,593,3.763,594,2.714,595,2.283,596,3.908,597,2.931,598,1.414,599,1.414,600,1.414,601,2.066,602,2.54,603,4.264,604,1.69,605,1.346,606,3.258,607,1.346,608,4.974,609,2.714,610,1.581,611,4.915,612,2.67,613,5.406,614,3.991,615,1.581,616,2.931,617,4.478,618,1.69,619,1.69,620,5.154,621,5.406,622,4.223,623,1.69,624,2.162,625,2.714,626,1.232,627,1.69,628,3.4,629,3.4,630,3.4,631,4.553,632,2.714,633,3.4,634,2.395,635,1.828,636,3.4,637,3.4,638,3.4,639,1.414,640,3.4,641,2.271,642,2.714,643,3.4,644,3.4,645,2.066,646,1.491,647,4.206,648,1.825,649,4.553,650,1.69,651,1.69,652,1.69,653,1.414,654,3.568,655,1.491,656,1.581,657,1.581,658,2.623,659,1.825,660,1.69,661,0.898,662,2.846,663,1.414,664,1.825,665,4.606,666,3.673,667,2.931,668,4.206,669,2.271,670,3.182,671,2.54,672,1.346,673,1.286,674,1.414,675,1.414,676,1.414,677,1.346,678,1.825,679,1.286,680,1.414,681,1.825,682,1.581,683,1.69,684,1.825,685,1.825,686,1.825,687,1.825,688,1.491,689,1.825,690,1.825,691,2.589,692,1.581,693,1.414,694,1.825,695,1.825,696,1.346,697,2.395,698,4.206,699,1.825,700,1.825,701,1.581,702,1.825,703,1.825,704,1.825,705,1.825,706,1.825,707,1.825,708,4.606,709,3.568,710,4.206,711,2.931,712,2.931,713,2.931,714,2.931,715,1.828,716,1.642,717,2.271,718,2.395,719,2.395,720,2.395,721,2.395,722,2.395,723,2.395,724,2.395,725,1.699,726,1.581,727,1.825,728,2.395,729,2.395,730,2.395,731,2.395,732,1.825,733,1.581,734,1.414,735,1.097,736,1.825,737,2.931,738,3.673,739,2.714,740,1.825,741,1.825,742,1.825,743,1.825,744,1.825,745,1.825,746,1.825,747,3.673,748,1.825,749,1.825,750,1.825,751,1.825,752,1.825,753,1.825,754,1.825,755,1.825,756,1.825,757,1.581,758,1.825,759,0.957,760,1.581,761,3.673,762,1.825,763,2.931,764,1.69,765,1.825,766,1.825,767,1.825,768,1.825,769,1.825,770,2.931,771,1.825,772,2.931,773,2.931,774,1.825,775,1.825,776,1.825,777,1.825,778,1.825,779,2.931,780,1.825,781,1.825,782,1.825,783,1.581,784,2.931,785,1.825,786,1.825,787,1.825,788,1.825,789,1.825,790,1.825,791,5.374,792,1.825,793,1.581,794,3.673,795,1.825,796,1.825,797,1.825,798,1.825,799,1.825,800,2.54,801,1.825,802,1.581,803,1.825,804,1.825,805,3.673,806,1.825,807,4.295,808,1.825,809,5.545,810,1.825,811,1.825,812,1.825,813,1.825,814,1.825,815,1.825,816,1.825,817,1.825,818,1.825,819,1.825,820,1.825,821,1.825,822,1.825,823,1.825,824,1.581,825,1.825,826,1.825]],["title/interfaces/CsvMetricReporterOptions.html",[170,0.242,621,3.052]],["body/interfaces/CsvMetricReporterOptions.html",[0,0.157,3,0.097,4,0.157,5,0.161,6,0.067,8,0.149,11,0.657,16,0.011,17,1.798,18,0.447,19,1.741,20,2.45,21,1.174,22,1.438,24,0.103,25,0.551,26,1.651,28,1.606,29,0.647,30,1.401,32,2.604,56,0.483,57,0.26,58,0.584,59,0.972,60,0.82,63,0.627,67,1.019,69,1.255,72,1.051,73,1.263,78,0.128,79,0.809,88,1.642,90,0.599,94,2.24,106,2.152,126,0.144,136,0.496,137,0.312,138,0.847,139,0.797,141,0.972,148,0.88,149,0.746,152,1.652,166,2.004,170,0.364,171,0.892,172,0.319,173,0.425,175,3.192,177,0.791,192,1.54,203,0.007,204,0.004,205,0.007,207,0.26,212,1.851,215,0.865,217,0.726,218,1.023,221,1.077,222,1.92,224,2.004,229,1.472,234,1.187,238,1.398,239,1.832,244,2.24,247,0.391,250,0.828,259,0.726,260,1.844,278,0.485,288,0.806,302,0.498,311,1.444,312,1.888,313,1.907,315,1.941,316,1.626,317,2.38,318,2.505,319,1.279,320,1.611,321,0.814,322,2.076,323,2.006,324,1.279,325,1.987,326,0.525,327,1.077,341,1.174,347,1.222,350,1.877,351,1.491,353,1.649,354,1.019,355,1.11,356,1.54,357,0.984,358,1.317,359,1.08,360,0.746,365,1.444,366,0.892,367,1.11,369,1.54,370,2.483,371,2.39,372,0.952,373,1.056,374,2.353,375,2.152,376,0.952,377,2.024,378,1.837,379,2.812,382,1.14,383,1.14,387,0.92,390,1.362,397,1.243,398,3.025,400,0.952,401,1.262,403,1.436,404,1.096,419,1.939,421,0.952,422,0.984,429,3.035,432,1.14,433,0.984,438,1.14,440,1.023,441,1.14,446,1.844,448,1.844,450,1.844,452,1.844,454,1.844,456,1.844,458,1.844,460,1.844,462,1.844,464,1.844,465,1.14,472,1.14,474,1.14,476,1.14,478,1.14,479,1.14,480,0.984,481,1.14,485,1.14,486,1.14,487,1.14,488,1.14,489,1.239,493,1.491,527,1.187,538,0.814,540,1.71,541,1.652,543,1.649,546,2.455,547,2.076,548,1.096,549,0.746,552,1.357,562,1.096,567,1.521,573,1.491,574,1.773,580,4.241,581,1.362,582,1.758,583,1.436,584,0.984,585,2.9,587,1.627,588,5.025,590,2.668,591,1.056,592,2.203,593,3.362,594,1.627,596,3.735,597,1.758,598,1.362,599,1.362,600,1.362,601,2.004,602,2.464,603,5.067,604,1.627,605,1.297,606,3.943,607,1.297,608,5.205,609,2.633,610,1.523,611,4.938,612,2.803,613,5.681,614,4.743,615,1.523,616,2.844,617,5.162,618,1.627,619,1.627,620,5.147,621,5.416,622,4.698,623,2.633,624,2.642,625,3.809,626,1.92,627,2.633,628,4.476,629,4.476,630,4.476,631,5.426,632,3.809,633,4.476,634,3.362,635,2.566,636,4.476,637,4.476,638,4.476,639,2.203,640,4.476,641,3.188,642,3.809,643,4.476,644,4.476,645,2.004,646,1.436,647,4.115,648,1.758,649,4.476,650,1.627,651,1.627,652,1.627,653,1.362,654,3.501,655,1.436,656,1.523,657,1.523,658,2.566,659,1.758,660,1.627,661,0.865,662,2.774,663,1.362,664,1.758,665,4.519,666,3.581,667,2.844,668,4.115,669,2.203,670,3.103,671,2.464,672,1.297,673,1.239,674,1.362,675,1.362,676,1.362,677,1.297,678,1.758,679,1.239,680,1.362,681,1.758,682,1.523,683,1.627,684,1.758,685,1.758,686,1.758,687,1.758,688,1.436,689,1.758,690,1.758,691,2.524,692,1.523,693,1.362,694,1.758,695,1.758,696,1.297,697,2.323,698,4.115,699,1.758,700,1.758,701,1.523,702,1.758,703,1.758,704,1.758,705,1.758,706,1.758,707,1.758,708,4.519,709,3.501,710,4.115,711,2.844,712,2.844,713,2.844,714,2.844,715,1.773,716,1.593,717,2.203,718,2.323,719,2.323,720,2.323,721,2.323,722,2.323,723,2.323,724,2.323,725,1.649,726,1.523,727,1.758,728,2.323,729,2.323,730,2.323,731,2.323,732,1.758,733,1.523,734,1.362,735,1.056,736,1.758,737,2.844,738,3.581,739,2.633,740,1.758,741,1.758,742,1.758,743,1.758,744,1.758,745,1.758,746,1.758,747,3.581,748,1.758,749,1.758,750,1.758,751,1.758,752,1.758,753,1.758,754,1.758,755,1.758,756,1.758,757,1.523,758,1.758,759,0.921,760,1.523,761,3.581,762,1.758,763,2.844,764,1.627,765,1.758,766,1.758,767,1.758,768,1.758,769,1.758,770,2.844,771,1.758,772,2.844,773,2.844,774,1.758,775,1.758,776,1.758,777,1.758,778,1.758,779,2.844,780,1.758,781,1.758,782,1.758,783,1.523,784,2.844,785,1.758,786,1.758,787,1.758,788,1.758,789,1.758,790,1.758,791,5.299,792,1.758,793,1.523,794,3.581,795,1.758,796,1.758,797,1.758,798,1.758,799,1.758,800,2.464,801,1.758,802,1.523,803,1.758,804,1.758,805,3.581,806,1.758,807,4.241,808,1.758,809,5.474,810,1.758,811,1.758,812,1.758,813,1.758,814,1.758,815,1.758,816,1.758,817,1.758,818,1.758,819,1.758,820,1.758,821,1.758,822,1.758,823,1.758,824,1.523,825,1.758,826,1.758]],["title/classes/DefaultClusterOptions.html",[0,0.194,311,1.788]],["body/classes/DefaultClusterOptions.html",[0,0.312,2,1.098,3,0.182,4,0.252,5,0.148,6,0.241,8,0.137,11,0.566,12,1.643,16,0.011,17,2.095,19,1.449,23,1.222,24,0.193,25,0.887,29,1.113,30,1.63,56,0.485,57,0.676,58,2.137,59,1.093,61,1.192,63,0.698,69,1.985,70,2.614,71,2.614,78,0.236,90,0.503,126,0.198,127,0.371,136,0.633,137,0.332,138,0.656,139,1.192,149,2.407,170,0.39,172,0.371,173,0.437,203,0.005,204,0.007,205,0.005,229,1.198,302,1.297,310,2.438,311,3.316,327,1.169,329,2.563,341,2.167,347,2.256,355,2.404,358,1.531,359,2.622,367,1.291,370,2.631,371,1.291,374,1.327,377,2.551,384,2.059,387,1.698,493,1.732,524,4.092,525,2.7,526,1.851,527,4.157,528,5.334,529,4.194,530,4.61,531,5.156,532,4.39,534,2.329,535,2.56,536,2.864,538,2.626,539,3.858,540,2.939,541,2.705,542,2.56,543,3.73,545,3.404,546,3.467,547,2.653,548,3.274,549,1.944,550,4.746,551,3.06,552,3.118,553,3.06,554,3.06,555,1.79,556,4.157,557,2.438,558,2.329,559,3.09,560,2.864,561,2.329,562,2.061,563,2.232,564,2.56,565,2.7,566,2.232,567,1.404,568,4.237,569,4.237,570,3.546,571,4.237,572,4.237,573,3.227,574,3.534,575,4.237,576,3.06,577,3.06,578,4.171,827,4.133,828,4.133,829,4.133,830,4.133,831,4.133,832,4.133]],["title/classes/DefaultCsvFileWriter.html",[0,0.194,833,3.052]],["body/classes/DefaultCsvFileWriter.html",[0,0.222,2,0.921,3,0.153,4,0.222,5,0.307,6,0.247,8,0.115,11,0.613,12,1.315,16,0.011,18,0.967,22,2.234,23,1.025,24,0.162,25,0.782,26,1.837,29,0.967,30,1.508,35,1.057,56,0.473,60,0.634,61,1.233,63,0.616,73,1.3,78,0.124,79,1.003,87,1.879,88,1.442,90,0.589,126,0.21,134,2.051,137,0.27,138,0.768,139,0.782,141,0.831,148,0.858,149,1.715,170,0.278,173,0.42,175,2.345,203,0.004,204,0.006,205,0.004,221,1.247,226,2.288,244,1.871,247,0.9,250,1.524,278,1.115,288,0.786,302,1.145,326,0.828,327,1.294,333,1.666,340,2.972,341,2.587,365,2.658,370,2.69,371,2.69,379,2.864,387,0.896,397,2.288,406,3.893,407,4.411,414,5.325,416,4.411,417,3.3,546,2.658,549,1.177,557,2.979,566,3.535,567,2.023,573,2.744,580,4.056,585,3.358,586,4.765,587,2.566,588,3.129,590,2.618,591,2.427,593,3.893,594,2.566,602,2.401,606,2.147,620,2.147,622,4.547,634,4.277,635,1.729,645,3.358,654,4.311,688,4.547,697,3.3,735,3.344,833,5.795,834,2.566,835,5.239,836,5.239,837,4.311,838,6.388,839,6.388,840,5.802,841,3.466,842,6.232,843,5.051,844,3.466,845,5.236,846,6.732,847,4.536,848,5.236,849,4.765,850,3.466,851,6.77,852,3.466,853,5.239,854,4.441,855,3.466,856,4.441,857,4.765,858,4.039,859,4.765,860,4.441,861,4.441,862,3.466,863,6.388,864,6.758,865,5.033,866,6.388,867,5.378,868,5.81,869,3.922,870,5.81,871,5.378,872,4.441,873,3.466,874,3.466,875,3.466,876,3.466,877,4.441,878,4.441,879,4.847,880,3.048,881,2.566,882,2.566,883,3.048,884,4.765,885,2.772,886,5.997,887,5.236,888,2.772,889,4.765,890,4.039,891,2.772,892,2.772,893,3.048,894,2.772,895,2.401,896,2.566,897,3.048,898,3.048,899,3.048,900,4.411,901,3.048,902,3.048,903,3.048,904,5.239,905,4.441,906,3.048,907,3.129,908,3.048,909,3.048,910,3.3,911,3.048,912,5.757,913,5.757,914,3.048,915,3.048,916,3.048,917,3.048,918,4.441,919,3.048,920,4.441,921,3.048,922,3.048,923,3.048,924,3.048,925,3.048]],["title/interfaces/DefaultCsvFileWriterOptions.html",[170,0.242,842,3.26]],["body/interfaces/DefaultCsvFileWriterOptions.html",[0,0.237,3,0.167,4,0.237,5,0.306,6,0.116,8,0.126,11,0.575,12,1.19,16,0.011,18,0.478,22,2.013,24,0.178,25,0.835,26,1.765,29,0.789,30,1.467,56,0.472,60,0.695,63,0.463,73,1.293,78,0.136,79,0.965,88,1.673,90,0.48,126,0.216,134,2.772,137,0.282,138,0.787,139,1.22,141,0.857,148,0.885,149,1.831,170,0.296,173,0.425,175,2.468,203,0.004,204,0.006,205,0.004,207,0.449,221,1.313,226,1.885,244,1.407,247,0.676,250,1.255,278,0.838,288,0.861,302,0.861,326,0.907,327,1.373,333,2.592,340,3.128,341,2.474,365,2.772,370,2.614,371,2.614,379,2.923,387,1.395,397,1.885,406,4.098,407,4.643,414,5.457,416,4.643,417,3.524,546,3.198,549,1.289,557,2.24,566,2.912,567,2.13,573,2.862,580,3.885,585,2.14,586,3.037,588,2.352,590,1.969,591,1.825,593,3.524,602,2.631,606,3.341,620,2.352,622,4.461,634,5.146,635,2.69,645,3.535,654,4.23,688,4.461,697,2.481,735,3.014,833,5.799,834,2.811,835,3.339,836,3.339,837,3.341,838,5.515,839,5.515,840,5.055,842,6.241,845,4.313,846,6.822,847,3.737,848,4.313,849,5.016,851,6.886,853,4.742,854,3.339,856,3.339,857,5.016,858,3.037,859,5.016,860,3.339,861,3.339,863,5.515,864,6.004,865,4.345,866,5.515,867,4.643,868,5.016,869,3.386,870,5.016,871,4.643,872,3.339,877,3.339,878,4.742,879,5.055,880,3.339,881,2.811,882,2.811,883,3.339,884,5.992,885,4.313,886,6.498,887,6.299,888,4.313,889,5.992,890,5.461,891,4.313,892,4.313,893,3.339,894,3.037,895,2.631,896,2.811,897,3.339,898,3.339,899,3.339,900,4.643,901,3.339,902,3.339,903,3.339,904,5.515,905,4.742,906,3.339,907,3.341,908,3.339,909,3.339,910,3.524,911,3.339,912,6.004,913,6.004,914,3.339,915,3.339,916,3.339,917,3.339,918,4.742,919,3.339,920,4.742,921,3.339,922,3.339,923,3.339,924,3.339,925,3.339]],["title/classes/DefaultPrometheusClusterOptions.html",[0,0.194,926,3.052]],["body/classes/DefaultPrometheusClusterOptions.html",[0,0.287,2,1.331,3,0.221,4,0.287,5,0.18,6,0.26,8,0.166,11,0.52,12,1.597,16,0.011,17,1.88,18,0.819,23,1.481,24,0.235,25,1.009,29,1.129,30,1.589,35,1.363,56,0.474,57,0.855,58,2.109,59,1.028,61,1.302,69,1.825,70,2.602,71,2.212,78,0.18,87,1.685,88,1.293,90,0.608,126,0.215,136,0.555,137,0.269,141,0.745,148,0.592,173,0.411,174,2.034,192,2.17,203,0.006,204,0.007,205,0.006,216,3.517,250,1.516,278,1.597,302,1.476,311,3.305,326,1.197,327,0.892,329,2.917,365,2.034,370,2.542,371,2.653,377,1.481,384,2.756,420,1.783,527,3.907,528,5.014,529,4.079,530,4.747,531,5.014,532,4.483,535,4.035,536,3.471,538,2.839,539,3.377,541,2.751,542,3.104,543,3.774,546,3.305,548,3.248,549,2.457,550,4.52,552,3.032,559,3.517,573,3.412,574,3.961,691,2.824,900,3.709,926,5.309,927,4.007,928,4.513,929,4.035,930,5.503,931,6.363,932,6.514,933,5.011,934,5.011,935,7.237,936,5.209,937,5.011,938,5.727,939,5.011,940,7.237,941,5.011,942,6.514,943,5.011,944,6.514,945,6.514,946,4.406,947,5.011,948,5.011,949,5.011,950,5.011,951,5.011,952,5.011]],["title/classes/DefaultReservoir.html",[0,0.194,953,3.052]],["body/classes/DefaultReservoir.html",[0,0.292,2,1.366,3,0.227,4,0.292,5,0.185,6,0.255,8,0.171,12,1.618,16,0.011,18,0.834,23,1.521,24,0.241,25,1.026,26,1.769,29,1.083,35,1.387,56,0.454,57,1.069,58,1.366,59,1.244,61,1.27,63,0.894,78,0.185,79,1.035,87,1.714,88,1.315,90,0.639,126,0.185,127,0.461,137,0.32,138,0.732,148,0.608,170,0.364,172,0.657,173,0.419,203,0.006,204,0.008,205,0.006,210,1.698,221,1.387,235,1.964,247,1.378,250,2.061,278,1.136,401,1.625,420,1.801,440,2.494,584,2.967,715,3.304,865,5.362,953,5.964,954,3.564,955,4.329,956,5.208,957,4.648,958,5.681,959,6.189,960,6.557,961,3.713,962,4.104,963,5.298,964,6.626,965,5.425,966,5.145,967,5.145,968,5.145,969,5.078,970,5.145,971,3.521,972,5.298,973,5.298,974,5.298,975,4.329,976,2.778,977,4.114,978,4.329]],["title/classes/DefaultSender.html",[0,0.194,979,3.26]],["body/classes/DefaultSender.html",[0,0.282,2,1.297,3,0.215,4,0.282,5,0.175,6,0.259,8,0.213,12,1.577,16,0.011,18,0.806,23,1.444,24,0.3,25,0.992,26,1.843,29,1.082,30,1.547,35,1.341,56,0.472,57,0.577,58,1.898,59,0.693,60,1.172,61,1.295,63,0.925,73,1.045,78,0.175,79,0.653,87,1.656,88,1.271,90,0.581,126,0.2,127,0.438,135,2.175,137,0.264,138,0.714,141,0.733,148,0.577,149,2.175,172,0.574,173,0.415,203,0.006,204,0.007,205,0.006,221,1.341,228,1.894,247,1.141,254,5.285,278,1.414,302,1.452,327,1.141,328,4.096,341,2.114,370,2.572,371,2.64,379,2.571,401,1.198,410,3.32,420,1.49,538,2.648,545,3.32,546,2.902,547,2.969,573,2.047,585,4.276,735,3.645,840,5.616,928,4.437,979,6.439,980,4.294,981,5.791,982,5.461,983,6.588,984,5.147,985,6.588,986,6.067,987,4.883,988,8.358,989,8.358,990,6.405,991,4.883,992,4.428,993,4.883,994,6.405,995,6.405,996,4.883,997,4.883,998,5.631,999,6.284,1000,5.631,1001,3.61,1002,4.883,1003,4.741,1004,3.905,1005,6.3,1006,4.883,1007,3.778,1008,6.3,1009,3.383,1010,4.883,1011,4.883,1012,4.883,1013,6.405,1014,4.883,1015,4.883,1016,4.883,1017,7.147,1018,4.883,1019,4.883,1020,4.883,1021,3.905,1022,4.883,1023,4.883,1024,6.405,1025,4.883]],["title/classes/DisabledClusterOptions.html",[0,0.194,578,2.283]],["body/classes/DisabledClusterOptions.html",[0,0.314,2,1.111,3,0.184,4,0.254,5,0.15,6,0.242,8,0.139,11,0.527,12,1.65,16,0.011,17,2.12,19,1.458,23,1.237,24,0.196,25,0.894,29,1.114,30,1.631,56,0.485,57,0.682,58,2.103,59,1.097,61,1.197,63,0.704,69,1.851,70,2.419,71,2.419,78,0.237,90,0.506,126,0.199,127,0.375,136,0.639,137,0.333,138,0.66,139,1.197,149,2.74,170,0.392,172,0.375,173,0.437,203,0.005,204,0.007,205,0.005,229,1.208,302,1.308,310,2.468,311,3.276,327,1.028,329,1.873,341,2.181,347,2.234,355,2.413,358,1.55,359,2.626,367,1.306,370,2.636,371,1.306,374,1.343,377,2.592,384,1.505,387,1.709,493,1.753,524,4.105,525,2.733,526,1.873,527,4.172,528,5.354,529,4.212,530,4.63,531,5.178,532,4.413,534,2.358,535,2.591,536,2.898,538,2.448,539,3.693,540,2.853,541,2.688,542,2.591,543,3.741,545,2.992,546,3.474,547,2.676,548,3.553,549,1.96,550,4.76,551,3.097,552,2.95,553,3.097,554,3.097,555,1.812,556,4.172,557,2.468,558,2.358,559,3.116,560,2.898,561,2.358,562,2.086,563,2.259,564,2.591,565,2.733,566,2.259,567,1.42,568,3.097,569,3.097,570,2.591,571,3.097,572,3.097,573,2.769,574,3.295,575,3.097,576,3.097,577,4.272,578,4.246,1026,4.183,1027,4.183,1028,4.183,1029,4.183,1030,4.183,1031,4.183]],["title/interfaces/ElasticsearchMetricReporterOption.html",[170,0.242,1032,3.522]],["body/interfaces/ElasticsearchMetricReporterOption.html",[0,0.181,3,0.116,4,0.181,5,0.095,6,0.081,8,0.088,11,0.706,16,0.011,18,0.86,19,1.67,20,1.248,21,1.882,24,0.32,25,0.636,26,1.37,27,2.564,28,2.093,29,0.991,30,1.198,32,2.601,56,0.478,57,0.673,59,1.166,60,1.198,63,0.833,73,1.034,78,0.147,79,0.762,88,1.403,90,0.647,126,0.141,127,0.236,136,0.822,137,0.27,138,0.85,141,0.966,144,1.105,148,1.016,152,1.319,156,1.486,162,1.367,170,0.313,171,1.071,172,0.634,173,0.423,174,0.823,177,0.948,203,0.007,204,0.005,205,0.007,207,0.311,212,2.354,214,0.846,215,2.432,218,1.453,221,0.552,222,1.423,228,1.215,229,1.554,238,2.044,239,2.177,247,0.47,250,1.959,278,0.582,288,0.931,291,2.424,302,0.931,304,5.032,305,1.722,310,1.555,311,1.668,312,1.929,313,2.241,314,3.787,315,2.428,316,2.034,317,2.69,318,2.782,319,1.478,320,1.478,321,0.977,322,1.905,323,2.553,324,1.478,325,2.362,326,0.63,327,1.015,328,3.817,330,1.827,331,1.486,332,1.633,333,1.267,334,1.267,341,1.882,343,3.253,347,1.121,349,1.555,350,2.116,351,1.105,352,1.315,353,2.34,354,1.222,355,1.283,356,1.779,357,1.181,358,1.522,359,1.248,360,0.895,361,2.978,362,1.555,363,3.482,364,1.827,365,1.07,366,1.07,367,0.823,369,1.779,370,2.044,371,1.576,372,1.142,373,1.267,374,2.53,375,1.974,376,1.142,377,2.33,378,2.148,379,1.816,382,1.367,383,1.367,387,1.063,388,2.108,398,3.312,399,2.843,400,1.142,401,1.933,403,1.722,404,1.315,410,3.203,419,1.779,420,1.812,421,1.142,422,1.84,423,3.531,424,1.555,432,1.367,433,1.181,438,1.367,439,1.315,440,1.182,441,1.367,446,2.13,448,2.13,450,2.13,452,2.13,454,2.13,456,2.13,458,2.13,460,2.13,462,2.13,464,2.13,465,1.367,466,1.315,472,1.367,474,1.367,476,1.367,478,1.367,479,1.367,480,1.181,481,1.367,485,1.367,486,1.367,487,1.367,488,1.367,502,1.555,538,0.977,541,1.319,552,1.006,555,1.779,583,1.722,607,1.555,683,1.952,709,4.055,759,1.722,907,1.633,910,1.722,928,1.827,1032,5.808,1033,2.108,1034,6.824,1035,5.755,1036,5.755,1037,6.302,1038,5.755,1039,3.613,1040,4.535,1041,6.367,1042,3.286,1043,1.905,1044,2.318,1045,2.108,1046,2.318,1047,2.108,1048,2.318,1049,2.637,1050,2.108,1051,2.637,1052,2.318,1053,2.637,1054,2.637,1055,2.637,1056,4.037,1057,2.637,1058,2.847,1059,2.318,1060,2.318,1061,3.613,1062,2.318,1063,2.318,1064,2.318,1065,2.318,1066,2.318,1067,2.637,1068,2.637,1069,2.637,1070,2.637,1071,2.637,1072,2.637,1073,2.637,1074,1.827,1075,2.637,1076,4.109,1077,2.637,1078,2.637,1079,2.637,1080,2.637,1081,5.049,1082,4.109,1083,4.109,1084,4.109,1085,4.109,1086,4.109,1087,4.109,1088,4.109,1089,4.109,1090,4.109,1091,4.109,1092,2.637,1093,4.109,1094,4.109,1095,4.109,1096,4.109,1097,2.637,1098,2.637,1099,2.318,1100,2.637,1101,2.318,1102,2.637,1103,2.637,1104,2.637,1105,5.049,1106,2.637,1107,1.952,1108,2.637,1109,2.637,1110,2.637,1111,1.555,1112,2.637,1113,5.049,1114,2.637,1115,2.637,1116,2.637,1117,2.637,1118,2.637,1119,4.037,1120,2.108,1121,2.108,1122,2.637,1123,1.315,1124,6.546,1125,2.637,1126,2.108,1127,4.037,1128,3.298,1129,4.109,1130,2.637,1131,4.109,1132,2.637,1133,4.037,1134,2.637,1135,2.637,1136,2.637,1137,2.637,1138,2.637]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.194,1139,3.26]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.23,2,0.965,3,0.16,4,0.23,5,0.13,6,0.263,8,0.121,12,1.35,16,0.011,18,0.77,23,1.074,24,0.17,25,0.809,26,1.829,27,2.673,29,1.096,35,1.094,56,0.479,57,1.066,58,2.067,59,1.243,60,1.12,61,1.326,63,0.637,68,2.837,78,0.13,87,1.582,88,1.214,90,0.631,126,0.146,127,0.326,135,1.774,137,0.276,138,0.76,139,0.809,141,0.598,148,0.872,170,0.287,172,0.698,173,0.421,203,0.004,204,0.006,205,0.004,214,1.166,217,2.656,218,2.5,221,0.76,226,2.72,235,1.994,247,0.93,250,1.216,277,4.178,278,1.35,287,2.25,288,1.94,290,3.167,294,2.904,312,1.134,319,1.306,397,1.269,420,1.65,498,2.516,500,2.821,507,1.684,521,3.62,584,1.626,725,3.817,734,2.25,936,2.904,962,4.392,969,4.239,971,2.94,1139,6.308,1140,6.364,1141,2.689,1142,4.594,1143,5.883,1144,4.845,1145,7.527,1146,5.869,1147,5.38,1148,5.38,1149,5.38,1150,5.38,1151,5.38,1152,5.38,1153,6.491,1154,6.094,1155,5.38,1156,6.234,1157,4.594,1158,5.883,1159,6.491,1160,4.594,1161,5.026,1162,5.225,1163,3.632,1164,5.883,1165,7.239,1166,6.584,1167,3.632,1168,3.632,1169,3.771,1170,3.632,1171,3.632,1172,3.632,1173,3.632,1174,4.372,1175,3.632,1176,3.632,1177,3.827,1178,3.632,1179,3.632,1180,4.594,1181,2.821,1182,3.632,1183,5.38,1184,3.632,1185,3.632,1186,3.632,1187,4.178,1188,4.594,1189,4.594,1190,3.469,1191,4.594,1192,4.594,1193,4.594,1194,3.62,1195,4.594,1196,4.594,1197,4.594,1198,4.594,1199,3.632,1200,3.413,1201,2.373,1202,3.193,1203,1.811,1204,2.689,1205,5.38,1206,4.594,1207,4.594,1208,3.193,1209,3.193,1210,6.491,1211,3.193,1212,5.38]],["title/interfaces/Fields.html",[170,0.242,175,1.733]],["body/interfaces/Fields.html",[0,0.164,3,0.103,4,0.164,5,0.167,6,0.114,8,0.155,11,0.663,16,0.011,17,1.826,18,0.469,19,1.712,20,2.403,21,1.23,22,1.494,26,1.67,28,1.648,29,0.669,30,1.419,32,2.633,56,0.476,57,0.275,58,0.618,59,0.991,60,0.852,61,0.361,63,0.649,67,1.079,69,1.304,72,1.101,73,1.244,78,0.134,79,0.83,90,0.606,94,2.299,106,2.237,126,0.149,136,0.515,137,0.312,138,0.852,139,0.577,141,0.978,148,0.893,149,0.791,152,1.708,166,2.099,170,0.384,171,0.807,172,0.334,173,0.427,175,3.255,177,0.838,192,1.613,203,0.007,204,0.004,205,0.007,207,0.275,212,1.914,215,0.916,217,0.769,218,1.072,221,1.114,222,2.011,224,2.099,229,1.218,234,1.257,238,1.454,239,1.875,244,1.971,247,0.415,250,0.867,259,1.23,260,1.931,275,1.442,278,0.514,288,0.844,302,0.528,311,1.512,312,1.938,313,1.948,315,1.992,316,1.674,317,2.442,318,2.564,319,1.34,320,1.675,321,0.863,322,2.158,323,1.668,324,1.34,325,2.035,326,0.556,327,1.105,341,0.769,347,1.27,350,1.951,351,1.561,353,1.727,354,1.079,355,1.163,356,1.613,357,1.043,358,1.38,359,1.132,360,0.791,365,1.512,366,0.945,367,1.163,369,1.613,370,2.51,371,2.361,372,1.008,373,1.119,374,2.298,375,2.237,376,1.008,377,2.064,378,1.885,379,2.845,382,1.207,383,1.207,387,0.963,390,1.442,397,1.302,398,3.07,400,1.008,401,1.305,403,1.521,404,1.161,419,2.016,421,1.008,422,1.043,429,2.197,432,1.207,433,1.043,438,1.207,440,1.072,441,1.207,446,1.931,448,1.931,450,1.931,452,1.931,454,1.931,456,1.931,458,1.931,460,1.931,462,1.931,464,1.931,465,1.207,472,1.207,474,1.207,476,1.207,478,1.207,479,1.207,480,1.043,481,1.207,485,1.207,486,1.207,487,1.207,488,1.207,489,1.312,493,0.976,527,1.257,538,0.863,540,1.777,541,1.708,543,1.727,546,2.16,547,1.727,548,1.161,549,0.791,552,1.422,562,1.161,567,1.581,573,1.561,574,1.858,580,4.036,581,1.442,582,1.862,583,1.521,584,1.043,585,2.998,587,1.724,588,5.073,590,2.758,591,1.119,592,2.307,593,3.476,594,1.724,596,3.934,597,1.862,598,1.442,599,1.442,600,1.442,601,2.099,602,2.581,603,4.307,604,1.724,605,1.374,606,3.296,607,1.374,608,5.011,609,2.757,610,1.613,611,4.94,612,2.697,613,5.429,614,4.031,615,1.613,616,2.979,617,4.514,618,1.724,619,1.724,620,5.168,621,5.429,622,4.257,623,1.724,624,2.197,625,2.757,626,1.257,627,1.724,628,3.446,629,3.446,630,3.446,631,4.594,632,2.757,633,3.446,634,2.433,635,1.858,636,3.446,637,3.446,638,3.446,639,1.442,640,3.446,641,2.307,642,2.757,643,3.446,644,3.446,645,2.099,646,1.521,647,4.254,648,1.862,649,4.594,650,1.724,651,1.724,652,1.724,653,1.442,654,3.604,655,1.521,656,1.613,657,1.613,658,2.653,659,1.862,660,1.724,661,0.916,662,2.884,663,1.442,664,1.862,665,4.653,666,3.723,667,2.979,668,4.254,669,2.307,670,3.225,671,2.581,672,1.374,673,1.312,674,1.442,675,1.442,676,1.442,677,1.374,678,1.862,679,1.312,680,1.442,681,1.862,682,1.613,683,1.724,684,1.862,685,1.862,686,1.862,687,1.862,688,1.521,689,1.862,690,1.862,691,2.624,692,1.613,693,1.442,694,1.862,695,1.862,696,1.374,697,2.433,698,4.254,699,1.862,700,1.862,701,1.613,702,1.862,703,1.862,704,1.862,705,1.862,706,1.862,707,1.862,708,4.653,709,3.604,710,4.254,711,2.979,712,2.979,713,2.979,714,2.979,715,1.858,716,1.668,717,2.307,718,2.433,719,2.433,720,2.433,721,2.433,722,2.433,723,2.433,724,2.433,725,1.727,726,1.613,727,1.862,728,2.433,729,2.433,730,2.433,731,2.433,732,1.862,733,1.613,734,1.442,735,1.119,736,1.862,737,2.979,738,3.723,739,2.757,740,1.862,741,1.862,742,1.862,743,1.862,744,1.862,745,1.862,746,1.862,747,3.723,748,1.862,749,1.862,750,1.862,751,1.862,752,1.862,753,1.862,754,1.862,755,1.862,756,1.862,757,1.613,758,1.862,759,0.976,760,1.613,761,3.723,762,1.862,763,2.979,764,1.724,765,1.862,766,1.862,767,1.862,768,1.862,769,1.862,770,2.979,771,1.862,772,2.979,773,2.979,774,1.862,775,1.862,776,1.862,777,1.862,778,1.862,779,2.979,780,1.862,781,1.862,782,1.862,783,1.613,784,2.979,785,1.862,786,1.862,787,1.862,788,1.862,789,1.862,790,1.862,791,5.413,792,1.862,793,1.613,794,3.723,795,1.862,796,1.862,797,1.862,798,1.862,799,1.862,800,2.581,801,1.862,802,1.613,803,1.862,804,1.862,805,3.723,806,1.862,807,4.324,808,1.862,809,5.582,810,1.862,811,1.862,812,1.862,813,1.862,814,1.862,815,1.862,816,1.862,817,1.862,818,1.862,819,1.862,820,1.862,821,1.862,822,1.862,823,1.862,824,1.613,825,1.862,826,1.862,1213,2.329]],["title/interfaces/Gauge.html",[170,0.242,313,1.267]],["body/interfaces/Gauge.html",[0,0.308,1,3.195,3,0.247,4,0.308,5,0.201,6,0.214,8,0.273,10,3.303,11,0.669,12,1.543,16,0.011,17,1.373,18,1.034,22,2.447,24,0.262,26,1.463,29,1.004,35,1.463,53,2.902,56,0.422,57,1.004,59,1.252,60,1.279,61,0.867,63,0.683,73,1.167,78,0.251,88,1.513,90,0.629,94,2.957,126,0.196,127,0.502,136,0.62,137,0.33,138,0.762,141,0.64,148,0.9,170,0.384,171,1.452,172,0.683,173,0.416,174,1.748,185,2.902,186,3.468,203,0.006,204,0.008,205,0.006,207,0.661,214,1.797,226,2.871,247,0.997,278,1.236,313,2.525,360,1.901,367,1.748,387,1.448,401,1.373,837,3.468,955,3.658,961,2.595,1214,4.144,1215,6.147,1216,5.175,1217,4.097,1218,5.599,1219,2.273,1220,5.614,1221,4.923,1222,6.702,1223,4.923,1224,3.023,1225,3.468,1226,3.303,1227,2.792,1228,4.331,1229,3.468,1230,3.658]],["title/interfaces/Groupable.html",[128,2.878,170,0.242]],["body/interfaces/Groupable.html",[3,0.279,4,0.332,5,0.227,6,0.246,8,0.25,11,0.664,16,0.011,18,1.112,20,2.288,21,2.933,24,0.296,35,1.576,38,5.438,48,5.218,56,0.35,61,1.166,73,1.293,78,0.227,79,1.007,87,1.636,88,1.255,90,0.616,109,4.92,126,0.177,127,0.567,128,5.555,137,0.311,138,0.632,170,0.457,172,0.675,173,0.374,174,2.352,203,0.007,204,0.009,205,0.007,207,0.747,229,1.576,347,2.054,1231,5.562,1232,6.023,1233,7.531,1234,6.326,1235,6.326]],["title/classes/HdrSnapshot.html",[0,0.194,1236,3.522]],["body/classes/HdrSnapshot.html",[0,0.281,2,0.874,3,0.145,4,0.214,5,0.118,6,0.255,8,0.212,11,0.461,12,1.707,16,0.011,18,0.857,23,0.973,24,0.154,26,1.426,29,1.126,30,1.169,35,1.017,55,4.274,56,0.377,57,1.065,59,1.117,60,1.478,61,1.285,63,0.9,73,0.934,78,0.118,79,0.854,87,1.257,88,1.267,90,0.685,126,0.207,127,0.295,136,0.903,137,0.264,138,0.757,141,0.376,148,0.986,171,0.842,172,0.295,173,0.425,203,0.004,204,0.006,205,0.004,206,2.883,212,1.748,215,3.381,221,1.815,227,3.42,230,3.258,233,1.473,239,2.545,247,1.03,250,1.585,278,1.276,288,1.102,290,1.295,326,0.786,327,0.586,329,2.86,340,2.424,351,1.379,377,0.973,392,4.72,397,2.02,401,1.566,440,2.296,522,3.448,605,1.941,635,1.641,672,1.941,715,3.184,716,2.177,717,3.011,725,1.525,907,2.038,910,2.149,957,1.776,961,2.96,962,2.038,1177,2.997,1187,2.631,1217,2.883,1219,1.336,1236,6.914,1237,6.181,1238,2.435,1239,6.108,1240,3.84,1241,4.727,1242,4.727,1243,4.727,1244,4.727,1245,4.727,1246,4.727,1247,4.727,1248,4.727,1249,4.727,1250,4.727,1251,5.043,1252,3.29,1253,3.29,1254,3.29,1255,6.451,1256,8.591,1257,8.591,1258,4.861,1259,6.581,1260,3.29,1261,4.861,1262,3.29,1263,4.861,1264,3.29,1265,4.861,1266,3.29,1267,4.861,1268,3.29,1269,5.606,1270,3.29,1271,3.29,1272,4.861,1273,3.29,1274,3.29,1275,3.011,1276,2.435,1277,3.29,1278,3.176,1279,3.29,1280,5.107,1281,3.29,1282,5.107,1283,3.29,1284,2.279,1285,2.893,1286,2.893,1287,3.777,1288,2.893,1289,4.941,1290,4.623,1291,3.29,1292,3.29,1293,3.29,1294,3.29,1295,3.29,1296,3.29,1297,3.29,1298,3.29,1299,3.29,1300,3.29,1301,3.29,1302,3.29,1303,3.29,1304,3.29,1305,3.29,1306,2.631,1307,2.279,1308,3.29,1309,2.279,1310,2.893,1311,2.631,1312,3.887,1313,2.631,1314,2.631,1315,4.623,1316,2.631,1317,2.631,1318,2.631,1319,2.893,1320,2.149,1321,1.854,1322,3.29,1323,2.279,1324,3.29,1325,3.29,1326,3.29,1327,1.941,1328,2.893,1329,2.893,1330,3.29,1331,5.781,1332,3.29,1333,1.941,1334,3.29,1335,1.854,1336,3.29,1337,3.29,1338,3.29]],["title/interfaces/IMetricReporter.html",[170,0.242,1339,3.26]],["body/interfaces/IMetricReporter.html",[0,0.25,3,0.098,4,0.158,5,0.08,6,0.21,8,0.074,9,4,10,1.308,11,0.648,12,0.489,16,0.011,17,0.544,18,0.651,19,1.771,21,0.732,24,0.211,26,1.083,27,1.118,28,2.115,29,0.924,30,1.257,32,2.859,35,0.75,43,3.421,52,2.481,56,0.455,57,0.906,59,0.64,60,0.947,61,1.03,63,0.631,69,1.862,70,1.216,71,1.216,72,1.965,73,0.888,78,0.29,79,0.812,87,1.468,88,1.026,90,0.653,94,2.722,117,2.539,126,0.223,127,0.199,133,1.856,134,0.9,136,0.888,137,0.213,138,0.867,139,0.555,141,0.929,148,0.925,170,0.312,172,0.464,173,0.43,174,1.407,177,1.288,192,0.96,202,2.481,203,0.006,204,0.004,205,0.006,207,0.262,213,3.321,215,2.234,218,0.638,221,1.392,229,1.083,238,1.772,239,2.149,247,0.921,288,0.812,302,1.507,312,2.294,313,2.149,315,2.397,316,2.47,317,3.157,318,2.234,319,1.288,320,2.686,321,0.821,325,2.332,326,0.53,327,1.256,332,2.791,341,1.874,345,1.536,347,2.092,350,2.168,351,1.501,358,1.327,359,1.088,366,1.829,367,1.118,368,1.449,369,2.766,370,2.551,371,1.995,372,1.551,374,2.648,376,2.24,377,1.888,378,2.482,379,2.759,381,1.536,382,2.335,383,2.942,387,2.152,394,3.589,397,1.574,398,3.349,400,1.551,401,1.269,404,1.106,420,1.413,421,0.96,422,1.604,423,1.374,433,0.993,439,1.106,466,1.106,480,0.993,493,0.929,522,2.792,523,1.536,524,3.559,529,1.25,538,0.821,539,1.856,540,0.846,541,2.397,543,1.66,545,2.335,546,2.465,552,1.367,555,3.692,556,1.197,559,1.197,562,1.106,566,3.064,567,2.257,570,4.368,573,1.501,574,1.786,590,3.559,591,2.164,601,2.539,612,1.66,624,1.308,641,1.374,658,3.027,661,2.234,662,2.218,663,1.374,669,2.218,670,1.536,671,1.536,672,1.308,673,1.25,674,1.374,675,1.374,676,1.374,677,1.308,679,1.25,680,2.791,682,1.536,691,3.199,693,1.374,696,3.051,709,1.374,757,1.536,793,1.536,824,3.121,837,3.76,847,1.536,896,1.641,958,1.536,971,2.164,1001,2.018,1007,2.657,1074,1.536,1107,4.728,1123,1.786,1133,1.449,1190,1.149,1203,1.106,1219,0.9,1335,1.25,1339,5.439,1340,1.25,1341,3.581,1342,3.581,1343,3.581,1344,3.961,1345,2.217,1346,2.217,1347,4.547,1348,2.217,1349,3.961,1350,2.217,1351,2.432,1352,3.961,1353,2.943,1354,2.217,1355,2.217,1356,3.961,1357,4.206,1358,4.206,1359,3.961,1360,3.199,1361,3.961,1362,3.121,1363,3.961,1364,4.136,1365,3.602,1366,3.961,1367,2.217,1368,2.217,1369,2.217,1370,1.449,1371,1.25,1372,1.641,1373,1.374,1374,2.657,1375,1.95,1376,3.121,1377,1.95,1378,2.112,1379,1.95,1380,1.95,1381,4.494,1382,1.95,1383,1.536,1384,1.536,1385,1.449,1386,1.308,1387,1.641,1388,1.95,1389,1.95,1390,1.95,1391,1.95,1392,4.136,1393,1.773,1394,1.641,1395,1.95,1396,1.95,1397,1.773,1398,1.95,1399,1.641,1400,1.95,1401,1.95,1402,1.95,1403,3.149,1404,1.95,1405,1.95,1406,1.95,1407,2.112,1408,1.95,1409,1.95,1410,1.95,1411,3.149,1412,3.149,1413,3.149,1414,3.149,1415,3.149,1416,1.95,1417,5.616,1418,1.95,1419,5.337,1420,5.337,1421,1.95,1422,1.95,1423,1.95,1424,1.95,1425,1.95,1426,1.95,1427,1.95,1428,1.95,1429,1.95,1430,1.95,1431,3.149,1432,1.95,1433,1.95,1434,1.95,1435,1.95,1436,3.149,1437,1.95,1438,1.773,1439,1.536,1440,3.149,1441,1.95,1442,4.991,1443,4.991,1444,3.961,1445,3.961,1446,3.961,1447,3.961,1448,3.149,1449,1.95,1450,3.961,1451,5.337,1452,3.149,1453,1.95,1454,3.961,1455,1.95,1456,1.95,1457,3.961,1458,1.95,1459,1.95,1460,1.95,1461,3.961,1462,1.95,1463,1.95,1464,1.95,1465,3.961,1466,1.95,1467,1.95,1468,1.95,1469,3.961,1470,1.95,1471,1.95,1472,5.337,1473,1.95,1474,1.536,1475,1.773,1476,3.199,1477,1.95,1478,3.149,1479,3.149,1480,1.95,1481,1.641,1482,3.961,1483,1.95,1484,1.95,1485,1.95,1486,1.95,1487,1.641,1488,1.95,1489,1.95,1490,1.536,1491,1.536,1492,1.536,1493,1.536,1494,4.136,1495,1.95,1496,1.773,1497,1.95,1498,1.95,1499,1.95,1500,1.95,1501,1.95,1502,3.335,1503,1.95,1504,1.95,1505,1.641,1506,1.641,1507,1.641,1508,1.641,1509,1.95,1510,1.536,1511,1.95]],["title/interfaces/InfluxMetricReporterOptions.html",[170,0.242,1512,3.26]],["body/interfaces/InfluxMetricReporterOptions.html",[0,0.208,3,0.14,4,0.208,5,0.114,6,0.097,8,0.105,11,0.631,16,0.011,18,0.595,19,1.653,20,0.963,24,0.148,25,0.732,26,1.472,28,1.936,29,0.844,30,0.865,32,2.698,56,0.438,59,1.15,60,1.287,63,0.951,69,0.888,72,1.672,73,1.095,78,0.17,79,0.897,90,0.626,126,0.158,127,0.284,136,0.829,137,0.29,138,0.851,141,0.995,148,1.006,152,1.518,156,2.665,162,2.932,170,0.369,171,1.162,172,0.284,173,0.421,174,0.99,175,3.068,177,1.14,203,0.005,204,0.005,205,0.007,207,0.374,215,1.247,218,1.627,221,1.312,229,1.312,238,1.958,239,2.097,247,0.564,278,0.7,288,0.718,302,1.421,303,4.598,309,3.089,311,1.92,312,2.339,313,2.203,314,3.927,315,2.34,316,1.804,317,3.114,318,2.226,319,1.701,320,2.034,321,1.174,322,2.907,323,2.808,324,1.701,325,2.276,326,0.757,327,1.253,328,1.711,341,1.561,343,3.429,347,1.29,349,1.869,350,2.37,351,1.328,352,1.58,353,2.622,354,1.469,355,1.476,356,2.047,357,1.419,358,1.751,359,1.436,360,1.605,361,3.957,362,1.869,363,4.222,364,2.196,365,1.287,366,1.287,369,2.047,370,2.529,371,1.958,372,1.372,373,1.523,374,2.258,375,2.272,376,1.372,377,2.47,378,1.718,379,2.695,380,2.071,384,1.14,390,1.963,397,2.547,398,3.253,399,3.345,400,1.372,401,1.16,404,1.58,410,1.643,419,3.156,421,1.372,422,2.117,423,4.155,424,3.698,429,2.789,432,1.643,433,2.117,438,1.643,439,2.358,440,1.361,441,1.643,446,2.451,448,2.451,450,2.451,452,2.451,454,2.451,456,2.451,458,2.451,460,2.451,462,2.451,464,2.451,465,1.643,466,2.358,472,1.643,474,1.643,476,1.643,478,1.643,479,1.643,480,2.117,481,1.643,485,1.643,486,1.643,487,1.643,488,1.643,492,2.071,496,2.929,538,2.095,541,2.013,547,1.469,567,1.076,583,3.089,585,1.786,596,1.786,655,2.071,656,2.196,735,3.013,907,2.929,910,3.089,981,4.344,982,5.565,984,3.089,985,3.781,986,2.534,992,3.503,1004,2.534,1005,6.718,1007,2.789,1008,5.364,1009,5.85,1042,3.781,1119,5.829,1120,3.781,1121,3.781,1126,2.534,1128,4.382,1204,2.346,1323,3.276,1512,5.207,1513,2.534,1514,2.787,1515,2.787,1516,2.346,1517,4.157,1518,2.787,1519,2.346,1520,2.787,1521,2.787,1522,2.787,1523,2.787,1524,4.972,1525,2.787,1526,1.869,1527,4.157,1528,2.787,1529,2.787,1530,2.787,1531,2.787,1532,2.787,1533,2.787,1534,2.787,1535,5.897,1536,2.787,1537,2.787,1538,5.513,1539,2.787,1540,2.787,1541,2.787,1542,2.787,1543,2.787,1544,2.787,1545,4.157,1546,4.157,1547,4.157,1548,4.157,1549,4.157,1550,4.157,1551,4.157,1552,4.157,1553,4.157,1554,4.157,1555,2.787,1556,2.787,1557,4.157,1558,4.157,1559,4.157,1560,4.157,1561,2.787,1562,2.787,1563,2.787,1564,2.787]],["title/classes/Int64Wrapper.html",[0,0.194,1565,2.878]],["body/classes/Int64Wrapper.html",[0,0.354,2,1.515,3,0.251,4,0.251,5,0.205,6,0.258,8,0.19,16,0.011,18,0.89,23,1.687,24,0.267,25,1.096,26,1.682,29,1.107,35,1.48,54,5.25,56,0.445,57,1.039,59,1.243,60,1.044,61,1.28,63,0.98,73,1.208,79,0.763,87,1.829,88,1.404,90,0.633,137,0.292,138,0.707,141,0.652,148,0.908,169,4.172,172,0.634,173,0.41,203,0.007,204,0.008,205,0.007,247,1.26,278,1.259,297,4.562,420,1.646,971,3.398,1255,5.236,1306,5.656,1360,3.986,1565,5.718,1566,4.223,1567,8.037,1568,7.688,1569,5.236,1570,8.037,1571,7.073,1572,7.073,1573,7.073,1574,5.705,1575,5.705,1576,7.066,1577,6.219,1578,7.073,1579,7.073,1580,7.066,1581,5.705,1582,6.219,1583,3.952,1584,5.016,1585,5.016,1586,5.705,1587,7.073,1588,5.705,1589,5.705,1590,5.705,1591,5.705]],["title/interfaces/InterprocessMessage.html",[170,0.242,1374,2.598]],["body/interfaces/InterprocessMessage.html",[3,0.249,4,0.31,5,0.203,6,0.173,8,0.188,11,0.452,16,0.011,19,1.82,22,1.818,24,0.265,25,1.091,56,0.495,69,2.433,70,2.722,71,1.923,73,1.259,78,0.203,94,2.098,126,0.231,127,0.508,136,0.627,137,0.331,139,0.877,170,0.468,171,0.981,173,0.417,203,0.008,204,0.008,205,0.008,207,0.669,210,1.869,302,1.596,306,5.934,316,1.63,320,2.756,321,2.098,327,1.364,366,2.299,367,1.768,374,2.573,387,1.982,398,2.299,401,2.166,526,3.153,539,3.65,540,3.06,541,2.26,601,4.853,661,2.771,672,4.153,673,3.968,674,4.361,675,4.361,676,4.361,677,4.153,679,4.517,1219,2.299,1227,3.511,1335,3.191,1372,4.192,1374,4.728,1378,4.153,1592,4.528,1593,4.528,1594,4.6,1595,4.192,1596,4.979]],["title/interfaces/InterprocessReportMessage.html",[170,0.242,601,2.482]],["body/interfaces/InterprocessReportMessage.html",[3,0.245,4,0.306,5,0.199,6,0.17,8,0.184,11,0.555,16,0.011,19,1.935,22,1.783,24,0.26,25,1.077,56,0.493,69,2.425,70,2.913,71,2.362,73,1.164,78,0.199,94,2.057,126,0.229,127,0.498,136,0.615,137,0.329,139,1.077,170,0.466,171,1.205,173,0.415,203,0.008,204,0.008,205,0.009,207,0.656,210,2.296,302,1.721,306,5.149,316,2.002,320,2.948,321,2.057,327,1.46,366,2.824,367,1.734,374,2.798,387,2.12,398,3.232,401,2.161,526,2.487,539,2.879,540,2.655,541,1.783,601,4.878,661,2.186,672,4.103,673,3.92,674,4.309,675,4.309,676,4.309,677,4.103,679,3.13,1039,6.116,1219,2.255,1227,2.77,1335,3.13,1372,4.111,1374,4.696,1378,4.48,1592,4.441,1593,4.441,1594,3.628,1595,5.149,1596,6.116]],["title/interfaces/InterprocessReportRequest.html",[170,0.242,1597,3.052]],["body/interfaces/InterprocessReportRequest.html",[3,0.283,4,0.335,5,0.231,6,0.197,8,0.214,16,0.01,24,0.301,25,1.178,30,1.177,31,3.75,56,0.421,65,4.969,69,2.131,70,2.842,71,2.842,73,1.266,78,0.231,126,0.213,137,0.314,170,0.418,171,1.403,173,0.319,203,0.007,204,0.009,205,0.007,207,0.76,229,1.592,326,1.537,327,1.442,538,3.1,540,2.903,541,2.687,549,2.184,1111,4.486,1374,4.937,1510,5.269,1597,5.799,1598,5.655,1599,6.082,1600,6.082,1601,6.082]],["title/interfaces/InterprocessReportResponse.html",[170,0.242,1602,3.052]],["body/interfaces/InterprocessReportResponse.html",[3,0.28,4,0.332,5,0.228,6,0.194,8,0.211,11,0.602,16,0.011,24,0.297,25,1.169,30,1.381,31,3.739,56,0.461,69,2.114,70,2.563,71,2.563,73,1.3,78,0.228,126,0.211,137,0.312,170,0.415,171,1.396,173,0.375,203,0.007,204,0.009,205,0.007,207,0.75,326,1.517,327,1.434,538,2.796,540,2.881,541,2.772,549,2.156,1111,4.452,1374,4.916,1602,5.897,1603,5.582,1604,5.163,1605,6.665,1606,6.036,1607,7.548]],["title/interfaces/LengthAttributeInterface.html",[170,0.242,1608,2.878]],["body/interfaces/LengthAttributeInterface.html",[0,0.276,1,2.948,3,0.208,4,0.276,5,0.17,6,0.145,8,0.249,11,0.561,12,1.384,16,0.011,17,1.159,18,0.885,24,0.221,25,0.971,26,1.312,27,2.591,29,0.885,30,0.865,32,2.74,53,2.45,56,0.389,57,1.01,59,0.89,63,0.576,73,1.095,78,0.225,90,0.626,126,0.197,127,0.424,135,1.605,136,0.863,137,0.35,138,0.817,139,0.971,141,0.541,144,3.139,148,0.946,152,2.012,170,0.476,171,1.086,172,0.562,173,0.412,203,0.005,204,0.007,205,0.005,207,0.558,210,2.975,214,2.258,226,2.19,228,1.397,247,0.842,278,1.384,288,1.421,313,2.243,360,1.605,366,1.919,401,1.538,420,1.743,584,2.117,961,3.847,1217,2.357,1219,1.919,1224,2.552,1225,2.928,1226,2.788,1227,2.357,1228,3.883,1229,2.928,1230,3.088,1407,4.418,1608,5.34,1609,2.928,1610,2.928,1611,5.77,1612,5.4,1613,5.044,1614,5.207,1615,5.234,1616,5.234,1617,5.234,1618,4.873,1619,5.924,1620,3.499,1621,5.545,1622,3.499,1623,3.499,1624,5.545,1625,3.499,1626,3.499,1627,3.499,1628,3.499,1629,3.499,1630,6.05,1631,3.499,1632,3.499,1633,3.499]],["title/interfaces/LengthMethodInterface.html",[170,0.242,1615,2.878]],["body/interfaces/LengthMethodInterface.html",[0,0.276,1,2.947,3,0.208,4,0.276,5,0.169,6,0.192,8,0.249,11,0.561,12,1.383,16,0.011,17,1.159,18,0.885,24,0.221,26,1.311,27,2.591,29,0.885,30,0.864,32,2.739,35,1.311,53,2.448,56,0.347,57,1.002,59,0.89,61,0.732,63,0.576,73,1.095,78,0.225,90,0.636,126,0.197,127,0.423,135,1.604,136,0.862,137,0.35,138,0.817,139,0.97,141,0.54,144,3.139,148,0.946,152,2.257,170,0.476,171,1.086,172,0.562,173,0.412,203,0.005,204,0.007,205,0.005,207,0.558,210,2.975,214,2.011,226,2.189,228,1.396,247,0.841,278,1.383,288,1.42,313,2.242,360,1.604,366,1.918,401,1.159,420,1.742,584,2.115,961,3.847,1217,2.355,1219,1.918,1224,2.55,1225,2.926,1226,2.786,1227,2.355,1228,3.881,1229,2.926,1230,3.086,1407,4.417,1608,5.233,1609,3.881,1610,2.926,1611,5.768,1612,5.399,1613,5.044,1614,4.638,1615,5.339,1616,5.233,1617,5.233,1618,4.871,1619,5.924,1620,3.496,1621,5.543,1622,3.496,1623,3.496,1624,5.543,1625,3.496,1626,3.496,1627,3.496,1628,3.496,1629,3.496,1630,6.049,1631,3.496,1632,3.496,1633,3.496,1634,4.723]],["title/interfaces/LogLine.html",[170,0.242,1635,3.052]],["body/interfaces/LogLine.html",[0,0.247,3,0.247,4,0.206,5,0.112,6,0.095,8,0.104,9,2.328,11,0.65,12,0.688,16,0.011,17,0.764,18,1.065,19,1.645,20,2.546,21,2.198,24,0.146,25,0.723,26,0.977,28,2.024,29,0.782,30,0.57,32,2.69,56,0.451,57,0.787,59,1.22,63,0.961,73,1.06,78,0.168,79,0.832,90,0.584,126,0.233,127,0.279,135,2.261,136,0.927,137,0.257,138,0.849,141,0.901,148,0.963,170,0.41,171,1.154,172,0.279,173,0.411,174,0.973,175,2.621,203,0.006,204,0.005,205,0.007,207,0.368,212,2.237,218,1.789,221,0.652,228,0.921,229,0.652,233,3.575,238,1.941,239,2.145,247,0.832,250,1.086,259,1.848,278,0.688,288,1.269,290,1.837,302,1.269,303,1.838,311,1.896,312,2.079,313,2.194,314,4.048,315,2.393,316,1.916,317,2.203,318,2.621,319,1.679,320,2.395,321,1.154,322,2.164,323,2.507,324,1.679,325,2.328,327,0.832,333,2.243,340,1.554,341,1.848,343,3.615,347,1.273,349,3.668,350,1.957,352,1.554,353,2.596,354,1.445,355,1.748,356,2.022,357,1.396,358,1.73,359,1.418,360,1.058,361,2.754,362,1.838,363,2.631,367,1.748,368,2.036,369,2.424,370,1.458,371,1.458,372,1.35,373,1.497,374,2.638,375,1.497,376,2.424,377,2.204,378,2.124,384,1.121,387,1.208,397,2.327,398,3.308,399,1.554,400,1.35,401,1.145,419,2.884,420,1.303,421,1.35,422,1.396,424,3.928,426,2.159,428,2.159,433,1.396,434,2.159,435,2.159,439,1.554,440,1.344,441,1.616,442,2.159,443,2.159,446,2.42,448,2.42,450,2.42,452,2.42,454,2.42,456,2.42,458,2.42,460,2.42,462,2.42,464,2.42,466,1.554,468,2.159,469,2.159,472,1.616,474,1.616,476,1.616,478,1.616,480,1.396,481,1.616,482,2.159,483,2.159,485,1.616,486,1.616,487,1.616,488,1.616,502,2.754,507,2.164,526,1.396,541,2.657,555,2.022,563,3.596,567,1.058,661,2.621,715,3.101,716,2.784,717,4.809,718,3.05,719,3.05,720,3.05,721,3.05,722,3.05,723,3.05,724,3.05,728,3.05,729,3.05,730,3.05,731,3.05,759,1.957,1128,4.351,1133,2.036,1144,2.631,1169,2.631,1181,3.774,1275,2.892,1335,1.756,1340,1.756,1362,2.159,1373,1.931,1378,3.303,1386,2.754,1474,3.235,1476,1.756,1490,2.159,1491,2.159,1492,2.159,1493,2.159,1635,5.836,1636,2.159,1637,2.307,1638,5.772,1639,2.492,1640,5.734,1641,4.308,1642,2.492,1643,2.307,1644,2.492,1645,2.492,1646,5.59,1647,2.492,1648,2.307,1649,2.492,1650,2.492,1651,2.492,1652,2.492,1653,4.125,1654,2.492,1655,5.326,1656,5.326,1657,5.326,1658,5.326,1659,2.492,1660,2.492,1661,2.492,1662,2.631,1663,2.754,1664,2.892,1665,2.892,1666,2.892,1667,3.05,1668,2.159,1669,4.477,1670,3.734,1671,3.734,1672,3.734,1673,3.734,1674,3.734,1675,3.734,1676,3.734,1677,3.734,1678,3.734,1679,3.734,1680,2.492,1681,2.159,1682,3.734,1683,3.734,1684,3.734,1685,3.734,1686,2.492,1687,2.159]],["title/interfaces/Logger.html",[170,0.242,314,2.116]],["body/interfaces/Logger.html",[3,0.375,4,0.31,5,0.203,6,0.173,8,0.188,16,0.011,24,0.265,25,1.091,56,0.456,78,0.203,126,0.159,127,0.508,135,2.968,137,0.291,139,1.354,170,0.387,203,0.007,204,0.008,205,0.007,207,0.669,229,1.474,314,3.961,343,3.915,492,4.6,505,4.359,541,2.806,869,3.801,1309,5.822,1386,5.157,1648,6.673,1688,4.979,1689,3.968,1690,8.404,1691,8.404,1692,8.404,1693,6.991,1694,7.926,1695,8.612,1696,8.742,1697,5.63,1698,4.361,1699,7.041,1700,8.244]],["title/interfaces/LoggerReporterOptions.html",[170,0.242,1641,3.052]],["body/interfaces/LoggerReporterOptions.html",[0,0.247,3,0.247,4,0.206,5,0.112,6,0.096,8,0.104,9,1.561,11,0.651,12,0.691,16,0.011,17,0.768,18,1.066,19,1.647,20,2.478,21,2.203,24,0.147,25,0.726,26,0.981,28,2.027,29,0.784,30,0.573,32,2.692,56,0.447,57,0.788,59,1.221,63,0.948,73,0.911,78,0.168,79,0.834,88,0.93,90,0.585,126,0.233,127,0.281,135,1.906,136,0.928,137,0.257,138,0.85,141,0.902,148,0.963,170,0.399,171,1.213,172,0.281,173,0.411,174,0.978,175,2.626,203,0.006,204,0.005,205,0.007,207,0.37,212,2.242,218,1.793,221,0.655,228,0.926,229,0.981,233,3.578,238,1.946,239,2.148,247,0.834,250,1.09,259,1.546,278,0.691,288,1.272,290,1.844,302,1.412,303,1.847,311,1.902,312,2.083,313,2.196,314,4.069,315,2.396,316,1.92,317,2.209,318,2.626,319,1.685,320,2.4,321,1.16,322,2.172,323,2.791,324,1.685,325,2.331,327,1,333,1.504,340,1.561,341,2.057,343,3.682,347,1.278,349,3.676,350,1.964,352,1.561,353,2.603,354,1.451,355,1.753,356,2.029,357,1.402,358,1.735,359,1.423,360,1.063,361,2.763,362,1.847,363,2.64,367,1.753,368,2.045,369,2.431,370,1.463,371,1.463,372,1.356,373,1.504,374,2.64,375,1.504,376,2.431,377,2.207,378,2.127,384,1.126,387,1.212,397,2.331,398,3.311,399,1.561,400,1.356,401,1.149,419,2.889,420,1.306,421,1.356,422,1.402,424,3.936,426,2.169,428,2.169,433,1.402,434,2.169,435,2.169,439,1.561,440,1.348,441,1.623,442,2.169,443,2.169,446,2.429,448,2.429,450,2.429,452,2.429,454,2.429,456,2.429,458,2.429,460,2.429,462,2.429,464,2.429,466,1.561,468,2.169,469,2.169,472,1.623,474,1.623,476,1.623,478,1.623,480,1.402,481,1.623,482,2.169,483,2.169,485,1.623,486,1.623,487,1.623,488,1.623,502,1.847,507,1.451,526,1.402,541,2.565,555,2.029,563,3.603,567,1.063,661,2.626,715,3.108,716,2.791,717,4.814,718,3.061,719,3.061,720,3.061,721,3.061,722,3.061,723,3.061,724,3.061,728,3.061,729,3.061,730,3.061,731,3.061,759,1.964,1128,4.359,1133,2.045,1144,2.64,1169,2.64,1181,3.781,1275,2.902,1335,1.764,1340,1.764,1362,2.169,1373,1.939,1378,3.311,1386,2.763,1474,3.246,1476,1.764,1490,2.169,1491,2.169,1492,2.169,1493,2.169,1635,5.809,1636,2.169,1637,2.317,1638,5.776,1639,2.503,1640,5.776,1641,4.623,1642,2.503,1643,2.317,1644,2.503,1645,2.503,1646,5.6,1647,2.503,1648,2.317,1649,2.503,1650,2.503,1651,2.503,1652,2.503,1653,4.133,1654,2.503,1655,5.336,1656,5.336,1657,5.336,1658,5.336,1659,2.503,1660,2.503,1661,2.503,1662,2.64,1663,2.763,1664,2.902,1665,2.902,1666,2.902,1667,3.061,1668,2.169,1669,4.489,1670,3.746,1671,3.746,1672,3.746,1673,3.746,1674,3.746,1675,3.746,1676,3.746,1677,3.746,1678,3.746,1679,3.746,1680,2.503,1681,2.169,1682,3.746,1683,3.746,1684,3.746,1685,3.746,1686,2.503,1687,2.169]],["title/interfaces/LoggerReportingContext.html",[170,0.242,1638,3.052]],["body/interfaces/LoggerReportingContext.html",[0,0.247,3,0.247,4,0.206,5,0.112,6,0.096,8,0.104,9,1.563,11,0.651,12,0.692,16,0.011,17,0.769,18,1.066,19,1.648,20,2.499,21,2.204,24,0.147,25,0.726,26,0.982,28,2.028,29,0.785,30,0.574,32,2.693,56,0.447,57,0.789,59,1.221,63,0.931,73,0.912,78,0.168,79,0.834,90,0.585,126,0.233,127,0.281,135,1.908,136,0.928,137,0.257,138,0.85,141,0.903,148,0.964,170,0.41,171,1.214,172,0.281,173,0.411,174,0.979,175,2.627,203,0.006,204,0.005,205,0.007,207,0.37,212,2.243,218,1.795,221,0.656,228,0.927,229,0.656,233,3.58,238,1.947,239,2.149,247,0.835,250,1.091,259,1.855,278,0.692,288,1.273,290,1.846,302,1.273,303,1.849,311,1.904,312,2.085,313,2.197,314,4.007,315,2.397,316,1.921,317,2.454,318,2.627,319,1.687,320,2.401,321,1.161,322,2.174,323,2.516,324,1.687,325,2.332,327,0.835,333,1.506,340,1.563,341,1.855,343,3.619,347,1.279,349,4.284,350,1.966,352,1.563,353,2.605,354,1.453,355,1.754,356,2.031,357,1.404,358,1.737,359,1.425,360,1.064,361,2.766,362,1.849,363,2.643,367,1.754,368,2.048,369,2.433,370,1.464,371,1.464,372,1.357,373,1.506,374,2.64,375,1.506,376,2.433,377,2.208,378,2.128,384,1.128,387,1.453,397,2.333,398,3.312,399,1.563,400,1.357,401,1.15,419,2.891,420,1.307,421,1.357,422,1.404,424,3.938,426,2.172,428,2.172,433,1.404,434,2.172,435,2.172,439,1.563,440,1.35,441,1.625,442,2.172,443,2.172,446,2.431,448,2.431,450,2.431,452,2.431,454,2.431,456,2.431,458,2.431,460,2.431,462,2.431,464,2.431,466,1.563,468,2.172,469,2.172,472,1.625,474,1.625,476,1.625,478,1.625,480,1.404,481,1.625,482,2.172,483,2.172,485,1.625,486,1.625,487,1.625,488,1.625,502,1.849,507,1.453,526,2.1,541,2.566,555,2.031,563,3.605,567,1.064,661,2.627,715,3.11,716,2.793,717,4.816,718,3.064,719,3.064,720,3.064,721,3.064,722,3.064,723,3.064,724,3.064,728,3.064,729,3.064,730,3.064,731,3.064,759,1.966,1128,4.362,1133,2.048,1144,2.643,1169,2.643,1181,3.783,1275,2.905,1335,1.767,1340,1.767,1362,2.172,1373,1.942,1378,3.678,1386,2.766,1474,3.249,1476,1.767,1490,2.172,1491,2.172,1492,2.172,1493,2.172,1635,5.811,1636,2.172,1637,2.321,1638,5.811,1639,3.75,1640,5.74,1641,4.32,1642,2.507,1643,2.321,1644,2.507,1645,2.507,1646,5.603,1647,2.507,1648,2.321,1649,2.507,1650,2.507,1651,2.507,1652,2.507,1653,4.136,1654,2.507,1655,5.339,1656,5.339,1657,5.339,1658,5.339,1659,2.507,1660,2.507,1661,2.507,1662,2.643,1663,2.766,1664,2.905,1665,2.905,1666,2.905,1667,3.064,1668,2.172,1669,4.493,1670,3.75,1671,3.75,1672,3.75,1673,3.75,1674,3.75,1675,3.75,1676,3.75,1677,3.75,1678,3.75,1679,3.75,1680,2.507,1681,2.172,1682,3.75,1683,3.75,1684,3.75,1685,3.75,1686,2.507,1687,2.172]],["title/interfaces/Metadata.html",[20,1.338,170,0.242]],["body/interfaces/Metadata.html",[2,1.497,3,0.248,4,0.309,5,0.202,6,0.215,8,0.187,16,0.011,18,1.071,20,2.752,33,4.72,40,3.491,59,1.136,61,0.873,63,0.856,73,1.258,78,0.317,79,0.754,81,4.51,90,0.652,92,3.491,94,3.214,100,3.491,111,3.491,126,0.158,127,0.505,130,5.199,136,0.886,137,0.351,138,0.839,139,1.087,141,0.803,148,0.829,170,0.461,172,0.629,173,0.397,174,1.76,192,3.565,203,0.006,204,0.008,205,0.006,207,0.666,228,2.434,259,2.317,275,3.491,367,2.387,393,3.904,420,1.633,1123,2.81,1351,3.042,1439,3.904,1701,4.863,1702,3.904,1703,5.196,1704,5.635,1705,4.955,1706,4.955,1707,4.955,1708,4.955,1709,4.955,1710,4.863,1711,4.506,1712,4.955,1713,4.955,1714,4.955,1715,4.506,1716,4.955,1717,4.955]],["title/interfaces/MetadataContainer.html",[130,2.728,170,0.242]],["body/interfaces/MetadataContainer.html",[2,1.764,3,0.227,4,0.292,5,0.185,6,0.245,8,0.257,16,0.011,18,1.115,20,2.755,24,0.242,33,4.572,35,1.39,39,4.917,40,4.801,44,4.917,49,4.917,56,0.454,59,1.185,61,1.2,63,0.945,73,1.281,78,0.316,79,0.691,81,4.841,87,2.123,88,1.457,90,0.664,92,4.114,94,3.282,100,4.114,111,4.114,126,0.145,127,0.463,130,5.171,136,0.858,137,0.345,138,0.82,139,1.029,141,0.76,148,0.785,170,0.451,172,0.695,173,0.385,174,2.074,192,3.615,203,0.006,204,0.008,205,0.006,207,0.61,228,2.427,259,1.705,367,2.293,393,4.601,420,1.803,1123,3.312,1351,3.586,1439,4.601,1701,5.555,1702,3.578,1703,3.823,1705,5.84,1706,5.84,1707,5.84,1708,5.84,1709,5.84,1710,4.601,1711,4.13,1712,4.54,1713,4.54,1714,4.54,1715,4.13,1716,4.54,1717,4.54,1718,5.164,1719,5.164,1720,5.164,1721,5.164]],["title/interfaces/Metered.html",[170,0.242,1722,2.878]],["body/interfaces/Metered.html",[3,0.233,4,0.297,5,0.19,6,0.253,8,0.176,11,0.67,16,0.011,22,2.386,24,0.248,35,1.413,56,0.411,57,1.064,61,1.252,78,0.19,90,0.663,121,2.022,122,1.701,126,0.189,127,0.475,136,0.822,137,0.341,139,1.046,170,0.461,171,1.4,172,0.775,173,0.422,203,0.006,204,0.008,205,0.006,207,0.626,212,2.429,213,3.5,214,2.167,217,2.229,218,1.525,219,4.616,221,1.638,232,2.546,235,2.837,241,4.225,250,1.233,259,1.749,290,2.657,315,2.386,327,0.944,440,1.525,561,4.41,584,3.504,658,3.367,661,2.085,716,3.7,1169,3.805,1181,4.84,1190,4.284,1201,4.855,1203,3.367,1604,4.183,1722,5.554,1723,3.922,1724,4.411,1725,5.793,1726,5.793,1727,5.793,1728,5.793,1729,5.299,1730,5.299,1731,5.299,1732,5.299,1733,5.149,1734,5.299,1735,4.998,1736,5.112,1737,4.237,1738,5.28,1739,3.922,1740,4.237,1741,4.237]],["title/interfaces/MeteredRates.html",[170,0.242,1736,2.878]],["body/interfaces/MeteredRates.html",[3,0.247,4,0.308,5,0.201,6,0.214,8,0.186,11,0.656,16,0.011,22,2.449,56,0.422,57,1.062,61,0.869,78,0.201,90,0.63,121,2.671,122,1.8,126,0.196,127,0.503,136,0.844,137,0.346,139,0.869,170,0.472,171,1.384,172,0.737,173,0.427,203,0.006,204,0.008,205,0.006,207,0.662,212,2.517,213,3.303,214,1.8,217,2.31,218,1.614,219,4.5,221,1.597,232,2.694,235,2.912,241,3.028,250,1.305,259,2.31,275,3.474,290,2.207,315,2.639,327,1.246,440,2.014,561,3.944,584,3.416,658,2.796,661,2.207,716,3.577,1169,3.16,1181,4.781,1190,3.954,1201,4.572,1203,2.796,1604,3.474,1722,5.555,1723,4.151,1724,3.664,1725,4.151,1726,4.151,1727,4.151,1728,4.151,1733,4.848,1735,5.647,1736,5.37,1737,4.484,1738,5.37,1739,4.151,1740,4.484,1741,4.484,1742,5.608]],["title/interfaces/Metric.html",[11,0.351,170,0.242]],["body/interfaces/Metric.html",[0,0.291,1,3.353,3,0.156,4,0.226,5,0.127,6,0.215,7,2.311,8,0.279,9,3.006,10,2.087,11,0.721,12,1.459,13,2.829,14,2.451,15,2.311,16,0.011,17,1.795,18,1.062,19,1.852,20,2.532,21,2.551,22,2.828,24,0.166,26,1.073,27,1.882,28,1.361,29,1.102,30,0.647,31,2.61,32,2.491,33,2.087,34,2.087,35,1.073,37,4.861,38,2.311,40,2.191,41,4.861,43,1.993,47,3.794,50,3.794,53,1.834,54,2.311,56,0.458,57,0.712,59,1.072,60,0.938,61,1.024,63,0.806,64,2.451,65,3.938,66,1.7,67,1.64,68,1.64,69,0.991,70,1.201,71,1.201,72,1.046,73,1.317,76,2.451,78,0.294,79,0.686,81,2.087,84,2.451,85,2.191,87,1.326,88,1.017,90,0.633,92,2.191,94,2.599,97,2.191,100,2.191,102,2.191,104,2.191,107,4.176,109,2.311,111,2.191,113,4.176,115,2.191,117,1.993,120,2.191,121,1.35,122,1.135,126,0.185,127,0.317,128,5.146,129,2.451,130,4.675,131,2.829,132,2.191,133,4.007,134,1.436,135,1.201,136,0.907,137,0.352,138,0.772,139,1.239,140,2.451,141,0.586,142,1.91,143,4.099,144,2.941,145,4.099,146,4.099,147,4.099,148,1.049,149,1.201,150,2.829,151,3.499,152,2.252,153,2.311,154,5.194,155,2.451,156,1.993,157,2.311,158,2.829,159,2.829,160,2.311,161,2.829,162,1.834,163,2.618,164,2.829,165,2.829,166,1.993,167,2.829,168,2.829,169,3.024,170,0.363,171,1.308,172,0.593,173,0.421,174,2.064,175,1.392,176,2.829,177,1.272,178,2.451,179,2.829,180,2.829,181,2.829,182,4.099,183,2.829,184,2.829,185,3.125,186,3.175,187,4.462,188,4.099,189,2.829,190,2.618,191,2.829,192,1.532,193,2.829,194,2.618,195,2.829,196,2.829,197,2.829,198,2.829,199,2.829,200,2.829,201,2.829,202,2.451,203,0.004,204,0.006,205,0.004,207,0.418,1743,3.537,1744,3.537,1745,3.537,1746,3.537]],["title/interfaces/MetricEntry.html",[170,0.242,1376,3.052]],["body/interfaces/MetricEntry.html",[3,0.26,4,0.318,5,0.211,6,0.18,8,0.196,11,0.576,16,0.011,23,2.134,24,0.276,25,1.118,56,0.45,57,1.025,59,1.232,60,1.321,67,3.346,78,0.211,126,0.165,127,0.528,136,0.652,137,0.243,170,0.447,172,0.647,173,0.358,203,0.007,204,0.008,205,0.007,207,0.696,214,2.317,217,2.382,250,1.891,288,1.636,302,1.966,313,2.077,387,2.102,399,3.599,524,3.056,558,4.067,559,3.896,563,3.896,564,4.471,565,4.715,566,4.389,591,3.468,661,3.199,998,6.345,1045,6.5,1123,3.599,1203,4.054,1224,3.896,1376,5.778,1394,5.342,1475,5.771,1494,6.5,1496,6.5,1516,5.342,1747,5.183,1748,7.217,1749,6.345,1750,7.217,1751,7.217,1752,7.217,1753,7.217,1754,7.217,1755,7.217,1756,7.217,1757,7.217,1758,8.129,1759,7.217,1760,7.217,1761,7.217,1762,7.217,1763,7.217,1764,8.129]],["title/classes/MetricRegistration.html",[0,0.194,1765,3.26]],["body/classes/MetricRegistration.html",[0,0.247,1,1.678,2,0.497,3,0.082,4,0.137,5,0.067,6,0.143,8,0.264,11,0.71,12,0.688,16,0.011,17,1.145,18,1.119,21,2.49,23,0.553,24,0.278,25,0.483,26,1.65,27,2.38,28,2.173,29,1.102,30,0.855,56,0.395,57,0.826,58,1.24,60,0.855,61,0.62,63,1.048,73,1.306,78,0.297,79,1.08,87,0.484,88,0.371,90,0.652,94,2.794,106,2.243,122,2.447,126,0.2,127,0.168,134,2.524,136,0.902,137,0.245,138,0.877,139,0.723,141,0.895,148,1.032,155,1.297,162,0.97,171,0.54,172,0.676,173,0.429,174,0.973,177,2.742,185,0.97,203,0.002,204,0.004,205,0.002,210,1.029,214,1,227,3.304,228,2.021,229,0.392,232,0.899,234,1.011,235,0.714,238,2.424,239,2.334,244,2.392,247,0.713,278,0.884,288,1.409,290,0.737,313,1.916,315,2.547,316,2.484,324,1.121,325,2.477,327,0.832,330,1.297,331,1.055,332,1.159,333,0.899,334,0.899,335,1.386,340,0.933,355,2.38,365,1.265,367,1.458,377,2.275,378,2.165,397,2.074,401,1.373,410,4.162,419,2.571,420,1.502,505,0.933,534,3.346,546,0.76,605,1.104,626,4.115,635,0.933,715,1.554,759,0.784,956,4.204,957,1.011,971,2.852,1021,1.497,1043,0.868,1056,3.734,1074,2.774,1123,3.801,1216,2.964,1219,0.76,1239,2.774,1282,2.492,1284,1.297,1289,2.159,1307,1.297,1311,1.497,1312,2.492,1313,1.497,1314,1.497,1315,3.202,1316,1.497,1317,1.497,1318,1.497,1320,1.223,1321,1.055,1351,2.162,1353,1.223,1360,1.055,1476,1.756,1481,1.386,1487,1.386,1526,3.059,1765,4.603,1766,2.892,1767,1.297,1768,2.74,1769,2.307,1770,2.307,1771,2.492,1772,5.22,1773,1.872,1774,3.117,1775,1.872,1776,4.351,1777,5.061,1778,3.658,1779,1.297,1780,1.497,1781,5.163,1782,3.839,1783,2.492,1784,1.646,1785,2.74,1786,1.646,1787,4.113,1788,6.632,1789,1.646,1790,1.646,1791,1.646,1792,1.646,1793,5.467,1794,1.646,1795,5.22,1796,1.646,1797,1.646,1798,1.646,1799,1.646,1800,1.646,1801,1.646,1802,1.646,1803,2.74,1804,2.74,1805,2.74,1806,2.74,1807,1.646,1808,2.74,1809,1.497,1810,1.646,1811,4.105,1812,2.74,1813,1.646,1814,4.105,1815,1.646,1816,1.646,1817,1.646,1818,1.497,1819,1.646,1820,1.646,1821,1.646,1822,2.74,1823,1.646,1824,1.646,1825,1.646,1826,1.646,1827,4.105,1828,1.646,1829,6.096,1830,6.031,1831,2.74,1832,1.646,1833,5.883,1834,2.74,1835,4.923,1836,4.923,1837,6.147,1838,2.74,1839,1.646,1840,2.74,1841,2.74,1842,1.646,1843,2.74,1844,2.74,1845,1.646,1846,2.74,1847,2.74,1848,1.646,1849,2.74,1850,4.923,1851,1.646,1852,1.646,1853,1.386,1854,1.386,1855,1.646,1856,2.74,1857,2.74,1858,1.646,1859,4.559,1860,2.74,1861,1.646,1862,2.74,1863,1.646,1864,1.646,1865,2.74,1866,1.646,1867,2.74,1868,1.646,1869,2.74,1870,1.646,1871,5.676,1872,1.646,1873,1.646,1874,5.22,1875,1.646,1876,1.646,1877,2.74,1878,2.74,1879,1.646,1880,2.74,1881,2.74,1882,1.646,1883,1.646,1884,1.646,1885,1.646,1886,4.559,1887,1.646,1888,1.646,1889,1.646,1890,1.646,1891,5.467,1892,4.923,1893,1.646,1894,1.646,1895,2.74,1896,1.646,1897,1.646,1898,2.74,1899,1.646,1900,1.646,1901,2.492,1902,1.497,1903,1.646,1904,3.521,1905,1.646,1906,1.646,1907,2.74,1908,1.646,1909,2.74,1910,1.497,1911,1.646,1912,1.646,1913,1.646,1914,2.74,1915,1.646,1916,1.646,1917,2.74,1918,2.74,1919,2.74,1920,2.74,1921,2.74,1922,2.74,1923,1.646,1924,2.74,1925,1.646,1926,1.646,1927,1.646,1928,1.646,1929,1.386,1930,1.646,1931,1.646,1932,1.646,1933,1.646,1934,1.646,1935,1.646,1936,1.646,1937,1.646,1938,1.646,1939,1.646,1940,1.646,1941,1.646,1942,1.646,1943,2.74,1944,1.646,1945,2.74,1946,1.646,1947,1.497,1948,1.646,1949,1.646]],["title/interfaces/MetricRegistryListener.html",[170,0.242,1776,2.878]],["body/interfaces/MetricRegistryListener.html",[3,0.268,4,0.324,5,0.218,6,0.242,8,0.244,11,0.728,16,0.011,18,1.098,24,0.285,35,1.54,56,0.407,61,1.139,73,1.276,78,0.218,87,1.902,88,1.46,90,0.563,126,0.206,127,0.545,136,0.814,137,0.304,138,0.821,170,0.451,173,0.365,203,0.007,204,0.008,205,0.007,207,0.718,228,2.174,316,2.364,365,3.335,378,2.402,590,4.259,867,5.445,1219,2.469,1353,4.805,1394,5.445,1766,4.898,1776,5.496,1777,5.445,1947,5.882,1950,5.347,1951,6.467,1952,7.355,1953,7.355,1954,7.355,1955,6.467,1956,6.081,1957,6.467,1958,6.081]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.194,1787,3.052]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.247,1,1.681,2,0.498,3,0.083,4,0.138,5,0.067,6,0.123,8,0.264,11,0.709,12,0.689,16,0.011,17,1.147,18,1.118,21,2.491,23,0.555,24,0.278,26,1.651,27,2.382,28,2.174,29,1.1,30,0.856,35,0.654,56,0.379,57,0.826,58,1.242,60,0.856,61,0.484,63,1.048,73,1.306,78,0.297,79,1.08,87,0.485,88,0.372,90,0.653,94,2.687,106,1.928,122,2.448,126,0.2,127,0.168,134,2.527,136,0.902,137,0.245,138,0.877,139,0.724,141,0.895,148,1.032,155,1.3,162,0.973,171,0.541,172,0.677,173,0.429,174,0.975,177,2.743,185,0.973,203,0.002,204,0.004,205,0.002,210,1.031,214,0.602,227,3.307,228,1.971,229,0.654,232,0.902,234,1.013,235,1.192,238,2.425,239,2.335,244,2.306,247,0.714,278,0.885,288,1.411,290,0.739,313,1.918,315,2.548,316,2.491,324,1.124,325,2.479,327,0.833,330,1.3,331,1.058,332,1.163,333,0.902,334,0.902,335,1.389,340,0.936,355,2.382,365,1.268,367,1.46,377,2.277,378,2.293,397,2.077,401,1.375,410,4.164,419,2.574,420,1.504,505,0.936,534,3.35,546,0.762,605,1.107,626,4.118,635,0.936,715,1.558,759,0.787,956,4.207,957,1.013,971,2.856,1021,1.501,1043,0.87,1056,3.74,1074,2.779,1123,3.804,1216,2.97,1219,0.762,1239,2.779,1282,2.498,1284,1.3,1289,2.164,1307,1.3,1311,1.501,1312,2.498,1313,1.501,1314,1.501,1315,3.208,1316,1.501,1317,1.501,1318,1.501,1320,1.226,1321,1.058,1351,2.525,1353,1.226,1360,1.058,1476,1.76,1481,1.389,1487,1.389,1526,2.366,1765,4.15,1766,2.485,1767,1.3,1768,1.65,1769,1.389,1770,1.389,1771,1.501,1772,4.112,1776,4.66,1777,5.37,1778,3.663,1779,1.3,1780,1.501,1781,5.168,1782,3.845,1783,3.208,1784,2.746,1785,4.929,1786,2.746,1787,4.477,1788,6.706,1789,1.65,1790,1.65,1791,1.65,1792,1.65,1793,5.473,1794,1.65,1795,5.226,1796,1.65,1797,1.65,1798,1.65,1799,1.65,1800,1.65,1801,1.65,1802,1.65,1803,2.746,1804,2.746,1805,2.746,1806,2.746,1807,1.65,1808,2.746,1809,1.501,1810,1.65,1811,4.112,1812,2.746,1813,1.65,1814,4.112,1815,1.65,1816,1.65,1817,1.65,1818,1.501,1819,1.65,1820,1.65,1821,1.65,1822,2.746,1823,1.65,1824,1.65,1825,1.65,1826,1.65,1827,4.112,1828,1.65,1829,6.099,1830,6.035,1831,2.746,1832,1.65,1833,5.887,1834,2.746,1835,4.929,1836,4.929,1837,6.152,1838,2.746,1839,1.65,1840,2.746,1841,2.746,1842,1.65,1843,2.746,1844,2.746,1845,1.65,1846,2.746,1847,2.746,1848,1.65,1849,2.746,1850,4.929,1851,1.65,1852,1.65,1853,1.389,1854,1.389,1855,1.65,1856,2.746,1857,2.746,1858,1.65,1859,4.566,1860,2.746,1861,1.65,1862,2.746,1863,1.65,1864,1.65,1865,2.746,1866,1.65,1867,2.746,1868,1.65,1869,2.746,1870,1.65,1871,5.682,1872,1.65,1873,1.65,1874,5.226,1875,1.65,1876,1.65,1877,2.746,1878,2.746,1879,1.65,1880,2.746,1881,2.746,1882,1.65,1883,1.65,1884,1.65,1885,1.65,1886,4.566,1887,1.65,1888,1.65,1889,1.65,1890,1.65,1891,5.473,1892,4.929,1893,1.65,1894,1.65,1895,2.746,1896,1.65,1897,1.65,1898,2.746,1899,1.65,1900,1.65,1901,2.498,1902,1.501,1903,1.65,1904,3.527,1905,1.65,1906,1.65,1907,2.746,1908,1.65,1909,2.746,1910,1.501,1911,1.65,1912,1.65,1913,1.65,1914,2.746,1915,1.65,1916,1.65,1917,2.746,1918,2.746,1919,2.746,1920,2.746,1921,2.746,1922,2.746,1923,1.65,1924,2.746,1925,1.65,1926,1.65,1927,1.65,1928,1.65,1929,1.389,1930,1.65,1931,1.65,1932,1.65,1933,1.65,1934,1.65,1935,1.65,1936,1.65,1937,1.65,1938,1.65,1939,1.65,1940,1.65,1941,1.65,1942,1.65,1943,2.746,1944,1.65,1945,2.746,1946,1.65,1947,1.501,1948,1.65,1949,1.65,1959,1.877,1960,1.877,1961,1.877]],["title/interfaces/MetricReporterOptions.html",[170,0.242,556,2.378]],["body/interfaces/MetricReporterOptions.html",[0,0.318,3,0.191,4,0.26,5,0.155,6,0.133,8,0.144,11,0.604,12,1.596,16,0.011,17,2.047,19,1.796,24,0.203,25,0.916,29,1.068,30,1.589,56,0.484,57,0.854,58,1.151,63,0.821,69,1.885,70,2.455,71,2.455,78,0.271,88,1.615,90,0.515,126,0.202,127,0.388,136,0.654,137,0.336,138,0.673,139,1.042,149,2.455,170,0.397,172,0.388,173,0.439,203,0.005,204,0.007,205,0.005,207,0.512,229,1.409,302,1.525,310,3.487,311,3.303,327,1.053,329,1.94,341,2.498,347,1.972,355,2.652,358,2.678,359,2.673,367,1.353,370,2.652,371,1.353,374,1.898,377,2.511,384,1.558,387,2.02,493,2.478,524,2.246,525,2.831,526,1.94,527,3.904,528,5.009,529,3.793,530,4.169,531,4.663,532,3.662,534,2.442,535,2.684,536,3.002,538,2.493,539,3.748,540,2.889,541,2.705,542,2.684,543,3.772,545,3.065,546,3.448,547,2.741,548,3.606,549,2.285,550,4.715,551,3.207,552,2.981,553,3.207,554,3.207,555,2.56,556,4.316,557,3.487,558,3.332,559,3.904,560,4.096,561,3.332,562,2.948,563,3.192,564,3.662,565,3.862,566,3.192,567,2.008,568,3.207,569,3.207,570,2.684,571,3.207,572,3.207,573,2.821,574,3.356,575,3.207,576,3.207,577,3.207,578,4.218]],["title/interfaces/MetricSet.html",[170,0.242,1778,2.878]],["body/interfaces/MetricSet.html",[3,0.278,4,0.331,5,0.226,6,0.246,8,0.209,11,0.72,16,0.011,24,0.295,35,1.573,61,1.164,78,0.298,90,0.637,106,3.611,122,2.023,126,0.21,127,0.565,136,0.832,137,0.31,170,0.413,171,1.391,172,0.745,173,0.373,177,2.267,203,0.007,204,0.009,205,0.007,207,0.744,210,2.481,232,3.611,235,2.868,534,4.235,624,4.433,626,3.403,1123,4.299,1219,2.559,1766,4.974,1778,5.55,1829,5.04,1830,5.04,1853,6.155,1854,6.288,1962,5.542,1963,6.303,1964,6.303]],["title/interfaces/MetricSetReportContext.html",[170,0.242,317,1.733]],["body/interfaces/MetricSetReportContext.html",[3,0.261,4,0.319,5,0.213,6,0.181,8,0.197,11,0.678,16,0.011,17,1.455,24,0.278,25,1.122,30,1.431,56,0.498,63,0.883,78,0.213,126,0.228,127,0.532,136,0.656,137,0.245,170,0.43,173,0.415,203,0.007,204,0.008,205,0.007,207,0.7,226,2.531,259,2.391,302,1.642,316,2.404,317,2.85,318,3.287,320,3.095,327,1.547,374,2.826,376,3.527,377,2.408,378,2.614,387,1.873,401,1.998,524,3.074,657,5.018,661,2.85,709,5.175,1335,3.342,1378,4.613,1476,4.591,1526,4.273,1965,4.742,1966,7.243,1967,5.792]],["title/classes/MonotoneCounter.html",[0,0.194,238,1.375]],["body/classes/MonotoneCounter.html",[0,0.287,1,3.744,2,1.08,3,0.179,4,0.249,5,0.146,6,0.24,8,0.281,11,0.658,12,1.554,16,0.011,17,0.998,18,1.122,19,1.437,20,1.236,21,2.324,23,1.203,24,0.19,25,0.877,26,1.363,27,2.033,28,2.087,29,1.145,30,1.036,31,3.048,32,2.594,33,3.339,34,3.339,35,1.185,36,4.19,37,4.51,38,4.253,39,4.19,40,4.033,41,4.51,42,4.19,43,3.669,44,4.19,45,3.922,46,4.19,47,4.19,48,3.922,49,4.19,50,4.19,51,3.922,52,3.922,53,3.971,54,4.253,56,0.491,57,1,58,1.965,59,1.245,60,1.438,61,1.385,63,0.934,64,2.818,65,4.253,66,1.954,67,1.886,68,1.886,69,1.14,70,1.381,71,1.381,72,1.203,73,1.316,76,2.818,78,0.299,79,0.757,81,2.399,84,2.818,85,2.52,87,2.237,88,1.723,90,0.648,92,2.52,94,2.911,97,2.52,100,2.52,102,2.52,104,2.52,106,1.954,107,2.818,109,2.657,111,2.52,113,2.818,115,2.52,117,2.292,120,2.52,121,1.553,122,1.306,126,0.182,127,0.365,137,0.234,138,0.651,171,1.128,172,0.365,173,0.323,174,1.27,185,2.109,186,2.52,203,0.005,204,0.007,205,0.005,212,2.883,226,2.677,230,3.967,238,2.502,241,3.515,247,1.008,278,1.249,297,4.527,360,1.381,397,1.978,845,4.527,1219,1.651,1224,2.196,1226,2.399,1227,2.028,1284,2.818,1309,3.922,1968,3.253,1969,4.977,1970,4.977,1971,6.511,1972,6.511,1973,3.253,1974,5.661,1975,4.977,1976,7.089,1977,3.576,1978,3.576,1979,3.576,1980,3.576,1981,3.576,1982,3.576,1983,3.576,1984,4.068,1985,4.068,1986,4.068,1987,5.661,1988,5.661,1989,5.661,1990,4.068,1991,4.068,1992,3.576,1993,3.576,1994,3.576,1995,3.576,1996,3.576,1997,3.576,1998,3.576,1999,3.576,2000,3.576,2001,3.576,2002,3.576,2003,3.576,2004,3.576,2005,3.576,2006,3.576,2007,3.576,2008,3.576,2009,3.576,2010,3.576]],["title/interfaces/MovingAverage.html",[170,0.242,1146,3.26]],["body/interfaces/MovingAverage.html",[0,0.257,3,0.188,4,0.257,5,0.153,6,0.23,8,0.142,12,1.291,16,0.011,18,0.736,24,0.2,26,1.773,27,2.427,29,1.066,35,1.224,56,0.449,57,1.064,59,1.225,60,1.07,61,1.112,63,0.52,68,3.603,78,0.153,87,1.512,88,1.16,90,0.643,126,0.164,127,0.382,135,1.448,137,0.296,138,0.795,139,0.66,141,0.669,148,0.918,170,0.321,172,0.714,173,0.43,203,0.005,204,0.007,205,0.005,207,0.504,214,1.877,217,2.627,218,2.482,221,1.224,226,2.509,235,2.741,247,0.759,250,0.992,277,3.409,278,0.941,287,3.622,288,1.864,290,2.961,294,4.676,312,1.826,319,2.103,397,2.043,420,1.671,498,4.051,500,2.302,507,2.711,521,2.954,584,2.618,725,3.69,734,3.622,936,4.676,962,4.661,969,4.624,971,3.207,1139,6.384,1140,5.57,1141,3.156,1142,3.748,1143,5.141,1144,4.835,1145,7.447,1146,6.088,1147,3.748,1148,3.748,1149,3.748,1150,3.748,1151,3.748,1152,3.748,1153,6.314,1154,5.754,1155,3.748,1156,6.616,1157,5.141,1158,3.748,1159,6.998,1160,3.748,1161,5.031,1164,5.141,1165,6.834,1166,6.215,1169,3.295,1174,4.36,1177,3.46,1180,3.748,1181,2.302,1183,5.868,1187,3.409,1188,3.748,1189,3.748,1190,3.031,1191,3.748,1192,3.748,1193,3.748,1194,2.954,1195,3.748,1196,3.748,1197,3.748,1198,3.748,1200,3.82,1201,3.82,1202,5.141,1203,2.916,1204,4.328,1205,5.868,1206,5.141,1207,5.141,1208,3.748,1209,3.748,1210,6.834,1211,3.748,1212,5.868,2011,4.263,2012,4.263,2013,4.263,2014,4.263]],["title/interfaces/OverallReportContext.html",[170,0.242,320,1.584]],["body/interfaces/OverallReportContext.html",[3,0.301,4,0.347,5,0.245,6,0.241,8,0.227,16,0.01,61,1.058,73,1.152,78,0.245,126,0.191,127,0.612,137,0.282,170,0.456,192,3.412,203,0.008,204,0.009,205,0.008,207,0.807,259,2.601,275,4.232,302,1.785,320,2.834,387,2.038,591,3.786,1965,5.463,2015,6.927,2016,6.832]],["title/classes/Percentiles.html",[0,0.194,2017,3.052]],["body/classes/Percentiles.html",[0,0.359,2,1.578,3,0.262,4,0.319,5,0.213,6,0.249,8,0.197,11,0.579,16,0.011,18,0.985,20,2.203,23,1.756,24,0.278,25,1.123,27,2.545,29,1.025,30,1.432,56,0.433,57,1.017,58,1.926,59,1.03,60,1.327,61,1.212,63,1.037,73,0.868,78,0.213,79,0.795,87,1.536,88,1.179,126,0.166,137,0.299,138,0.594,173,0.36,203,0.007,204,0.008,205,0.007,211,4.791,233,2.66,247,1.291,250,1.687,258,3.361,278,1.6,279,5.223,282,6.375,284,6.881,287,4.848,288,1.643,301,5.368,387,1.875,534,4.086,549,2.017,635,3.616,1174,4.737,1323,4.115,1384,5.023,2017,5.963,2018,4.75,2019,7.251,2020,7.827,2021,7.251,2022,5.794,2023,7.827,2024,5.794,2025,7.827,2026,7.827,2027,7.827,2028,5.94,2029,5.798,2030,7.251,2031,5.94,2032,5.94,2033,5.94,2034,5.94,2035,5.94,2036,5.94]],["title/interfaces/PrometheusClusterOptions.html",[170,0.242,930,3.052]],["body/interfaces/PrometheusClusterOptions.html",[3,0.283,4,0.335,5,0.231,6,0.197,8,0.214,11,0.668,16,0.01,24,0.301,25,1.178,30,1.177,56,0.421,57,0.989,69,2.131,70,2.583,71,2.583,78,0.231,126,0.213,136,0.712,137,0.314,170,0.418,171,1.48,173,0.319,174,2.375,203,0.007,204,0.009,205,0.007,207,0.76,216,4.519,302,1.897,326,1.537,327,1.145,340,3.793,359,2.631,367,2.008,543,3.754,549,2.184,559,4.519,930,5.799,931,7.359,938,6.687,1111,4.486,2037,5.655]],["title/interfaces/PrometheusFields.html",[170,0.242,2038,3.26]],["body/interfaces/PrometheusFields.html",[0,0.155,3,0.095,4,0.155,5,0.078,6,0.108,8,0.233,11,0.664,12,0.478,14,2.436,16,0.011,18,0.901,19,1.663,20,1.348,21,1.161,22,1.801,26,1.784,27,2.409,28,1.751,29,0.857,30,1.379,31,2.21,32,2.672,56,0.467,57,0.827,59,1.149,60,1.281,61,0.336,63,0.541,69,1.572,70,1.194,71,0.736,72,0.641,73,1.292,78,0.126,79,0.911,90,0.616,94,2.705,106,1.042,120,2.178,126,0.196,132,1.343,133,2.909,136,0.665,137,0.145,138,0.845,139,0.545,141,0.996,144,0.909,148,0.987,149,1.733,152,1.129,153,1.416,157,1.416,160,1.416,166,1.222,169,1.279,170,0.348,171,0.609,172,0.458,173,0.425,175,2.873,177,1.265,192,1.921,203,0.008,204,0.004,205,0.005,206,1.081,207,0.256,211,1.222,212,1.836,213,0.939,220,1.171,221,0.454,223,1.279,227,2.366,228,1.312,229,1.38,232,1.69,233,0.971,238,1.098,239,1.821,242,1.171,247,0.386,258,2.057,259,1.464,260,1.124,261,1.823,262,1.124,267,1.279,271,1.279,275,1.343,278,0.478,288,1.005,290,1.384,302,1.362,312,1.876,313,1.897,315,1.424,316,1.469,317,2.364,318,2.49,320,1.836,321,0.803,324,1.265,325,1.385,326,1.06,327,1.127,333,1.042,343,1.575,347,1.53,350,1.859,351,1.859,352,1.081,355,1.098,358,1.303,359,1.705,360,0.736,367,1.594,369,1.921,370,2.409,371,2.318,372,0.939,373,1.042,374,2.031,375,1.042,376,2.21,377,1.871,378,1.348,379,2.276,380,1.416,382,2.3,383,1.124,387,0.909,394,1.171,397,1.55,398,2.676,399,3.287,400,0.939,401,0.863,404,1.081,406,2.297,410,1.124,417,1.416,419,2.43,420,1.398,421,0.939,422,1.575,432,1.124,433,0.971,438,1.124,439,1.081,440,0.624,465,1.124,466,1.081,479,1.124,480,0.971,489,1.982,493,0.909,505,1.754,522,1.171,526,0.971,527,1.171,529,1.222,530,1.343,532,1.343,535,2.178,538,0.803,539,2.909,540,1.693,541,2.546,542,1.343,543,2.785,546,2.842,547,1.005,548,1.081,549,1.506,552,1.342,555,2.21,567,0.736,573,2.139,574,1.754,590,1.124,591,1.042,596,1.222,598,1.343,599,1.343,600,1.343,607,1.279,626,1.171,639,3.162,653,1.343,658,1.081,661,1.746,662,1.343,663,1.343,669,2.748,679,1.982,680,1.343,691,3.162,692,1.502,693,2.178,696,1.279,701,1.502,725,1.63,726,1.502,733,1.502,735,1.69,759,1.474,760,1.502,783,1.502,800,4.384,802,1.502,871,2.603,881,2.603,895,2.436,926,3.074,929,5.293,1001,1.222,1007,1.279,1043,1.005,1111,3.544,1123,1.081,1127,1.734,1177,1.124,1194,1.502,1217,1.081,1227,1.754,1232,3.548,1259,1.734,1278,1.416,1280,2.812,1321,1.982,1333,1.279,1360,1.222,1370,1.416,1384,2.436,1385,2.297,1386,2.074,1387,2.603,1399,1.605,1407,3.31,1505,1.605,1506,1.605,1507,1.605,1508,1.605,1510,1.502,1526,1.279,1595,1.605,1597,3.536,1600,1.734,1601,1.734,1602,3.887,1604,2.748,1605,2.812,1653,1.343,1668,1.502,1681,1.502,1687,1.502,1693,1.734,1698,2.178,1782,5.496,2017,3.536,2029,4.082,2038,4.685,2039,1.502,2040,2.168,2041,1.906,2042,1.906,2043,4.488,2044,1.605,2045,1.605,2046,1.279,2047,3.074,2048,1.734,2049,3.888,2050,5.937,2051,3.778,2052,2.603,2053,5.182,2054,5.564,2055,2.812,2056,1.906,2057,1.906,2058,2.812,2059,1.906,2060,1.906,2061,1.906,2062,3.092,2063,1.906,2064,1.906,2065,1.906,2066,4.488,2067,3.092,2068,3.092,2069,3.092,2070,1.906,2071,3.092,2072,3.092,2073,3.092,2074,3.092,2075,3.092,2076,3.092,2077,1.906,2078,5.283,2079,3.092,2080,3.092,2081,3.092,2082,3.092,2083,3.901,2084,1.906,2085,1.906,2086,1.906,2087,1.906,2088,1.906,2089,1.906,2090,1.906,2091,1.906,2092,1.906,2093,3.092,2094,1.906,2095,1.734,2096,1.906,2097,2.603,2098,2.603,2099,2.603,2100,1.906,2101,1.906,2102,1.906,2103,1.906,2104,3.092,2105,1.906,2106,1.906,2107,3.092,2108,1.906,2109,1.906,2110,3.092,2111,1.906,2112,3.092,2113,1.906,2114,1.906,2115,1.906,2116,3.092,2117,1.906,2118,1.906,2119,1.906,2120,1.906,2121,1.906,2122,1.906,2123,1.906,2124,1.906,2125,1.734,2126,1.906,2127,1.906,2128,1.906,2129,3.092,2130,1.906,2131,1.906,2132,1.734,2133,1.906,2134,1.906,2135,1.906,2136,1.906,2137,1.906,2138,1.906,2139,1.906,2140,1.906,2141,1.906,2142,1.906,2143,3.092,2144,1.906,2145,1.906,2146,1.906,2147,1.906,2148,1.734,2149,1.906,2150,1.906,2151,1.906,2152,1.906,2153,1.906,2154,1.734,2155,3.548,2156,5.796,2157,1.906,2158,1.906,2159,1.906,2160,1.906,2161,1.906,2162,1.906,2163,3.901,2164,1.906,2165,1.906,2166,1.906,2167,3.092,2168,1.906,2169,3.092,2170,1.906,2171,1.906,2172,1.906,2173,3.901,2174,3.901,2175,3.901,2176,3.901,2177,3.901,2178,1.906,2179,1.906,2180,1.906,2181,1.906,2182,4.082,2183,3.901,2184,1.906,2185,1.906,2186,1.906,2187,1.906,2188,1.906,2189,1.906,2190,1.906,2191,1.906,2192,4.488,2193,1.906,2194,1.906,2195,1.906,2196,1.906,2197,3.548,2198,1.906,2199,1.605,2200,1.906,2201,1.906,2202,1.906,2203,1.906,2204,1.906,2205,1.906,2206,1.906,2207,4.933,2208,1.906,2209,1.906,2210,1.906,2211,1.906,2212,1.906,2213,1.734,2214,1.906,2215,1.906,2216,4.488,2217,1.906,2218,1.906,2219,3.092,2220,1.906,2221,1.906,2222,1.906,2223,3.092,2224,3.092,2225,1.906,2226,1.906,2227,1.906,2228,1.906,2229,1.906,2230,1.906,2231,1.906,2232,1.906,2233,1.906,2234,1.906,2235,1.906,2236,1.906,2237,1.502,2238,1.906,2239,1.906,2240,1.906,2241,1.906,2242,1.906,2243,1.906,2244,1.906,2245,1.906,2246,1.906]],["title/interfaces/PrometheusMetricResult.html",[170,0.242,2053,3.26]],["body/interfaces/PrometheusMetricResult.html",[0,0.154,3,0.095,4,0.154,5,0.077,6,0.066,8,0.232,11,0.666,12,0.474,14,2.418,16,0.011,18,0.916,19,1.659,20,1.339,21,1.152,22,1.792,24,0.101,25,0.541,26,1.783,27,2.404,28,1.744,29,0.854,30,1.375,31,2.198,32,2.667,56,0.475,57,0.802,59,1.154,60,1.277,63,0.538,69,1.564,70,1.185,71,0.729,72,0.635,73,1.289,78,0.125,79,0.908,90,0.615,94,2.698,106,1.032,120,2.162,126,0.195,132,1.33,133,2.894,136,0.662,137,0.144,138,0.844,139,0.541,141,0.995,144,0.9,148,0.986,149,1.724,152,1.12,153,1.403,157,1.403,160,1.403,166,1.21,169,1.267,170,0.346,171,0.605,172,0.455,173,0.425,175,2.996,177,1.255,192,1.511,203,0.008,204,0.004,205,0.005,206,1.071,207,0.254,211,1.21,212,1.826,213,0.93,220,1.16,221,0.45,223,1.267,227,2.353,228,1.303,229,1.375,232,2.118,233,0.962,238,1.09,239,1.814,242,1.884,247,0.382,258,2.044,259,1.455,260,1.113,261,1.809,262,1.113,267,1.267,271,1.267,278,0.474,288,0.999,290,1.373,302,1.429,312,1.868,313,1.89,315,1.415,316,1.461,317,2.354,318,2.481,320,1.826,321,0.796,324,1.255,325,1.376,326,1.053,327,1.17,333,1.032,343,1.563,347,1.632,350,1.848,351,1.848,352,1.071,355,1.09,358,1.293,359,1.696,360,0.729,367,1.585,369,1.909,370,2.404,371,2.312,372,0.93,373,1.032,374,2.024,375,1.032,376,2.198,377,1.864,378,1.339,379,2.267,380,1.403,382,2.285,383,1.113,387,0.903,394,1.16,397,1.54,398,2.667,399,3.276,400,0.93,401,0.856,404,1.071,406,2.28,410,1.113,417,1.403,419,2.418,420,1.392,421,0.93,422,1.563,432,1.113,433,0.962,438,1.113,439,1.071,440,0.618,465,1.113,466,1.071,479,1.113,480,0.962,489,1.967,493,0.9,505,1.74,522,1.16,526,0.962,527,1.16,529,1.21,530,1.33,532,1.33,535,2.162,538,0.796,539,2.894,540,1.683,541,2.541,542,1.33,543,2.773,546,2.956,547,1.618,548,1.071,549,1.497,552,1.332,555,2.198,567,0.729,573,2.127,574,1.74,590,1.113,591,1.032,596,1.967,598,1.33,599,1.33,600,1.33,607,1.267,626,1.16,639,3.144,653,1.33,658,1.071,661,1.373,662,1.33,663,1.33,669,2.731,679,1.967,680,1.33,691,3.371,692,1.488,693,2.162,696,1.267,701,1.488,725,1.618,726,1.488,733,1.488,735,1.677,759,1.463,760,1.488,783,1.488,800,4.367,802,1.488,871,2.583,881,2.583,895,2.418,926,3.054,929,5.287,1001,1.21,1007,1.267,1043,0.996,1111,3.529,1123,1.071,1127,1.718,1177,1.113,1194,1.488,1217,1.071,1227,2.198,1232,3.525,1259,1.718,1278,1.403,1280,2.791,1321,1.967,1333,1.267,1360,1.21,1370,1.403,1384,2.418,1385,2.28,1386,2.059,1387,2.583,1399,1.59,1407,3.293,1505,1.59,1506,1.59,1507,1.59,1508,1.59,1510,1.488,1526,1.267,1595,1.59,1597,3.517,1600,1.718,1601,1.718,1602,3.868,1604,2.731,1605,2.791,1653,1.33,1668,1.488,1681,1.488,1687,1.488,1693,1.718,1698,2.162,1782,5.482,2017,3.517,2029,4.059,2038,4.862,2039,1.488,2041,1.888,2042,1.888,2043,4.463,2044,1.59,2045,1.59,2046,1.267,2047,3.054,2048,1.718,2049,3.875,2050,6.088,2051,3.757,2052,2.583,2053,5.286,2054,6.136,2055,2.791,2056,1.888,2057,1.888,2058,2.791,2059,1.888,2060,1.888,2061,1.888,2062,3.068,2063,1.888,2064,1.888,2065,1.888,2066,4.463,2067,3.068,2068,3.068,2069,3.068,2070,1.888,2071,3.068,2072,3.068,2073,3.068,2074,3.068,2075,3.068,2076,3.068,2077,1.888,2078,5.26,2079,3.068,2080,3.068,2081,3.068,2082,3.068,2083,3.876,2084,1.888,2085,1.888,2086,1.888,2087,1.888,2088,1.888,2089,1.888,2090,1.888,2091,1.888,2092,1.888,2093,3.068,2094,1.888,2095,1.718,2096,1.888,2097,2.583,2098,2.583,2099,2.583,2100,1.888,2101,1.888,2102,1.888,2103,1.888,2104,3.068,2105,1.888,2106,1.888,2107,3.068,2108,1.888,2109,1.888,2110,3.068,2111,1.888,2112,3.068,2113,1.888,2114,1.888,2115,1.888,2116,3.068,2117,1.888,2118,1.888,2119,1.888,2120,1.888,2121,1.888,2122,1.888,2123,1.888,2124,1.888,2125,1.718,2126,1.888,2127,1.888,2128,1.888,2129,3.068,2130,1.888,2131,1.888,2132,1.718,2133,1.888,2134,1.888,2135,1.888,2136,1.888,2137,1.888,2138,1.888,2139,1.888,2140,1.888,2141,1.888,2142,1.888,2143,3.068,2144,1.888,2145,1.888,2146,1.888,2147,1.888,2148,1.718,2149,1.888,2150,1.888,2151,1.888,2152,1.888,2153,1.888,2154,1.718,2155,3.525,2156,5.775,2157,1.888,2158,1.888,2159,1.888,2160,1.888,2161,1.888,2162,1.888,2163,3.876,2164,1.888,2165,1.888,2166,1.888,2167,3.068,2168,1.888,2169,3.068,2170,1.888,2171,1.888,2172,1.888,2173,3.876,2174,3.876,2175,3.876,2176,3.876,2177,3.876,2178,1.888,2179,1.888,2180,1.888,2181,1.888,2182,4.059,2183,3.876,2184,1.888,2185,1.888,2186,1.888,2187,1.888,2188,1.888,2189,1.888,2190,1.888,2191,1.888,2192,4.463,2193,1.888,2194,1.888,2195,1.888,2196,1.888,2197,3.525,2198,1.888,2199,1.59,2200,1.888,2201,1.888,2202,1.888,2203,1.888,2204,1.888,2205,1.888,2206,1.888,2207,4.909,2208,1.888,2209,1.888,2210,1.888,2211,1.888,2212,1.888,2213,1.718,2214,1.888,2215,1.888,2216,4.463,2217,1.888,2218,1.888,2219,3.068,2220,1.888,2221,1.888,2222,1.888,2223,3.068,2224,3.068,2225,1.888,2226,1.888,2227,1.888,2228,1.888,2229,1.888,2230,1.888,2231,1.888,2232,1.888,2233,1.888,2234,1.888,2235,1.888,2236,1.888,2237,1.488,2238,1.888,2239,1.888,2240,1.888,2241,1.888,2242,1.888,2243,1.888,2244,1.888,2245,1.888,2246,1.888]],["title/interfaces/PrometheusReporterOptions.html",[170,0.242,2047,3.052]],["body/interfaces/PrometheusReporterOptions.html",[3,0.258,4,0.316,5,0.21,6,0.179,8,0.194,11,0.573,16,0.011,24,0.274,25,1.113,30,1.423,56,0.491,78,0.21,88,1.743,126,0.218,136,0.647,137,0.297,170,0.446,171,1.245,173,0.413,203,0.007,204,0.008,205,0.007,207,0.691,228,2.124,229,1.504,302,1.628,314,4.123,326,1.398,327,1.042,341,2.371,343,3.631,345,4.977,346,5.744,359,2.463,522,3.878,546,3.6,547,3.927,548,3.582,549,2.64,556,4.197,567,2.439,653,4.45,735,3.451,928,4.977,929,4.45,930,5.868,1749,6.316,2047,6.003,2052,5.317,2097,6.001,2098,6.001,2099,6.001,2197,5.744,2199,5.317,2247,5.143,2248,7.183,2249,6.316,2250,7.183]],["title/interfaces/PushgatewayReporterOptions.html",[170,0.242,2251,3.522]],["body/interfaces/PushgatewayReporterOptions.html",[0,0.254,3,0.184,4,0.254,5,0.15,6,0.128,8,0.139,11,0.334,16,0.011,19,1.274,24,0.196,25,0.894,28,1.755,29,0.831,30,1.368,31,3.085,32,2.853,35,0.876,56,0.476,57,0.842,58,1.111,63,0.999,73,1.278,78,0.207,79,0.884,88,1.675,90,0.442,126,0.199,136,0.855,137,0.294,138,0.66,141,0.855,148,0.682,152,1.343,170,0.392,171,1.234,173,0.431,177,2.377,203,0.005,204,0.007,205,0.007,207,0.494,215,1.646,218,1.661,221,0.876,228,1.706,238,1.802,239,1.902,247,0.745,278,0.923,288,0.948,302,0.948,312,2.224,313,1.902,314,3.805,315,2.121,316,1.661,317,3.041,318,2.271,319,2.076,320,2.076,321,1.55,322,2.676,323,2.959,324,2.076,325,2.063,326,0.999,327,1.331,341,1.381,342,4.906,343,3.614,347,2.261,350,2.769,351,1.753,352,2.086,353,2.676,354,1.939,355,1.802,356,2.499,357,1.873,358,2.138,359,1.753,360,1.42,363,2.358,365,3.137,369,2.499,370,2.413,371,2.224,372,1.812,374,1.853,377,1.237,378,1.271,379,2.076,381,2.898,382,2.169,383,2.169,384,1.505,398,3.276,400,1.812,401,1.026,420,0.973,421,1.812,432,2.169,438,2.169,465,2.169,479,2.169,541,1.853,548,2.086,549,1.96,555,1.812,578,2.992,639,3.575,654,2.591,696,2.468,759,1.753,882,3.097,928,3.999,929,4.999,1007,4.202,1043,1.939,1111,3.404,1307,2.898,1364,3.345,1613,2.468,1653,2.591,1809,5.284,2049,3.404,2055,4.615,2058,3.345,2154,3.345,2251,6.629,2252,3.345,2253,6.912,2254,7.095,2255,6.55,2256,5.772,2257,5.772,2258,5.772,2259,6.198,2260,5.772,2261,3.771,2262,5.075,2263,5.772,2264,4.183,2265,4.183,2266,3.678,2267,5.772,2268,7.919,2269,3.678,2270,4.183,2271,3.678,2272,4.183,2273,4.183,2274,6.794,2275,4.183,2276,5.772,2277,3.678,2278,5.772,2279,3.345,2280,4.183,2281,4.183,2282,5.772,2283,4.183,2284,4.183,2285,4.183,2286,4.183,2287,4.183,2288,4.183,2289,4.183,2290,3.678,2291,4.183,2292,4.183,2293,4.183,2294,4.183]],["title/interfaces/ReportMessageReceiver.html",[170,0.242,550,2.598]],["body/interfaces/ReportMessageReceiver.html",[3,0.277,4,0.33,5,0.226,6,0.23,8,0.249,16,0.011,18,0.791,24,0.294,31,3.249,35,1.57,56,0.444,61,0.974,73,1.215,78,0.226,87,1.626,88,1.247,90,0.575,126,0.21,127,0.563,137,0.31,138,0.75,139,0.974,170,0.457,172,0.673,173,0.312,203,0.007,204,0.009,205,0.007,207,0.742,312,2.594,365,2.552,420,1.746,541,2.85,543,3.994,550,4.9,552,2.399,691,4.228,900,6.377,946,6.597,1694,6.597,2095,6,2274,6.597,2279,6,2295,6.597,2296,5.526,2297,7.503,2298,6.597,2299,7.503,2300,6.286,2301,6.286,2302,6.286,2303,7.503]],["title/interfaces/ReportingResult.html",[170,0.242,321,1.632]],["body/interfaces/ReportingResult.html",[3,0.286,4,0.337,5,0.233,6,0.199,8,0.216,11,0.699,16,0.011,22,2.086,24,0.304,25,1.185,30,1.4,56,0.465,78,0.233,94,3.111,126,0.214,127,0.583,137,0.268,170,0.447,173,0.38,203,0.01,204,0.009,205,0.009,207,0.768,221,1.602,222,4.131,259,2.526,321,3.111,387,2.172,1219,2.638,1476,4.733,2304,5.713,2305,5.713,2306,7.652]],["title/interfaces/Reservoir.html",[170,0.242,956,2.598]],["body/interfaces/Reservoir.html",[0,0.304,3,0.242,4,0.304,5,0.197,6,0.243,8,0.183,12,1.525,16,0.011,18,0.692,24,0.257,26,1.66,29,0.951,35,1.446,56,0.418,57,1.064,59,1.227,61,1.171,63,0.67,78,0.197,79,1.011,87,1.421,88,1.091,90,0.648,126,0.193,127,0.493,137,0.327,138,0.755,148,0.649,170,0.38,172,0.678,173,0.425,203,0.006,204,0.008,205,0.006,207,0.649,210,2.281,221,1.15,235,2.638,247,1.346,250,2.01,401,1.348,420,1.608,440,2.519,584,2.461,715,2.741,865,4.788,953,5.932,954,3.808,955,3.591,956,5.26,957,4.412,958,5.237,959,5.526,960,6.044,961,3.788,962,4.281,963,4.395,965,5.595,969,5.237,971,3.632,972,4.395,973,4.395,974,4.395,975,3.591,976,2.968,977,4.395,978,4.515,2307,5.496,2308,5.496,2309,5.496]],["title/interfaces/Sampling.html",[170,0.242,1177,2.283]],["body/interfaces/Sampling.html",[2,1.92,3,0.26,4,0.318,5,0.212,6,0.221,8,0.196,11,0.693,16,0.011,24,0.277,35,1.513,61,0.915,78,0.212,79,0.79,90,0.639,121,2.759,122,1.897,126,0.202,127,0.53,134,2.399,135,2.007,136,0.9,137,0.358,138,0.722,139,1.21,141,0.676,142,3.191,144,2.477,148,0.961,149,2.007,151,2.947,152,1.897,170,0.467,172,0.7,173,0.359,203,0.007,204,0.008,205,0.007,207,0.698,210,1.951,240,3.191,250,1.893,440,2.564,976,3.191,1043,3.351,1177,4.561,1240,4.401,1333,4.799,2046,5.216,2237,4.094,2310,4.094,2311,5.91,2312,4.094,2313,5.78,2314,6.355,2315,5.196,2316,5.196,2317,5.196]],["title/interfaces/ScheduledMetricReporterOptions.html",[170,0.242,323,1.972]],["body/interfaces/ScheduledMetricReporterOptions.html",[0,0.328,3,0.235,4,0.298,5,0.191,6,0.163,8,0.177,9,3.38,10,3.145,11,0.595,16,0.011,24,0.25,25,1.05,26,1.419,29,0.938,30,1.364,56,0.479,57,0.978,63,0.827,72,1.576,73,0.991,78,0.191,88,1.642,90,0.519,126,0.22,127,0.478,136,0.868,137,0.334,138,0.677,139,1.282,141,0.61,148,0.801,170,0.373,171,1.359,173,0.417,177,1.918,203,0.006,204,0.008,205,0.006,207,0.63,217,2.589,218,2.508,221,1.116,229,1.419,247,0.949,302,1.208,319,2.438,322,3.983,323,3.706,325,2.117,327,0.949,341,2.589,347,2.139,350,3.124,351,2.234,353,3.636,356,3.825,370,2.528,371,2.117,384,1.918,385,5.421,387,2.175,391,3.946,393,3.693,394,2.878,420,1.734,555,2.935,556,4.234,570,3.302,657,4.696,658,2.659,1154,6.361,1161,4.776,1340,3.004,1373,3.302,1392,5.421,1397,4.263,1637,3.946,2125,4.263,2249,4.687,2318,3.946,2319,4.687,2320,5.331,2321,6.553,2322,5.331,2323,5.331,2324,5.331,2325,5.96,2326,5.331,2327,5.331]],["title/interfaces/Sender.html",[170,0.242,982,2.878]],["body/interfaces/Sender.html",[0,0.207,3,0.138,4,0.207,5,0.113,6,0.191,8,0.104,11,0.63,16,0.011,18,0.708,19,1.649,20,0.955,24,0.147,26,1.468,28,1.93,29,0.841,30,0.86,32,2.694,35,0.984,56,0.431,59,1.148,60,1.284,61,0.872,63,0.932,69,1.316,72,1.664,73,1.093,78,0.169,79,0.894,87,0.813,88,0.624,90,0.639,126,0.158,127,0.282,136,0.827,137,0.29,138,0.85,141,0.995,148,1.005,152,1.508,156,2.648,162,2.917,170,0.385,171,1.082,172,0.282,173,0.421,174,0.982,175,3.061,177,1.131,203,0.005,204,0.005,205,0.006,207,0.371,215,1.237,218,1.619,221,1.178,229,0.984,238,1.95,239,2.092,247,0.56,278,0.694,288,0.712,302,1.275,303,4.589,309,2.054,311,1.908,312,2.334,313,2.199,314,3.794,315,2.333,316,1.797,317,3.108,318,2.215,319,1.69,320,2.024,321,1.164,322,2.895,323,2.52,324,1.69,325,2.27,326,0.751,327,1.19,328,2.537,341,1.038,343,3.141,347,1.282,349,1.854,350,2.359,351,1.317,352,1.568,353,2.609,354,1.457,355,1.467,356,2.035,357,1.408,358,1.741,359,1.428,360,1.596,361,3.943,362,1.854,363,4.212,364,2.178,365,1.276,366,1.276,369,2.035,370,2.588,371,1.95,372,1.361,373,1.51,374,2.251,375,2.258,376,1.361,377,2.433,378,1.71,379,2.688,380,2.054,384,1.131,390,1.947,397,2.611,398,3.247,399,3.333,400,1.361,401,1.153,404,1.568,410,1.63,419,3.148,421,1.361,422,2.104,423,4.141,424,3.683,429,2.772,432,1.63,433,2.104,438,1.63,439,2.343,440,1.352,441,1.63,446,2.436,448,2.436,450,2.436,452,2.436,454,2.436,456,2.436,458,2.436,460,2.436,462,2.436,464,2.436,465,1.63,466,2.343,472,1.63,474,1.63,476,1.63,478,1.63,479,1.63,480,2.104,481,1.63,485,1.63,486,1.63,487,1.63,488,1.63,492,3.07,496,2.911,538,2.476,541,2.005,547,2.178,567,1.067,583,3.07,585,3.519,596,1.772,655,2.054,656,2.178,735,3.37,907,2.911,910,3.07,981,4.859,982,5.482,984,2.054,985,4.5,986,4.994,992,2.911,1004,3.758,1005,6.776,1007,3.32,1008,5.813,1009,5.813,1042,2.514,1119,5.813,1120,3.758,1121,3.758,1126,2.514,1128,4.367,1204,3.479,1323,3.256,1512,4.948,1513,2.514,1514,4.132,1515,2.764,1516,2.327,1517,4.132,1518,2.764,1519,2.327,1520,2.764,1521,2.764,1522,2.764,1523,2.764,1524,4.948,1525,2.764,1526,1.854,1527,4.132,1528,2.764,1529,2.764,1530,2.764,1531,2.764,1532,2.764,1533,2.764,1534,2.764,1535,5.877,1536,2.764,1537,2.764,1538,5.49,1539,2.764,1540,2.764,1541,2.764,1542,2.764,1543,2.764,1544,2.764,1545,4.132,1546,4.132,1547,4.132,1548,4.132,1549,4.132,1550,4.132,1551,4.132,1552,4.132,1553,4.132,1554,4.132,1555,2.764,1556,2.764,1557,4.132,1558,4.132,1559,4.132,1560,4.132,1561,2.764,1562,2.764,1563,2.764,1564,2.764,2328,3.143,2329,3.143,2330,3.143]],["title/interfaces/SerializableBucketCounting.html",[170,0.242,262,2.283]],["body/interfaces/SerializableBucketCounting.html",[0,0.275,3,0.207,4,0.275,5,0.169,6,0.144,8,0.156,11,0.694,16,0.011,22,2.401,24,0.22,25,0.968,27,1.952,28,1.66,29,0.592,56,0.346,57,1.036,59,0.888,60,0.861,66,3.373,68,2.182,72,1.392,78,0.252,79,1,90,0.643,121,2.679,122,2.007,126,0.175,127,0.422,134,1.911,135,1.598,136,0.938,137,0.361,138,0.816,139,1.206,141,0.89,142,2.541,144,2.62,148,0.945,149,1.598,151,3.118,152,2.253,170,0.461,171,1.415,172,0.629,173,0.397,203,0.005,204,0.007,205,0.005,206,4.337,207,0.556,208,2.777,209,3.261,210,1.554,211,4.387,212,3.095,213,3.238,214,2.007,215,1.852,216,2.541,217,1.554,218,1.355,219,4.411,220,4.532,221,1.565,222,4.038,223,2.777,224,2.653,226,2.184,227,4.079,228,1.848,229,1.565,230,4.51,232,3.373,233,3.583,234,2.541,235,1.797,236,3.261,237,3.261,238,1.47,239,1.799,240,2.541,241,2.541,242,2.541,243,3.261,244,1.744,245,3.261,246,3.075,247,0.838,248,3.261,249,3.261,250,1.095,251,4.331,252,3.261,253,3.261,254,2.916,255,3.261,256,3.261,257,3.261,258,2.182,259,1.554,260,3.639,261,4.298,262,4.546,263,2.916,264,4.331,265,4.331,266,3.261,267,2.777,268,4.084,269,3.261,270,3.261,271,2.777,272,3.261,273,3.261,274,3.261]],["title/interfaces/SerializableMetered.html",[170,0.242,1738,2.878]],["body/interfaces/SerializableMetered.html",[3,0.24,4,0.303,5,0.195,6,0.167,8,0.181,11,0.65,16,0.011,22,2.538,24,0.255,25,1.064,56,0.461,57,1.063,78,0.195,90,0.624,121,2.08,122,2.206,126,0.192,127,0.488,136,0.833,137,0.344,139,0.844,170,0.464,171,1.412,172,0.731,173,0.424,203,0.006,204,0.008,205,0.006,207,0.644,212,2.994,213,3.423,214,1.749,217,2.61,218,1.978,219,4.808,221,1.706,232,3.302,235,2.623,241,2.942,250,1.599,259,1.799,290,2.144,315,2.538,327,0.97,440,1.568,561,3.873,584,3.65,658,2.717,661,2.705,716,3.727,1169,3.071,1181,4.797,1190,3.903,1201,4.918,1203,2.717,1604,3.375,1722,5.52,1723,4.033,1724,3.56,1725,4.033,1726,4.033,1727,4.033,1728,4.033,1733,5.216,1735,6.034,1736,5.437,1737,5.496,1738,5.437,1739,5.852,1740,5.496,1741,5.496]],["title/interfaces/SerializableMetric.html",[22,1.414,170,0.242]],["body/interfaces/SerializableMetric.html",[0,0.292,1,3.356,3,0.156,4,0.226,5,0.127,6,0.109,7,2.32,8,0.281,9,3.013,10,2.095,11,0.722,12,1.462,13,2.84,14,2.461,15,2.32,16,0.011,17,1.797,18,1.057,19,1.907,20,2.615,21,2.706,22,2.834,24,0.166,25,0.796,26,1.076,27,1.887,28,1.365,29,1.104,30,0.65,31,2.616,32,2.494,33,2.095,34,2.095,37,3.562,38,2.32,40,2.2,41,3.562,43,2.002,53,1.841,54,2.32,56,0.468,57,0.714,59,1.073,60,0.941,63,0.808,64,2.461,65,3.947,66,1.707,67,1.647,68,1.647,69,0.995,70,1.206,71,1.206,72,1.05,73,1.317,76,2.461,78,0.297,79,0.688,81,2.095,84,2.461,85,2.2,90,0.621,92,2.2,94,2.603,97,2.2,100,2.2,102,2.2,104,2.2,107,3.562,109,2.32,111,2.2,113,3.562,115,2.2,117,2.002,120,2.2,121,1.356,122,1.14,126,0.185,127,0.318,128,5.055,129,2.461,130,4.681,131,2.84,132,2.2,133,4.011,134,1.442,135,1.206,136,0.907,137,0.352,138,0.773,139,1.24,140,2.461,141,0.588,142,1.918,143,4.111,144,2.945,145,4.111,146,4.111,147,4.111,148,1.049,149,1.206,150,2.84,151,3.505,152,2.256,153,2.32,154,5.202,155,2.461,156,2.002,157,2.32,158,2.84,159,2.84,160,2.32,161,2.84,162,1.841,163,2.629,164,2.84,165,2.84,166,2.002,167,2.84,168,2.84,169,2.095,170,0.364,171,1.309,172,0.461,173,0.422,174,1.605,175,2.023,176,4.111,177,1.849,178,3.562,179,2.84,180,2.84,181,2.84,182,4.111,183,2.84,184,2.84,185,3.132,186,3.185,187,4.473,188,4.111,189,2.84,190,2.629,191,2.84,192,1.538,193,2.84,194,2.629,195,2.84,196,2.84,197,2.84,198,2.84,199,2.84,200,2.84,201,2.84,202,2.461,203,0.004,204,0.006,205,0.004,207,0.42]],["title/interfaces/SerializableSampling.html",[170,0.242,2046,2.598]],["body/interfaces/SerializableSampling.html",[2,1.574,3,0.261,4,0.319,5,0.213,6,0.181,8,0.197,11,0.686,16,0.011,24,0.277,25,1.121,56,0.328,78,0.213,79,0.793,90,0.624,121,3.108,122,2.324,126,0.203,127,0.531,134,2.405,135,2.012,136,0.901,137,0.359,138,0.723,139,1.211,141,0.678,142,3.199,144,2.483,148,0.962,149,2.012,151,2.955,152,1.902,170,0.459,172,0.701,173,0.359,203,0.007,204,0.008,205,0.007,207,0.7,210,2.39,240,3.909,250,1.685,440,2.565,976,3.199,1043,2.747,1177,4.563,1240,4.707,1333,3.495,2046,5.239,2237,4.105,2310,4.105,2312,5.016,2313,5.789,2314,6.365,2315,5.209,2316,5.209,2317,5.209]],["title/interfaces/SerializableSummarizing.html",[170,0.242,2331,3.052]],["body/interfaces/SerializableSummarizing.html",[2,1.703,3,0.282,4,0.334,5,0.23,6,0.196,8,0.213,11,0.512,16,0.011,24,0.3,25,1.176,56,0.42,57,0.897,73,1.265,78,0.23,90,0.491,121,2.898,122,2.437,126,0.213,127,0.575,136,0.71,137,0.345,169,4.479,170,0.469,172,0.575,173,0.377,203,0.007,204,0.009,205,0.007,207,0.758,250,1.767,725,4.012,1043,2.973,1287,5.576,1360,4.279,1565,5.285,1583,5.604,2331,5.793,2332,5.129,2333,5.639,2334,5.129]],["title/interfaces/SerializedSnapshot.html",[170,0.242,1240,2.482]],["body/interfaces/SerializedSnapshot.html",[0,0.242,3,0.172,4,0.242,5,0.14,6,0.12,8,0.13,12,1.215,16,0.011,24,0.324,25,0.852,27,1.22,29,1.078,56,0.353,57,1.076,58,1.038,59,1.257,60,1.452,63,0.476,78,0.14,90,0.677,121,2.101,122,1.766,126,0.109,127,0.35,136,0.609,137,0.312,138,0.637,141,0.865,148,1.021,170,0.401,172,0.78,173,0.441,203,0.004,204,0.006,205,0.004,207,0.461,210,1.817,214,1.254,215,2.976,221,0.818,233,3.792,240,2.971,247,0.696,250,1.971,258,2.551,286,2.892,287,2.42,288,1.567,290,1.537,291,2.305,401,1.906,420,1.28,440,2.504,505,1.948,510,3.59,558,2.202,716,2.464,725,3.38,957,2.109,961,2.551,975,2.552,976,4.665,978,5.183,1003,2.892,1144,3.897,1174,2.552,1190,2.025,1240,4.108,1241,4.074,1242,4.074,1243,4.074,1244,4.074,1245,4.074,1246,4.074,1247,4.074,1248,4.074,1249,4.074,1250,4.074,1251,4.074,1269,4.074,1275,3.409,1276,4.074,1278,4.763,1321,2.202,1613,2.305,1662,3.59,1663,3.246,1664,3.409,1665,3.409,1666,3.409,1667,3.595,1698,2.42,2022,2.892,2024,2.892,2312,4.791,2335,2.707,2336,3.124,2337,5.094,2338,3.124,2339,3.124,2340,3.124,2341,3.124,2342,3.124,2343,3.124,2344,3.124,2345,3.124,2346,3.124,2347,3.124,2348,3.124,2349,3.124,2350,3.124,2351,3.124,2352,3.124,2353,3.124,2354,3.124,2355,4.401,2356,3.124,2357,3.124,2358,3.124,2359,2.892,2360,2.892,2361,3.124,2362,2.892,2363,2.892,2364,3.124,2365,3.124,2366,2.707,2367,2.892,2368,2.892,2369,3.124,2370,2.892,2371,3.124,2372,3.124,2373,4.401,2374,3.124,2375,3.124,2376,5.094,2377,4.401,2378,4.401,2379,3.124]],["title/classes/SimpleGauge.html",[0,0.194,1220,2.878]],["body/classes/SimpleGauge.html",[0,0.279,1,3.731,2,1.029,3,0.171,4,0.241,5,0.139,6,0.231,8,0.279,10,3.227,11,0.67,12,1.4,16,0.011,17,1.556,18,1.121,19,1.4,20,1.177,21,2.274,22,2.036,23,1.145,24,0.181,25,0.847,26,1.579,27,1.98,28,1.684,29,1.142,30,1.001,31,2.984,32,2.274,33,3.227,34,3.227,35,1.145,36,4.049,37,4.393,38,4.143,39,4.049,40,3.928,41,4.393,42,4.049,43,3.574,44,4.049,45,3.79,46,4.049,47,4.049,48,3.79,49,4.049,50,4.049,51,3.79,52,3.79,53,4.019,54,4.143,56,0.49,57,1.005,58,1.93,59,1.253,60,1.38,61,1.379,63,0.92,64,2.684,65,4.143,66,1.861,67,1.796,68,1.796,69,1.085,70,1.315,71,1.315,72,1.145,73,1.312,76,2.684,78,0.301,79,0.732,81,2.285,84,2.684,85,2.4,87,2.223,88,1.725,90,0.655,92,2.4,94,3.023,97,2.4,100,2.4,102,2.4,104,2.4,106,1.861,107,2.684,109,2.531,111,2.4,113,2.684,115,2.4,117,2.183,120,2.4,121,1.479,122,1.244,126,0.153,127,0.347,136,0.429,137,0.284,138,0.634,141,0.443,148,0.749,170,0.301,171,1.307,172,0.568,173,0.374,174,1.708,185,2.008,186,2.4,203,0.004,204,0.006,205,0.004,214,1.756,226,2.709,247,0.974,278,1.207,313,2.348,360,1.315,367,1.21,387,1.415,401,1.342,837,3.389,955,3.574,961,2.536,1214,2.868,1215,3.406,1216,2.868,1217,3.624,1219,1.573,1220,5.331,1221,4.81,1222,5.576,1223,5.576,1224,2.953,1225,2.4,1226,3.227,1227,2.728,1228,3.389,1229,2.4,1230,2.531,1973,3.098,1975,4.81,1976,7.06,1977,3.406,1978,3.406,1979,3.406,1980,3.406,1981,3.406,1982,3.406,1983,3.406,1992,3.406,1993,3.406,1994,3.406,1995,3.406,1996,3.406,1997,3.406,1998,3.406,1999,3.406,2000,3.406,2001,3.406,2002,3.406,2003,3.406,2004,3.406,2005,3.406,2006,3.406,2007,3.406,2008,3.406,2009,3.406,2010,3.406,2380,5.47,2381,3.874,2382,3.874,2383,3.874,2384,3.874]],["title/classes/SimpleSnapshot.html",[0,0.194,976,2.378]],["body/classes/SimpleSnapshot.html",[0,0.218,2,0.894,3,0.148,4,0.218,5,0.121,6,0.256,8,0.112,12,1.293,16,0.011,18,0.622,23,0.995,24,0.322,25,0.766,27,1.051,29,1.126,35,1.035,56,0.381,57,1.076,58,1.556,59,1.27,60,1.395,61,1.289,63,0.603,78,0.121,87,1.279,88,0.981,90,0.682,121,1.285,122,1.081,126,0.094,127,0.302,136,0.547,137,0.297,138,0.586,141,0.822,148,1.001,170,0.395,172,0.783,173,0.435,203,0.004,204,0.006,205,0.004,210,1.934,214,1.587,215,3.192,221,1.035,233,3.844,240,1.818,247,0.881,250,1.961,258,2.292,278,0.743,286,3.66,287,3.063,288,1.463,290,1.946,291,2.917,401,1.967,420,1.363,440,2.47,505,2.466,510,3.302,558,1.897,716,2.214,725,3.189,957,1.818,961,3.189,975,3.23,976,4.616,978,4.981,1003,2.492,1144,4.052,1174,2.2,1190,2.563,1217,2.466,1240,3.876,1241,5.092,1242,5.092,1243,5.092,1244,5.092,1245,5.092,1246,5.092,1247,5.092,1248,5.092,1249,5.092,1250,5.092,1251,5.092,1269,4.338,1275,3.63,1276,4.338,1278,4.855,1321,2.787,1613,2.917,1662,3.876,1663,3.456,1664,3.63,1665,3.63,1666,3.63,1667,3.828,1698,3.063,2022,3.66,2024,3.66,2312,4.765,2335,2.333,2336,3.954,2337,4.686,2338,2.692,2339,2.692,2340,2.692,2341,3.954,2342,2.692,2343,3.954,2344,2.692,2345,3.954,2346,2.692,2347,3.954,2348,2.692,2349,3.954,2350,2.692,2351,3.954,2352,2.692,2353,2.692,2354,2.692,2355,3.954,2356,2.692,2357,2.692,2358,3.954,2359,3.66,2360,3.66,2361,3.954,2362,3.66,2363,3.66,2364,3.954,2365,3.954,2366,3.425,2367,3.66,2368,3.66,2369,3.954,2370,3.66,2371,3.954,2372,2.692,2373,3.954,2374,2.692,2375,2.692,2376,4.686,2377,3.954,2378,3.954,2379,2.692,2385,4.945,2386,3.367,2387,3.367,2388,3.367,2389,3.367,2390,3.367,2391,3.367,2392,3.367,2393,3.367,2394,3.367,2395,3.367,2396,3.367,2397,3.367,2398,3.367]],["title/interfaces/SizeAttributeInterface.html",[170,0.242,1617,2.878]],["body/interfaces/SizeAttributeInterface.html",[0,0.276,1,2.947,3,0.208,4,0.276,5,0.169,6,0.144,8,0.249,11,0.561,12,1.383,16,0.011,17,1.537,18,0.885,24,0.221,25,0.97,26,1.311,27,2.591,29,0.885,30,0.864,32,2.739,53,2.448,56,0.389,57,1.01,59,0.89,63,0.576,73,1.095,78,0.252,90,0.626,126,0.197,127,0.423,135,1.604,136,0.862,137,0.35,138,0.817,139,0.97,141,0.54,144,3.139,148,0.946,152,2.011,170,0.476,171,1.086,172,0.562,173,0.412,203,0.005,204,0.007,205,0.005,207,0.558,210,2.975,214,2.257,226,2.189,228,1.396,247,0.841,278,1.383,288,1.42,313,2.242,360,1.604,366,1.918,401,1.159,420,1.742,584,2.115,961,3.991,1217,2.355,1219,1.918,1224,2.55,1225,2.926,1226,2.786,1227,2.355,1228,3.881,1229,2.926,1230,3.086,1407,4.417,1608,5.233,1609,2.926,1610,2.926,1611,5.768,1612,5.399,1613,4.82,1614,5.205,1615,5.233,1616,5.233,1617,5.339,1618,4.871,1619,5.924,1620,3.496,1621,5.543,1622,3.496,1623,3.496,1624,5.543,1625,3.496,1626,3.496,1627,3.496,1628,3.496,1629,3.496,1630,6.049,1631,3.496,1632,3.496,1633,3.496]],["title/interfaces/SizeMethodInterface.html",[170,0.242,1616,2.878]],["body/interfaces/SizeMethodInterface.html",[0,0.276,1,2.947,3,0.208,4,0.276,5,0.169,6,0.192,8,0.249,11,0.561,12,1.383,16,0.011,17,1.159,18,0.885,24,0.221,26,1.311,27,2.591,29,0.885,30,0.864,32,2.739,35,1.311,53,2.448,56,0.347,57,1.002,59,0.89,61,0.732,63,0.576,73,1.095,78,0.225,90,0.636,126,0.197,127,0.423,135,1.604,136,0.862,137,0.35,138,0.817,139,0.97,141,0.54,144,3.139,148,0.946,152,2.257,170,0.476,171,1.086,172,0.562,173,0.412,203,0.005,204,0.007,205,0.005,207,0.558,210,2.975,214,2.011,226,2.189,228,1.396,247,0.841,278,1.383,288,1.42,313,2.242,360,1.604,366,1.918,401,1.159,420,1.742,584,2.115,961,3.991,1217,2.355,1219,1.918,1224,2.55,1225,2.926,1226,2.786,1227,2.355,1228,3.881,1229,2.926,1230,3.086,1407,4.417,1608,5.233,1609,3.881,1610,2.926,1611,5.768,1612,5.399,1613,4.82,1614,4.638,1615,5.233,1616,5.339,1617,5.233,1618,4.871,1619,5.924,1620,3.496,1621,5.543,1622,3.496,1623,3.496,1624,5.543,1625,3.496,1626,3.496,1627,3.496,1628,3.496,1629,3.496,1630,6.049,1631,3.496,1632,3.496,1633,3.496,2399,4.723]],["title/classes/SlidingWindowReservoir.html",[0,0.194,1779,3.052]],["body/classes/SlidingWindowReservoir.html",[0,0.29,2,1.356,3,0.225,4,0.29,5,0.183,6,0.258,8,0.17,12,1.612,16,0.011,18,0.83,23,1.51,24,0.361,25,1.021,26,1.8,29,1.082,35,1.38,56,0.461,57,1.069,58,1.751,59,1.236,60,0.935,61,1.29,63,0.804,78,0.183,79,0.977,87,1.705,88,1.309,90,0.638,126,0.185,127,0.458,137,0.319,138,0.73,148,0.603,170,0.362,172,0.655,173,0.419,203,0.006,204,0.008,205,0.006,210,1.686,221,1.069,226,1.784,235,1.949,247,1.375,250,2.065,278,1.127,401,1.893,420,1.534,440,2.491,584,2.287,715,2.547,759,2.14,865,4.568,953,5.845,954,3.538,955,3.336,956,5.235,957,4.496,958,5.669,959,5.273,960,6.544,961,3.704,962,4.085,963,5.273,965,5.915,969,5.06,971,3.509,972,4.084,973,5.273,974,4.084,975,3.336,976,2.757,977,4.084,978,4.308,1393,4.084,1599,4.084,1779,4.568,1951,4.49,2400,6.594,2401,6.594,2402,6.594,2403,5.107,2404,5.107,2405,5.107,2406,5.107,2407,5.107]],["title/interfaces/Snapshot.html",[170,0.242,440,1.267]],["body/interfaces/Snapshot.html",[0,0.228,3,0.158,4,0.228,5,0.128,6,0.255,8,0.119,12,1.141,16,0.011,18,0.45,24,0.311,27,1.614,29,1.064,35,1.082,56,0.336,57,1.077,58,0.951,59,1.265,60,1.419,61,1.283,63,0.436,78,0.128,87,0.926,88,0.71,90,0.685,121,1.366,122,1.149,126,0.1,127,0.321,136,0.572,137,0.303,138,0.606,141,0.84,148,1.009,170,0.387,172,0.796,173,0.438,203,0.004,204,0.006,205,0.004,207,0.423,210,2.003,214,1.149,215,2.891,221,0.749,233,3.872,240,1.933,247,0.637,250,1.968,258,2.397,286,2.65,287,2.217,288,1.506,290,1.409,291,2.111,401,1.802,420,1.412,440,2.479,505,1.785,510,3.42,558,2.914,716,2.315,725,3.268,957,2.791,961,3.268,975,2.338,976,4.613,978,5.066,1003,3.827,1144,4.14,1174,2.338,1190,1.856,1217,2.578,1240,3.746,1241,5.218,1242,5.218,1243,5.218,1244,5.218,1245,5.218,1246,5.218,1247,5.218,1248,5.218,1249,5.218,1250,5.218,1251,5.218,1269,3.827,1275,3.759,1276,4.492,1278,4.799,1321,2.017,1613,2.111,1662,3.746,1663,3.58,1664,3.759,1665,3.759,1666,3.759,1667,3.965,1698,2.217,2022,2.65,2024,2.65,2312,4.204,2335,2.48,2336,2.862,2337,4.853,2338,2.862,2339,2.862,2340,2.862,2341,2.862,2342,2.862,2343,2.862,2344,2.862,2345,2.862,2346,2.862,2347,2.862,2348,2.862,2349,2.862,2350,2.862,2351,2.862,2352,2.862,2353,2.862,2354,2.862,2355,4.134,2356,2.862,2357,2.862,2358,2.862,2359,2.65,2360,2.65,2361,2.862,2362,2.65,2363,2.65,2364,2.862,2365,2.862,2366,2.48,2367,2.65,2368,2.65,2369,2.862,2370,2.65,2371,2.862,2372,2.862,2373,4.134,2374,2.862,2375,2.862,2376,4.853,2377,4.134,2378,4.134,2379,2.862,2408,3.579,2409,3.579,2410,3.579,2411,3.579,2412,3.579,2413,3.579,2414,3.579,2415,3.579,2416,3.579,2417,3.579,2418,3.579,2419,3.579,2420,3.579]],["title/classes/SpaceHistory.html",[0,0.194,2421,3.522]],["body/classes/SpaceHistory.html",[0,0.302,1,2.646,2,1.021,3,0.169,4,0.24,5,0.138,6,0.23,8,0.128,11,0.678,12,1.201,16,0.011,17,1.777,18,0.994,19,0.848,21,2.266,23,1.136,24,0.18,25,0.843,26,1.829,29,1.096,30,1.508,45,2.663,48,2.663,51,2.663,56,0.481,57,0.454,59,1.207,61,1.122,63,0.77,73,1.235,78,0.292,79,1.158,87,0.994,88,0.763,90,0.526,126,0.177,127,0.345,136,0.425,137,0.283,138,0.79,141,0.785,148,0.856,171,0.943,172,0.488,173,0.435,174,1.699,185,1.993,187,2.845,190,2.845,194,2.845,203,0.004,204,0.006,205,0.004,210,1.796,229,1.322,242,2.075,247,1.125,250,1.469,278,1.394,325,1.2,326,0.918,327,1.514,354,1.782,356,1.665,360,1.305,365,1.561,384,1.383,391,2.845,392,2.663,394,2.075,420,0.894,557,2.267,612,1.782,673,2.166,858,4.35,957,2.937,961,3.998,1220,5.812,1351,2.075,1697,5.049,1733,5.212,1770,2.845,1778,4.125,1833,6.016,1853,2.845,1854,2.845,1901,4.35,2261,2.511,2321,4.783,2421,6.515,2422,3.074,2423,4.783,2424,6.314,2425,6.314,2426,6.314,2427,3.844,2428,5.44,2429,7.735,2430,3.844,2431,6.314,2432,3.844,2433,3.844,2434,4.783,2435,3.844,2436,3.844,2437,3.844,2438,3.844,2439,3.844,2440,3.844,2441,3.844,2442,3.844,2443,3.844,2444,3.844,2445,3.844,2446,3.844,2447,3.844,2448,3.844,2449,3.844,2450,3.844,2451,3.844,2452,5.49,2453,2.075,2454,6.969,2455,3.844,2456,3.844,2457,3.844,2458,6.866,2459,3.844,2460,3.844,2461,3.844,2462,3.844,2463,3.844,2464,3.844,2465,3.844,2466,3.844,2467,3.844,2468,3.844,2469,3.844,2470,3.844,2471,3.844,2472,5.44,2473,3.844,2474,3.844,2475,3.844,2476,3.844,2477,3.844,2478,3.844,2479,3.844,2480,3.844,2481,3.844,2482,3.844,2483,3.844,2484,3.844,2485,3.844,2486,3.844,2487,3.844,2488,3.844,2489,3.844,2490,3.844,2491,3.844,2492,3.844,2493,3.844,2494,3.844,2495,3.844,2496,3.844,2497,3.844,2498,3.844,2499,3.844,2500,3.844,2501,3.844,2502,3.844,2503,3.844,2504,3.844,2505,3.844,2506,3.844,2507,3.844,2508,3.844,2509,3.844,2510,3.844,2511,3.844,2512,3.844,2513,3.844,2514,3.844,2515,3.844,2516,3.844,2517,3.844,2518,3.844,2519,3.38,2520,3.844,2521,3.844,2522,3.844,2523,6.314,2524,3.844,2525,3.844,2526,3.844,2527,3.844,2528,3.844,2529,3.844,2530,3.844,2531,3.844,2532,6.314,2533,3.844,2534,3.844,2535,3.844,2536,3.844,2537,3.844,2538,3.844,2539,3.844,2540,3.844,2541,3.844,2542,3.844,2543,3.844,2544,3.844,2545,3.844,2546,3.844,2547,3.844,2548,3.844,2549,3.844,2550,3.844,2551,3.844,2552,3.844,2553,3.844,2554,3.844,2555,3.844,2556,3.844,2557,3.844,2558,3.844,2559,3.844,2560,3.844]],["title/classes/StdClock.html",[0,0.194,324,1.584]],["body/classes/StdClock.html",[0,0.35,2,1.474,3,0.244,4,0.35,5,0.199,6,0.213,8,0.184,9,4.17,16,0.011,23,1.641,24,0.26,29,1.052,35,1.455,57,0.988,58,1.846,60,1.272,61,1.077,78,0.199,90,0.65,126,0.155,127,0.497,137,0.354,138,0.695,139,0.86,141,0.868,148,0.897,170,0.382,171,1.315,172,0.681,173,0.345,203,0.006,204,0.008,205,0.006,217,3.01,221,1.666,226,2.429,228,2.055,229,1.162,235,2.118,244,2.948,324,2.862,355,2.75,384,2.501,491,3.625,492,3.625,493,2.326,494,4.438,496,5.077,497,5.559,498,4.816,499,4.816,500,4.514,501,4.108,502,4.101,503,5.891,504,4.108,505,2.767,506,4.108,507,2.573,508,5.146,509,3.625,510,3.127,511,5.559,512,4.438,513,4.438,514,5.146,515,5.559,516,4.438,517,4.438,518,6.071,519,5.559,520,5.559,521,4.816,522,3.753,523,4.816,1976,4.438,2561,5.549,2562,5.549]],["title/classes/StopWatch.html",[0,0.194,2563,3.26]],["body/classes/StopWatch.html",[0,0.314,1,2.418,2,0.871,3,0.144,4,0.214,5,0.118,6,0.225,8,0.226,11,0.387,12,1.274,16,0.011,17,1.189,18,0.896,23,0.969,24,0.153,25,0.751,26,1.767,29,1.103,30,1.505,35,1.015,53,1.7,56,0.459,57,1.002,60,0.6,61,1.103,63,0.704,68,2.675,72,2.237,73,1.106,78,0.207,79,0.91,87,0.848,88,0.651,90,0.647,94,2.639,126,0.228,127,0.294,135,1.647,136,0.917,137,0.263,138,0.772,139,0.987,141,0.778,148,1.021,151,2.418,152,1.557,171,0.84,172,0.748,173,0.436,174,1.514,185,1.7,186,2.031,203,0.004,204,0.006,205,0.004,206,2.418,211,1.848,212,2.075,213,2.1,217,2.433,218,1.66,220,2.618,223,1.934,224,1.848,227,3.582,229,1.208,239,2.402,241,1.77,247,1.028,250,0.763,260,2.991,261,3.305,262,2.514,278,1.274,288,1.099,290,1.908,301,2.427,312,1.802,315,2.366,325,2.802,351,3.089,355,2.713,360,1.113,367,1.514,370,1.514,371,1.024,379,1.179,394,3.442,414,2.272,418,2.622,419,1.42,440,2.05,493,2.418,500,2.618,507,2.675,509,5.415,510,1.848,561,2.733,635,2.418,661,2.271,716,2.171,725,2.248,759,2.032,907,2.031,956,4.013,971,3.269,983,2.622,1144,3.252,1161,3.404,1169,2.733,1177,2.991,1181,3.979,1190,3.527,1200,4.653,1203,1.635,1219,1.331,1224,1.77,1225,2.031,1226,1.934,1227,1.635,1228,3.004,1229,2.031,1240,3.593,1284,2.272,1285,2.883,1286,2.883,1287,3.168,1288,2.883,1306,3.878,1319,2.883,1323,2.272,1329,2.883,1333,1.934,1373,2.031,1385,3.168,1439,2.272,1565,3.77,1576,2.883,1722,3.77,1724,4.165,1725,2.427,1726,2.427,1727,2.427,1728,2.427,1735,3.59,1736,3.77,1738,3.168,1739,2.427,1780,2.622,1818,2.622,1902,2.622,1910,2.622,2046,2.86,2279,3.878,2290,2.883,2325,2.883,2331,3.359,2334,2.622,2563,6.088,2564,2.622,2565,4.614,2566,7.37,2567,3.279,2568,4.849,2569,3.279,2570,3.279,2571,3.279,2572,3.279,2573,7.123,2574,3.279,2575,3.279,2576,4.849,2577,3.279,2578,7.37,2579,3.279,2580,3.279,2581,3.279,2582,3.279,2583,3.279,2584,3.279,2585,3.279,2586,3.279,2587,4.849,2588,3.279,2589,3.279,2590,3.279,2591,3.279,2592,3.279,2593,3.279,2594,3.279,2595,6.376,2596,3.279,2597,3.279,2598,3.279,2599,3.279,2600,3.279,2601,3.279,2602,3.279,2603,2.883,2604,3.279,2605,3.279,2606,3.878,2607,4.849,2608,3.279,2609,4.849,2610,6.376,2611,5.77,2612,3.279,2613,3.279,2614,3.279,2615,3.279,2616,3.279,2617,4.849,2618,3.279,2619,4.849,2620,3.279]],["title/interfaces/Summarizing.html",[170,0.242,1287,2.878]],["body/interfaces/Summarizing.html",[2,2.012,3,0.281,4,0.334,5,0.229,6,0.232,8,0.212,11,0.605,16,0.011,24,0.299,35,1.586,56,0.354,57,0.755,61,0.99,73,1.181,78,0.229,90,0.58,121,2.439,122,2.051,126,0.212,127,0.573,136,0.707,137,0.345,169,3.769,170,0.475,172,0.679,173,0.376,203,0.007,204,0.009,205,0.007,207,0.755,250,1.943,725,3.953,1043,3.512,1287,5.57,1360,3.601,1565,5.456,1583,5.249,2331,5.595,2332,5.11,2333,6.662,2334,6.679,2621,6.39]],["title/interfaces/Taggable.html",[133,2.283,170,0.242]],["body/interfaces/Taggable.html",[2,1.741,3,0.223,4,0.289,5,0.181,6,0.258,8,0.168,16,0.011,17,1.608,18,1.109,19,1.981,24,0.237,34,4.536,35,1.372,36,4.851,42,4.851,43,4.334,45,4.54,46,4.851,51,4.54,52,4.54,56,0.452,59,1.092,61,1.287,73,1.316,78,0.32,79,0.677,85,4.06,87,2.111,88,1.62,90,0.662,97,4.06,102,4.06,104,4.06,106,3.695,115,4.06,117,3.693,126,0.142,127,0.453,133,4.508,136,0.851,137,0.343,138,0.85,139,1.015,141,0.75,148,0.774,170,0.449,172,0.689,173,0.412,174,2.401,192,2.19,203,0.006,204,0.008,205,0.006,207,0.597,228,2.274,259,1.67,377,1.938,420,1.997,612,3.945,971,3.149,1351,4.152,1383,3.504,1502,3.744,1703,3.744,1710,4.54,2261,4.281,2622,3.504,2623,5.058,2624,5.762,2625,5.058,2626,5.058,2627,5.058,2628,5.058,2629,5.058,2630,5.058,2631,4.447,2632,4.447,2633,4.045,2634,4.447,2635,4.447]],["title/interfaces/Tags.html",[19,0.972,170,0.242]],["body/interfaces/Tags.html",[2,1.473,3,0.244,4,0.306,5,0.199,6,0.213,8,0.184,16,0.011,17,1.36,18,1.052,19,1.983,34,4.693,43,3.125,59,0.987,61,0.859,73,1.305,78,0.319,79,0.742,85,3.435,90,0.663,97,3.435,102,3.435,104,3.435,106,3.339,115,3.435,117,3.125,126,0.155,127,0.497,133,4.517,136,0.88,137,0.35,138,0.865,139,1.076,141,0.795,148,0.821,170,0.459,172,0.623,173,0.421,174,2.17,192,3.009,203,0.006,204,0.008,205,0.006,207,0.655,228,2.352,259,2.294,275,3.435,377,1.639,420,1.906,612,3.798,971,2.664,1351,3.752,1383,3.841,1502,4.105,1703,5.144,1710,4.814,2261,3.622,2622,3.841,2624,4.875,2631,4.875,2632,4.875,2633,4.434,2634,4.875,2635,4.875,2636,5.545]],["title/classes/TagsOnlyMetricRegistry.html",[0,0.194,1381,3.26]],["body/classes/TagsOnlyMetricRegistry.html",[0,0.255,2,0.613,3,0.102,4,0.163,5,0.083,6,0.162,8,0.077,9,4.029,10,1.361,11,0.649,12,0.509,16,0.011,17,0.566,18,0.29,19,1.831,21,0.762,23,0.682,24,0.217,25,0.573,26,1.359,27,1.155,28,2.131,29,0.974,30,1.274,32,2.869,35,0.774,43,3.483,56,0.45,57,0.914,59,0.657,60,0.969,61,0.717,63,0.706,69,1.731,70,1.256,71,1.256,72,1.565,73,0.904,78,0.293,79,0.775,87,0.597,88,0.458,90,0.649,94,2.751,117,2.084,126,0.225,127,0.207,133,1.917,134,0.937,136,0.894,137,0.218,138,0.87,139,0.573,141,0.935,148,0.933,170,0.318,172,0.474,173,0.431,174,1.155,177,1.33,192,0.999,202,2.562,203,0.006,204,0.004,205,0.006,213,3.092,215,2.279,218,0.664,221,1.294,229,1.108,238,1.809,239,2.171,247,1.031,278,0.509,288,0.838,302,1.471,312,2.173,313,2.171,315,2.422,316,2.439,317,3.179,318,2.279,319,1.33,320,2.714,321,0.855,325,2.356,326,0.551,327,1.202,332,2.291,341,1.912,345,1.599,347,2.026,350,2.218,351,1.55,358,1.37,359,1.123,366,1.501,367,1.155,369,2.292,370,2.505,371,2.027,372,1.601,374,2.664,376,2.292,377,1.919,378,2.51,379,2.784,381,1.599,382,1.917,383,1.917,387,2.126,394,2.857,397,1.292,398,3.369,400,1.601,401,1.298,404,1.151,420,1.348,421,0.999,422,1.656,423,1.429,433,1.033,439,1.151,466,1.151,480,1.033,493,0.967,522,2.498,523,1.599,524,2.744,529,1.3,538,0.855,539,1.917,540,0.881,541,2.422,543,1.714,545,1.917,546,2.509,552,1.412,555,3.708,556,1.246,559,1.246,562,1.151,566,3.127,567,2.291,570,4.022,573,1.55,574,1.844,590,3.365,591,2.223,601,2.608,612,1.714,624,1.361,641,1.429,658,2.639,661,2.083,662,2.291,663,1.429,669,2.291,670,1.599,671,1.599,672,1.361,673,1.3,674,1.429,675,1.429,676,1.429,677,1.361,679,1.3,680,2.867,682,1.599,691,3.264,693,1.429,696,2.73,709,1.429,757,1.599,793,1.599,824,2.562,837,3.279,847,1.599,896,1.708,958,1.599,971,1.777,1001,2.084,1007,2.181,1074,1.599,1107,4.806,1123,1.844,1133,1.508,1190,1.196,1203,1.151,1219,0.937,1335,1.3,1339,5.399,1340,1.3,1344,3.251,1347,4.069,1349,3.251,1351,1.997,1352,3.251,1353,2.416,1356,3.251,1357,3.667,1358,3.667,1359,3.251,1360,2.983,1361,3.251,1362,2.562,1363,3.251,1364,3.7,1365,2.957,1366,3.251,1370,1.508,1371,1.3,1372,1.708,1373,1.429,1374,2.73,1375,2.029,1376,3.206,1377,2.029,1378,2.181,1379,3.251,1380,3.251,1381,4.995,1382,3.251,1383,1.599,1384,1.599,1385,1.508,1386,1.361,1387,1.708,1388,2.029,1389,2.029,1390,2.029,1391,2.029,1392,4.232,1393,1.845,1394,1.708,1395,2.029,1396,2.029,1397,1.845,1398,2.029,1399,1.708,1400,2.029,1401,2.029,1402,2.029,1403,3.251,1404,2.029,1405,2.029,1406,2.029,1407,2.181,1408,2.029,1409,2.029,1410,2.029,1411,3.251,1412,3.251,1413,3.251,1414,3.251,1415,3.251,1416,2.029,1417,5.708,1418,2.029,1419,5.434,1420,5.434,1421,2.029,1422,2.029,1423,2.029,1424,2.029,1425,2.029,1426,2.029,1427,2.029,1428,2.029,1429,2.029,1430,2.029,1431,3.251,1432,2.029,1433,2.029,1434,2.029,1435,2.029,1436,3.251,1437,2.029,1438,1.845,1439,1.599,1440,3.251,1441,2.029,1442,5.092,1443,5.092,1444,4.069,1445,4.069,1446,4.069,1447,4.069,1448,3.251,1449,2.029,1450,4.069,1451,5.434,1452,3.251,1453,2.029,1454,4.069,1455,2.029,1456,2.029,1457,4.069,1458,2.029,1459,2.029,1460,2.029,1461,4.069,1462,2.029,1463,2.029,1464,2.029,1465,4.069,1466,2.029,1467,2.029,1468,2.029,1469,4.069,1470,2.029,1471,2.029,1472,5.434,1473,2.029,1474,1.599,1475,1.845,1476,3.264,1477,2.029,1478,3.251,1479,3.251,1480,2.029,1481,1.708,1482,4.069,1483,2.029,1484,2.029,1485,2.029,1486,2.029,1487,1.708,1488,2.029,1489,2.029,1490,1.599,1491,1.599,1492,1.599,1493,1.599,1494,4.232,1495,2.029,1496,1.845,1497,2.029,1498,2.029,1499,2.029,1500,2.029,1501,2.029,1502,3.425,1503,2.029,1504,2.029,1505,1.708,1506,1.708,1507,1.708,1508,1.708,1509,2.029,1510,1.599,1511,2.029,2637,3.698,2638,2.308]],["title/interfaces/Time.html",[170,0.242,217,1.454]],["body/interfaces/Time.html",[0,0.354,3,0.251,4,0.338,5,0.205,6,0.175,8,0.19,9,4.008,16,0.011,24,0.267,25,1.096,29,0.89,56,0.392,57,1.034,58,1.515,60,1.294,78,0.205,90,0.616,126,0.16,127,0.511,137,0.356,138,0.707,139,0.884,141,0.879,148,0.908,170,0.389,171,1.225,172,0.634,173,0.351,203,0.007,204,0.008,205,0.007,207,0.674,217,2.996,221,1.48,226,1.993,228,1.687,229,1.194,235,2.7,244,2.977,324,2.765,355,2.693,384,2.052,491,3.727,492,3.727,493,2.391,494,4.562,496,5.118,497,4.562,498,3.952,499,5.724,500,4.656,501,4.223,502,4.172,503,5.949,504,4.223,505,2.845,506,4.223,507,2.645,508,5.236,509,3.727,510,3.215,511,5.656,512,4.562,513,4.562,514,5.236,515,5.656,516,4.562,517,4.562,518,5.656,519,4.562,520,4.562,521,3.952,522,3.08,523,3.952]],["title/classes/TimeUnit.html",[0,0.194,1161,2.598]],["body/classes/TimeUnit.html",[0,0.296,2,1.4,3,0.232,4,0.296,5,0.189,6,0.247,8,0.175,16,0.011,18,0.847,23,1.558,24,0.247,25,1.042,26,1.635,29,1.068,35,1.408,56,0.432,57,1.052,59,1.146,61,1.21,63,0.821,78,0.189,79,1.122,87,1.74,88,1.335,90,0.598,126,0.148,127,0.472,137,0.354,138,0.741,141,0.959,148,0.795,172,0.603,173,0.388,203,0.006,204,0.008,205,0.006,214,2.16,217,2.803,218,2.555,235,2.568,244,3.222,247,1.198,278,1.163,288,1.525,319,2.42,397,2.351,420,1.566,500,4.722,507,3.62,514,4.981,1058,4.662,1161,5.183,1200,5.102,1203,3.895,1582,5.916,2639,5.973,2640,3.901,2641,6.245,2642,8.252,2643,6.729,2644,7.81,2645,6.729,2646,6.729,2647,6.729,2648,5.27,2649,6.729,2650,6.599,2651,7.81,2652,6.729,2653,5.27,2654,7.413,2655,5.27,2656,4.634,2657,4.634,2658,4.634,2659,4.634,2660,4.634,2661,4.634,2662,4.634]],["title/coverage.html",[2663,4.781]],["body/coverage.html",[0,0.395,1,1.473,5,0.126,6,0.281,7,5.138,11,0.28,16,0.011,17,0.862,19,0.776,20,1.068,22,1.128,28,0.933,56,0.195,79,0.47,128,2.296,129,2.434,130,2.177,132,2.177,133,1.822,139,1.307,140,2.434,170,0.498,175,1.383,203,0.004,204,0.006,205,0.004,206,1.752,208,4.551,217,1.16,227,1.629,230,1.98,238,1.097,239,1.011,261,1.822,262,1.822,263,2.177,299,2.601,300,4.878,302,1.156,308,2.177,311,1.427,312,1.097,313,1.011,314,1.688,315,1.128,316,1.011,317,1.383,319,1.264,320,1.264,321,1.302,322,1.629,323,1.574,324,1.264,325,1.097,344,2.601,347,1.797,348,2.601,355,1.097,359,1.068,378,1.068,440,1.011,489,1.98,491,4.305,507,1.629,510,1.98,524,4.077,525,4.305,541,1.128,550,2.073,555,1.522,556,1.897,578,1.822,580,2.177,581,4.082,598,2.177,599,2.177,600,2.177,601,1.98,620,2.177,621,2.434,833,2.434,834,3.776,842,2.601,926,2.434,927,2.81,929,2.177,930,2.434,953,2.434,954,4.161,956,2.073,976,1.897,979,2.601,980,3.09,982,2.296,1009,2.434,1032,2.81,1033,4.079,1034,2.81,1058,2.434,1139,2.601,1140,3.776,1141,3.776,1146,2.601,1161,2.073,1166,4.802,1177,1.822,1200,2.296,1203,1.752,1214,3.776,1220,2.296,1231,3.09,1236,2.81,1237,4.446,1238,4.446,1239,2.434,1240,1.98,1287,2.296,1290,2.81,1320,5.987,1333,2.073,1339,2.601,1340,4.432,1370,2.296,1371,1.98,1374,2.073,1376,2.434,1381,2.601,1385,5.287,1512,2.601,1513,4.802,1565,2.296,1566,3.776,1583,2.434,1592,4.079,1593,4.079,1597,2.434,1598,3.09,1602,2.434,1603,3.09,1608,2.296,1609,4.335,1610,4.335,1615,2.296,1616,2.296,1617,2.296,1619,2.434,1635,2.434,1636,4.565,1638,2.434,1640,2.434,1641,2.434,1662,3.944,1663,2.073,1688,3.09,1701,4.565,1702,4.565,1722,2.296,1723,4.446,1736,2.296,1738,2.296,1747,3.09,1765,2.601,1766,4.335,1767,4.161,1776,2.296,1778,2.296,1779,2.434,1787,2.434,1950,3.09,1962,3.09,1965,4.079,1968,4.079,2015,3.09,2017,2.434,2018,2.81,2037,3.09,2038,2.601,2039,4.161,2044,2.601,2045,2.601,2046,2.073,2047,2.434,2053,2.601,2247,3.09,2251,2.81,2252,4.079,2253,2.81,2295,3.09,2296,3.09,2304,3.09,2305,3.09,2310,4.565,2318,3.776,2331,2.434,2332,4.079,2335,4.161,2366,2.434,2367,2.601,2368,2.601,2421,2.81,2422,4.079,2454,2.81,2563,2.601,2564,4.079,2622,4.565,2639,5.711,2640,5.711,2641,2.81,2650,2.81,2663,2.81,2664,1.98,2665,3.09,2666,3.09,2667,3.514,2668,7.417,2669,7.802,2670,3.514,2671,5.101,2672,3.09,2673,5.28,2674,3.514,2675,7.715,2676,5.101,2677,3.514,2678,6.622,2679,7.26,2680,4.485,2681,3.09,2682,3.514,2683,2.81,2684,3.514,2685,3.09,2686,3.514,2687,3.09,2688,3.514,2689,6.006,2690,3.514,2691,3.09,2692,3.514,2693,3.09,2694,3.09,2695,3.514,2696,3.09,2697,3.514,2698,3.09,2699,3.514,2700,7.3,2701,3.09,2702,3.514,2703,3.514,2704,3.514,2705,6.418,2706,3.09,2707,3.514,2708,3.514,2709,3.514,2710,3.514,2711,3.514,2712,3.514,2713,6.59,2714,3.09,2715,3.09,2716,3.514,2717,3.09,2718,3.514,2719,3.514,2720,3.514,2721,3.09,2722,5.101,2723,3.514,2724,4.079,2725,3.09,2726,3.514,2727,2.81,2728,3.514,2729,3.09,2730,3.514,2731,3.09,2732,3.09]],["title/miscellaneous/enumerations.html",[2733,2.179,2734,4.65]],["body/miscellaneous/enumerations.html",[6,0.214,16,0.009,19,1.543,20,2.124,24,0.327,203,0.008,204,0.009,205,0.008,244,2.59,581,4.33,588,4.33,611,4.567,614,4.843,615,4.843,617,5.531,618,5.175,619,5.175,2733,4.124,2734,6.146,2735,6.146]],["title/miscellaneous/functions.html",[15,3.455,2733,2.179]],["body/miscellaneous/functions.html",[6,0.254,7,3.529,8,0.227,11,0.715,15,3.529,16,0.01,18,1.123,19,1.833,20,2.523,21,1.783,22,2.739,24,0.253,33,3.186,34,3.186,57,0.638,73,1.189,78,0.245,87,2.302,88,1.767,90,0.682,129,4.736,132,4.234,134,3.044,135,2.546,140,4.736,151,4.256,152,2.739,153,3.529,154,3.999,157,3.529,160,3.529,163,3.999,166,3.044,172,0.484,203,0.006,204,0.008,205,0.006,206,3.409,208,3.186,217,2.684,220,2.917,227,3.169,228,2.523,244,2.532,261,2.8,262,4.214,263,4.234,267,3.186,268,3.529,271,3.186,440,1.967,489,3.852,491,3.529,496,4.234,500,3.69,501,3.999,502,4.032,503,5.551,504,3.999,505,2.694,506,3.999,507,2.504,508,5.06,509,3.529,510,3.852,598,4.234,599,4.234,600,4.234,1177,2.8,1333,4.032,1370,4.466,1371,3.852,1383,3.742,1701,3.742,1702,5.195,1710,5.46,1711,4.32,1715,4.32,2044,5.06,2045,5.06,2046,4.649,2237,3.742,2310,3.742,2313,4.32,2622,3.742,2633,4.32,2701,6.01,2706,6.01,2733,3.186,2736,5.402,2737,7.499,2738,8.305,2739,6.835,2740,6.835,2741,6.835,2742,5.402]],["title/index.html",[24,0.173,305,2.413,2743,2.954]],["body/index.html",[8,0.236,11,0.643,16,0.01,67,2.662,69,1.609,79,0.768,122,1.843,136,0.786,170,0.316,203,0.007,204,0.008,205,0.007,210,2.344,217,1.896,258,2.662,291,3.388,302,1.301,307,4.399,308,4.399,326,2.104,327,1.474,329,3.453,334,2.759,347,2.374,534,3.236,549,1.95,552,2.192,585,3.236,591,4.149,645,4.002,646,3.752,734,3.557,759,2.407,847,3.979,868,4.592,869,3.101,962,3.557,981,4.92,984,3.752,992,3.557,1000,5.049,1001,3.236,1040,5.342,1043,3.292,1050,6.166,1310,5.049,1328,5.049,1569,4.251,1577,5.049,1689,3.236,1697,4.592,1698,3.557,1769,4.251,2049,4.548,2259,4.251,2261,3.752,2360,4.251,2453,4.469,2664,3.236,2744,6.244,2745,5.049,2746,5.049,2747,5.743,2748,5.743,2749,5.743,2750,6.619,2751,5.049,2752,3.557,2753,3.557,2754,5.743,2755,5.743,2756,5.743,2757,5.049,2758,4.592,2759,5.743,2760,5.743,2761,4.189,2762,4.002,2763,5.743,2764,5.743,2765,5.257,2766,5.743,2767,5.743,2768,6.779,2769,5.743,2770,6.779,2771,7.711,2772,5.743,2773,5.743,2774,5.743,2775,5.049,2776,5.743,2777,7.711,2778,7.711,2779,5.743,2780,4.399,2781,7.102,2782,5.743,2783,5.743,2784,5.743,2785,5.743,2786,5.743,2787,7.711,2788,5.743,2789,5.743,2790,5.049,2791,5.743,2792,5.049,2793,7.102,2794,5.743,2795,5.093,2796,5.743,2797,5.743,2798,5.743,2799,5.743,2800,8.055,2801,5.743,2802,5.743,2803,5.743,2804,8.055,2805,5.743,2806,5.743,2807,7.102,2808,7.711,2809,7.711,2810,5.743,2811,5.743,2812,5.743,2813,5.743,2814,5.743,2815,5.743]],["title/license.html",[305,2.413,2743,2.954,2761,2.179]],["body/license.html",[16,0.009,81,3.837,177,2.754,203,0.007,204,0.009,205,0.007,312,2.031,563,3.512,564,5.04,641,4.029,646,4.249,660,4.815,1050,5.201,1107,4.815,1307,4.506,1606,6.123,2359,4.815,2664,3.666,2761,3.837,2762,3.666,2816,8.137,2817,6.504,2818,7.656,2819,6.504,2820,6.504,2821,6.504,2822,6.504,2823,6.504,2824,6.504,2825,8.88,2826,6.504,2827,6.504,2828,7.656,2829,6.504,2830,6.504,2831,6.504,2832,6.504,2833,6.504,2834,6.504,2835,6.504,2836,6.504,2837,7.656,2838,6.504,2839,6.504,2840,6.504,2841,6.504,2842,6.504,2843,5.201,2844,7.656,2845,7.656,2846,6.504,2847,6.504,2848,6.504,2849,6.504,2850,5.719,2851,6.504,2852,6.504,2853,6.504,2854,6.504,2855,6.504,2856,6.504,2857,6.504,2858,6.504,2859,6.504,2860,6.504,2861,6.504,2862,6.504,2863,6.504,2864,6.504,2865,6.504,2866,6.504,2867,6.504,2868,6.504,2869,6.504,2870,6.504,2871,6.504]],["title/modules.html",[2750,4.781]],["body/modules.html",[16,0.009,203,0.008,204,0.009,205,0.008,2750,5.682]],["title/overview.html",[2872,5.257]],["body/overview.html",[2,1.879,16,0.009,203,0.008,204,0.009,205,0.008,207,0.836,2683,5.659,2696,6.222,2872,6.222]],["title/miscellaneous/typealiases.html",[2733,2.179,2873,5.289]],["body/miscellaneous/typealiases.html",[6,0.265,8,0.205,11,0.674,16,0.01,18,0.933,19,1.361,20,2.417,21,2.036,24,0.347,28,1.97,56,0.48,59,0.876,73,0.902,139,1.344,170,0.408,203,0.007,204,0.009,205,0.007,214,1.98,229,1.291,239,2.135,304,4.273,305,4.029,313,2.135,315,1.98,318,2.919,325,1.926,356,3.445,374,1.98,420,1.435,493,2.585,524,3.197,581,3.821,588,5.114,596,3.476,604,4.566,605,3.638,606,3.821,607,4.693,608,5.491,609,5.491,610,4.273,611,5.197,612,2.859,613,5.512,759,2.585,1033,4.932,1037,5.932,1041,5.932,1045,4.932,1046,5.423,1047,4.932,1048,5.423,1340,4.181,1609,3.821,1610,4.595,1618,5.139,1653,3.821,1766,3.821,1767,5.139,1781,5.932,2039,4.273,2048,5.932,2049,3.638,2050,5.932,2051,4.566,2052,4.566,2318,4.566,2319,5.423,2733,3.638,2735,7.258,2874,6.168,2875,7.418,2876,7.418,2877,7.418,2878,6.168,2879,6.168,2880,6.168]],["title/unit-test.html",[218,1.364,2780,2.937]],["body/unit-test.html",[5,0.168,7,3.065,15,3.065,16,0.011,60,1.598,79,0.628,203,0.005,204,0.007,205,0.005,208,2.767,218,1.35,290,2.455,291,2.767,347,1.279,491,3.065,524,3.233,525,3.065,581,2.906,834,3.473,927,3.751,954,3.25,1140,3.473,1141,3.473,1214,3.473,1237,3.473,1238,3.473,1320,5.848,1340,3.949,1566,3.473,1609,2.906,1610,2.906,1636,3.25,1662,4.209,1663,4.586,1664,4.626,1665,3.864,1666,2.906,1701,3.25,1702,3.25,1766,2.906,1767,3.25,1968,3.751,2018,3.751,2039,3.25,2155,3.751,2252,3.751,2310,3.25,2318,3.473,2335,3.25,2362,3.473,2363,5.187,2366,4.321,2370,5.528,2422,3.751,2564,3.751,2622,3.25,2639,3.473,2640,3.473,2663,3.751,2666,4.125,2668,6.161,2669,4.125,2672,5.484,2673,4.125,2678,7.029,2679,5.484,2680,6.161,2681,4.125,2683,3.751,2685,4.125,2687,5.484,2691,4.125,2693,4.125,2694,5.484,2698,4.125,2705,5.484,2714,5.484,2715,4.125,2717,6.161,2724,3.751,2731,4.125,2732,4.125,2780,2.906,2790,6.566,2881,4.691,2882,9.027,2883,9.027,2884,4.691,2885,4.691,2886,4.691,2887,6.238,2888,4.691,2889,4.691,2890,4.691,2891,4.691,2892,4.691,2893,4.691,2894,6.238,2895,6.238,2896,6.238,2897,4.691,2898,4.691,2899,6.238,2900,7.007,2901,7.468,2902,6.238,2903,4.691,2904,4.691,2905,4.691,2906,4.691,2907,7.468,2908,6.238,2909,6.238,2910,6.238,2911,7.994,2912,4.691,2913,4.691,2914,4.691,2915,7.468,2916,4.691,2917,4.691,2918,4.691,2919,4.691,2920,4.691,2921,4.691,2922,6.238,2923,4.691,2924,4.691,2925,4.691,2926,4.691,2927,4.691,2928,4.691,2929,4.691,2930,6.238,2931,6.238,2932,6.238,2933,6.238,2934,6.238,2935,4.691,2936,4.691,2937,4.691,2938,4.691,2939,6.238,2940,7.007,2941,4.691,2942,6.238,2943,4.691,2944,7.007,2945,4.691,2946,6.238,2947,4.691,2948,4.691,2949,4.691,2950,4.691,2951,4.691,2952,6.238,2953,4.691,2954,6.238,2955,4.691,2956,4.691,2957,4.691,2958,4.691,2959,4.691,2960,4.691,2961,4.691,2962,4.691,2963,4.691,2964,4.691,2965,4.691,2966,6.238,2967,4.691,2968,4.691,2969,6.238,2970,4.691,2971,4.691,2972,4.691,2973,4.691,2974,4.691,2975,4.691,2976,4.691,2977,4.691,2978,4.691,2979,6.238,2980,4.691,2981,4.691,2982,6.238,2983,4.691,2984,4.691,2985,6.238,2986,4.691,2987,4.691,2988,4.691]],["title/miscellaneous/variables.html",[2733,2.179,2989,4.65]],["body/miscellaneous/variables.html",[6,0.258,16,0.01,24,0.288,56,0.41,58,2.361,59,1.262,66,2.953,79,1.159,88,1.22,203,0.007,204,0.009,205,0.007,239,1.769,244,3.211,300,4.55,307,3.807,308,4.921,312,2.311,319,2.857,328,3.318,329,3.315,338,4.915,377,1.817,500,4.627,507,3.682,879,4.55,1058,5.503,1200,5.19,1203,3.961,1237,4.55,1238,5.48,1255,5.48,1289,4.258,1290,5.919,1566,4.55,1583,5.503,1584,5.404,1585,5.404,2298,5.404,2453,3.318,2639,4.55,2640,6.472,2641,6.352,2650,6.352,2656,5.404,2657,5.404,2658,5.404,2659,5.404,2660,5.404,2661,5.404,2662,5.404,2724,4.915,2727,6.352,2733,3.625,2989,5.404,2990,8.668,2991,6.146,2992,6.146,2993,6.146,2994,6.146,2995,6.146,2996,6.146,2997,6.146]],["title/additional-documentation/inspector-metrics.html",[326,0.76,327,0.567,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-metrics.html",[0,0.24,1,2.65,11,0.688,12,1.203,16,0.011,18,0.865,19,1.396,21,1.799,23,1.14,26,0.807,28,1.926,29,0.865,57,1.019,58,1.024,59,1.099,60,1.157,63,0.47,66,1.852,67,3.187,68,1.787,72,1.612,73,0.925,78,0.196,79,1.149,126,0.233,135,2.147,139,0.98,141,1.029,148,0.455,170,0.212,171,0.668,172,0.489,175,1.517,177,1.386,185,1.998,203,0.004,204,0.006,205,0.004,210,1.799,212,2.708,213,2.36,214,2.417,215,1.517,216,3.414,217,2.486,220,2.943,226,1.905,229,1.518,238,1.975,239,1.978,244,1.428,246,2.518,250,1.688,254,2.388,258,1.787,288,1.902,302,1.558,303,3.215,307,2.388,308,2.388,312,2.265,313,2.275,315,2.03,316,2.522,319,1.961,325,2.417,326,2.005,327,1.53,334,1.852,343,2.441,347,2.111,351,1.616,352,2.718,357,1.726,360,1.309,365,2.213,366,2.213,370,1.204,378,2.505,379,1.961,384,1.386,392,2.67,394,2.081,401,0.946,409,3.082,440,2.432,496,3.377,499,3.776,500,3.712,507,1.787,509,4.131,522,2.081,526,1.726,538,1.428,555,2.36,567,1.851,590,1.998,607,2.274,610,2.67,624,2.274,635,1.922,645,2.172,658,1.922,673,2.172,716,3.466,734,3.377,735,2.619,837,3.377,869,2.943,879,4.035,965,4.035,984,2.518,992,2.388,1040,2.67,1123,1.922,1181,2.943,1194,3.776,1217,1.922,1220,2.518,1239,4.381,1255,2.853,1289,2.67,1309,3.776,1321,2.172,1327,3.215,1351,2.081,1353,2.518,1357,2.67,1358,2.67,1365,3.082,1438,3.082,1516,2.853,1580,5.56,1606,3.082,1612,2.67,1640,4.381,1643,4.681,1689,3.874,1724,2.518,1770,4.035,1771,3.082,1776,3.561,1777,4.681,1783,3.082,1787,3.776,1955,3.389,1957,3.389,1969,3.389,1970,3.389,1973,3.082,2049,2.274,2182,3.082,2259,2.853,2277,3.389,2452,3.082,2453,2.081,2519,3.389,2563,4.035,2606,6.021,2743,3.082,2744,3.389,2745,3.389,2746,3.389,2751,3.389,2757,3.389,2761,2.274,2762,2.172,2765,4.035,2768,3.389,2770,3.389,2780,2.388,2792,3.389,2795,2.274,3000,2.388,3001,2.388,3002,2.388,3003,3.377,3004,3.855,3005,5.451,3006,3.855,3007,3.855,3008,3.389,3009,3.855,3010,3.855,3011,3.855,3012,3.855,3013,3.855,3014,3.855,3015,3.855,3016,3.855,3017,5.451,3018,3.855,3019,5.451,3020,3.855,3021,3.855,3022,3.855,3023,3.855,3024,3.855,3025,3.855,3026,5.451,3027,3.082,3028,2.518,3029,3.082,3030,3.389,3031,3.389,3032,3.855,3033,3.855,3034,3.855,3035,3.855,3036,3.855,3037,3.855,3038,3.855,3039,3.855,3040,3.855,3041,3.855,3042,3.855,3043,3.855,3044,3.855,3045,3.855,3046,3.855,3047,3.389,3048,3.855,3049,3.082,3050,3.855,3051,3.855,3052,3.082,3053,3.855,3054,3.855,3055,3.855,3056,3.855,3057,3.855,3058,5.451,3059,3.855,3060,5.451,3061,3.855,3062,3.855,3063,5.451,3064,3.855,3065,3.855,3066,3.855,3067,3.855,3068,3.855,3069,3.855,3070,3.855,3071,3.855,3072,4.793,3073,5.451,3074,3.855,3075,3.855,3076,3.855,3077,3.855,3078,5.451,3079,3.855,3080,5.451,3081,3.855,3082,3.855,3083,3.855,3084,3.855,3085,3.855,3086,3.855,3087,3.855,3088,3.855,3089,3.855,3090,3.855,3091,3.855,3092,5.451,3093,3.855,3094,5.451,3095,3.855,3096,5.451,3097,3.855,3098,3.855,3099,3.855,3100,3.855,3101,3.855,3102,3.855,3103,3.855,3104,3.855,3105,3.855,3106,3.855,3107,6.324,3108,3.855,3109,5.451,3110,5.451,3111,3.855,3112,3.855,3113,3.855,3114,3.855,3115,3.855,3116,3.855,3117,3.855,3118,3.855,3119,3.855,3120,3.855,3121,3.855,3122,3.855,3123,3.855,3124,4.793,3125,3.855,3126,3.389,3127,6.875,3128,3.855,3129,3.855,3130,3.855,3131,3.855]],["title/additional-documentation/inspector-carbon.html",[307,1.971,326,0.76,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-carbon.html",[16,0.011,17,1.974,18,0.721,19,1.565,31,2.481,58,1.521,63,1.009,69,2.255,70,1.945,71,2.408,72,1.694,79,1.143,122,1.839,126,0.242,141,0.964,203,0.007,204,0.008,205,0.007,213,2.481,229,1.199,307,5.454,308,4.771,309,5.258,312,2.513,316,2.38,326,2.103,327,1.56,328,3.093,329,2.565,331,3.228,334,2.752,342,4.986,347,2.401,348,6.572,359,1.74,366,2.326,378,2.154,379,2.061,384,2.061,387,1.482,526,3.176,538,2.122,540,2.187,545,2.97,549,1.945,552,2.187,567,1.945,578,3.993,592,3.549,612,2.656,807,3.549,869,3.829,1043,2.656,1327,4.183,1357,3.969,1358,3.969,1371,3.228,1569,4.241,1594,3.742,1689,3.228,2453,3.829,2664,3.228,2752,3.549,2753,3.549,2761,3.379,2762,3.228,2780,3.549,2795,3.379,3000,3.549,3001,3.549,3002,3.549,3003,3.549,3028,3.742,3049,4.581,3052,4.581,3132,3.969,3133,5.729,3134,8.048,3135,5.729,3136,7.091,3137,5.729,3138,5.729,3139,5.037,3140,5.037,3141,5.037,3142,5.037,3143,4.241,3144,4.241,3145,4.241,3146,4.241,3147,4.241,3148,5.336,3149,3.969,3150,3.969]],["title/additional-documentation/inspector-csv.html",[326,0.76,645,1.793,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-csv.html",[5,0.281,8,0.168,11,0.672,16,0.011,17,1.461,18,0.914,19,1.833,20,2.278,21,2.397,23,2.147,28,0.92,31,1.5,56,0.402,58,2.335,59,1.253,63,0.886,67,3.034,69,2.034,70,1.176,71,1.714,72,1.492,78,0.181,79,1.102,126,0.203,134,2.049,137,0.143,139,1.078,141,0.963,149,1.176,175,1.363,203,0.004,204,0.006,205,0.004,218,0.996,226,1.21,229,1.666,239,0.996,244,2.577,250,0.806,288,0.785,302,0.785,310,2.043,313,0.996,315,1.112,316,2.09,319,1.246,324,1.246,325,2.447,326,1.902,327,1.453,329,1.551,331,1.952,333,1.664,334,1.664,341,1.666,347,2.281,353,1.605,354,1.605,355,1.576,356,1.5,357,3.357,358,1.283,359,1.052,371,2.447,374,2.515,378,2.206,387,2.059,429,2.977,493,2.115,526,2.26,540,2.273,545,1.795,547,1.605,549,1.714,552,1.927,557,2.043,558,1.952,559,2.725,560,2.399,561,1.952,562,1.727,563,1.87,564,2.145,565,2.262,566,1.87,567,2.362,573,2.743,578,3.087,591,1.664,592,2.145,593,2.262,596,4.225,603,3.736,605,2.043,606,4.499,611,2.262,612,2.761,613,4.534,614,4.82,615,2.399,617,3.497,620,4.76,622,5.27,623,2.563,624,2.043,625,3.736,626,1.87,627,2.563,628,2.563,629,4.409,630,2.563,631,5.893,632,3.736,633,2.563,634,4.275,635,2.97,636,2.563,637,2.563,638,2.563,639,2.145,640,2.563,641,3.127,642,3.736,643,2.563,644,2.563,645,4.743,646,3.297,649,4.409,650,2.563,651,2.563,652,2.563,653,2.145,654,2.145,677,2.977,688,2.262,697,3.297,739,2.563,764,2.563,807,3.127,833,4.82,840,2.563,846,4.036,849,2.769,851,5.233,857,2.769,859,2.769,869,1.87,884,2.769,885,2.769,886,2.769,887,4.036,888,2.769,889,2.769,890,4.036,891,2.769,892,2.769,894,2.769,895,2.399,1047,4.036,1154,3.736,1161,2.977,1201,2.262,1224,1.87,1309,3.497,1320,3.297,1327,2.977,1371,1.952,1594,2.262,1662,2.844,1689,2.844,1724,3.297,1929,3.736,1967,4.036,2213,2.769,2261,3.297,2266,5.236,2453,2.725,2565,4.036,2606,4.036,2664,1.952,2665,3.045,2752,2.145,2753,2.145,2761,2.043,2762,1.952,2795,2.043,2843,2.769,3000,2.145,3001,2.145,3002,2.145,3003,2.145,3028,3.297,3029,4.036,3126,3.045,3132,2.399,3143,2.563,3144,2.563,3145,2.563,3146,2.563,3147,2.563,3148,4.534,3149,2.399,3150,2.399,3151,4.438,3152,5.047,3153,5.047,3154,5.047,3155,5.047,3156,5.047,3157,5.047,3158,5.047,3159,5.047,3160,5.047,3161,5.047,3162,5.047,3163,5.047,3164,5.047,3165,5.047,3166,4.438,3167,6.544,3168,5.047,3169,5.047,3170,4.438,3171,5.047,3172,5.047,3173,5.047,3174,5.047,3175,3.463,3176,3.463,3177,3.463,3178,3.463,3179,3.463,3180,3.463,3181,3.463,3182,3.463,3183,3.463,3184,3.463,3185,3.463,3186,3.463,3187,3.463,3188,3.463,3189,3.463,3190,3.463,3191,3.463,3192,3.463,3193,3.463,3194,3.463,3195,3.463,3196,3.463,3197,3.463,3198,3.463,3199,3.463,3200,3.463,3201,3.463,3202,3.463,3203,3.463,3204,3.463,3205,3.463,3206,3.463,3207,3.463,3208,3.463,3209,3.463,3210,3.463,3211,3.463,3212,3.463,3213,3.463,3214,3.463,3215,3.463,3216,3.463,3217,3.463,3218,3.463,3219,3.463,3220,3.463,3221,3.463,3222,3.463,3223,3.463,3224,3.463,3225,3.463,3226,3.463,3227,3.463,3228,3.463,3229,3.463,3230,3.463,3231,3.463,3232,3.463,3233,3.463,3234,3.463,3235,3.463,3236,3.463,3237,3.463,3238,3.463,3239,3.463,3240,3.463,3241,3.463,3242,3.463,3243,3.463,3244,3.463,3245,3.463,3246,3.463,3247,3.463,3248,3.463,3249,3.463,3250,3.463,3251,3.463,3252,3.463,3253,3.463,3254,3.463,3255,3.463,3256,3.463,3257,3.463,3258,3.463,3259,3.463,3260,3.463,3261,3.463,3262,3.463,3263,3.463,3264,3.463,3265,3.463,3266,3.463,3267,3.463,3268,3.463,3269,3.045,3270,3.463,3271,3.463,3272,3.463,3273,3.463,3274,3.463,3275,3.463,3276,3.463,3277,3.463,3278,3.463,3279,3.463,3280,3.463,3281,3.463,3282,3.463,3283,3.463,3284,3.463,3285,3.463,3286,3.463,3287,3.463,3288,3.463,3289,3.463,3290,3.463,3291,3.463,3292,3.463,3293,3.463,3294,3.463,3295,3.463,3296,3.463,3297,3.463,3298,3.463,3299,3.463,3300,3.463,3301,3.463,3302,3.463,3303,3.463,3304,3.463,3305,3.463,3306,3.463,3307,3.463,3308,3.463,3309,3.463,3310,3.463,3311,3.463,3312,3.463,3313,3.463,3314,3.463,3315,3.463,3316,3.463,3317,3.463,3318,3.463,3319,3.463,3320,3.463,3321,3.463,3322,3.463,3323,3.463,3324,3.463,3325,3.463,3326,3.463,3327,3.463,3328,3.463,3329,3.463,3330,3.463,3331,3.463,3332,3.463,3333,3.463,3334,3.463,3335,3.463,3336,3.463,3337,3.463,3338,3.463,3339,3.463,3340,3.463,3341,3.463,3342,3.463,3343,3.463,3344,3.463,3345,3.463,3346,3.463,3347,3.463,3348,3.463,3349,3.463,3350,3.463,3351,3.463,3352,3.463,3353,3.463,3354,3.463,3355,3.463,3356,3.463,3357,3.463,3358,3.463,3359,3.463,3360,3.463,3361,3.463,3362,3.463,3363,3.463,3364,3.463,3365,3.463,3366,3.463,3367,3.463,3368,3.463,3369,3.463,3370,3.463,3371,3.463,3372,3.463,3373,3.463,3374,3.463,3375,3.463,3376,3.463,3377,3.463,3378,3.463,3379,3.463,3380,3.463,3381,3.463,3382,3.463,3383,3.463,3384,3.463,3385,3.463,3386,3.463,3387,3.463,3388,3.463,3389,3.463,3390,3.463,3391,3.463,3392,3.463,3393,3.463,3394,3.463,3395,3.463,3396,3.463,3397,3.463,3398,3.463,3399,3.463,3400,3.463,3401,3.463,3402,3.463,3403,3.463,3404,3.463,3405,3.463,3406,3.463,3407,3.463,3408,3.463,3409,3.463,3410,3.463,3411,3.463,3412,3.463,3413,3.463,3414,3.463,3415,3.463,3416,3.463,3417,3.463,3418,3.463,3419,3.463,3420,3.463,3421,3.463,3422,3.463,3423,3.463,3424,3.463,3425,3.463,3426,3.463,3427,3.463,3428,3.463,3429,3.463,3430,3.463,3431,3.463,3432,3.463,3433,3.463,3434,3.463,3435,3.463,3436,3.463,3437,3.463,3438,3.463,3439,3.463,3440,3.463,3441,3.463,3442,3.463,3443,3.463,3444,3.463,3445,3.463,3446,3.463,3447,3.463,3448,3.463]],["title/additional-documentation/inspector-elasticsearch.html",[326,0.76,1040,2.204,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-elasticsearch.html",[11,0.665,16,0.011,17,1.74,18,0.892,19,1.664,21,2.093,24,0.225,28,1.684,31,2.082,56,0.393,58,1.277,60,1.16,63,0.92,69,2.113,70,1.633,71,2.153,72,1.874,73,0.927,79,1.114,122,1.544,126,0.245,141,1.019,148,0.838,156,2.71,162,2.493,203,0.006,204,0.007,205,0.006,212,1.73,229,1.007,250,1.475,288,1.09,291,3.74,302,1.09,304,4.393,316,2.448,318,2.792,326,2.074,327,1.527,328,3.83,329,2.153,331,2.71,334,3.046,342,3.928,343,2.153,347,2.379,359,1.461,374,2.277,377,2.097,378,2.446,379,2.281,384,2.281,387,1.64,399,3.537,410,2.493,420,1.475,540,1.835,545,2.493,549,1.633,552,1.835,567,1.633,578,3.677,592,2.979,612,2.229,626,2.596,661,1.892,759,2.015,807,2.979,848,5.07,869,3.423,870,5.673,1001,2.71,1034,7.03,1035,7.777,1036,6.631,1037,6.268,1038,4.228,1040,6.068,1041,5.07,1043,2.939,1044,6.631,1052,5.575,1058,4.393,1059,4.228,1060,4.228,1061,5.575,1062,4.228,1063,4.228,1064,4.228,1065,4.228,1066,4.228,1099,4.228,1101,4.228,1327,3.74,1371,2.71,1569,4.693,1594,3.141,1689,3.573,2453,3.423,2664,2.71,2752,2.979,2753,2.979,2758,3.845,2761,2.836,2762,2.71,2795,2.836,3000,2.979,3001,2.979,3002,2.979,3003,2.979,3028,4.142,3132,3.331,3143,3.56,3144,3.56,3145,3.56,3146,3.56,3147,3.56,3148,4.914,3149,3.331,3150,3.331,3449,6.34,3450,6.34,3451,4.809,3452,4.809,3453,4.809,3454,6.34,3455,4.809,3456,4.809,3457,4.809,3458,6.34,3459,6.34,3460,6.34,3461,6.34,3462,4.809,3463,4.809,3464,4.809,3465,6.34,3466,4.809,3467,6.34,3468,4.809,3469,4.809,3470,4.809]],["title/additional-documentation/inspector-influx.html",[326,0.76,992,1.971,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-influx.html",[16,0.011,17,1.875,23,2.074,31,2.438,58,1.495,60,1.284,63,0.687,69,2.241,70,1.912,71,2.382,72,2.074,79,1.138,126,0.235,141,0.999,203,0.006,204,0.008,205,0.006,213,3.038,216,3.04,229,1.179,258,2.61,288,1.276,302,1.59,312,2.498,316,2.302,325,2.386,326,2.073,327,1.516,328,3.04,329,2.521,331,3.173,334,2.705,342,3.488,347,2.321,357,2.521,359,1.711,378,1.711,379,2.749,384,2.025,387,1.814,499,3.901,538,2.086,540,2.149,545,2.919,549,1.912,552,2.149,562,3.499,567,1.912,578,3.962,592,3.488,612,2.61,807,3.488,869,3.788,979,5.193,981,5.542,982,5.226,983,4.503,984,3.678,992,5.272,999,4.951,1001,3.173,1009,6.01,1043,2.61,1327,4.138,1357,3.901,1358,3.901,1371,3.173,1519,5.193,1594,3.678,1689,3.173,2255,4.503,2262,6.168,2453,3.788,2664,3.173,2752,3.488,2753,3.488,2761,3.321,2762,3.173,2780,3.488,2795,3.321,3000,3.488,3001,3.488,3002,3.488,3003,4.346,3027,4.503,3028,3.678,3029,5.61,3030,4.951,3031,4.951,3049,4.503,3052,4.503,3132,3.901,3139,4.951,3140,4.951,3141,4.951,3142,4.951,3143,4.168,3144,4.168,3145,4.168,3146,4.168,3147,4.168,3148,5.295,3149,3.901,3150,3.901,3471,5.631,3472,5.631,3473,5.631,3474,7.016,3475,5.631,3476,7.016,3477,5.631,3478,5.631,3479,5.631,3480,7.016,3481,5.631]],["title/additional-documentation/inspector-prometheus.html",[326,0.76,2049,1.876,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-prometheus.html",[11,0.51,12,1.076,16,0.011,17,1.86,19,1.412,23,1.441,31,2.77,56,0.27,58,1.294,60,1.171,63,0.594,66,3.073,67,2.259,69,2.263,70,1.655,71,1.655,72,1.891,78,0.175,79,1.157,126,0.239,141,0.995,148,0.756,149,1.655,152,2.053,203,0.006,204,0.007,205,0.006,216,3.855,221,1.339,229,1.587,242,3.453,302,1.718,309,5.38,316,2.055,325,1.997,326,2.066,327,1.601,329,2.182,334,2.341,340,3.19,341,1.609,342,4.423,347,2.359,378,2.303,379,2.301,387,1.654,526,2.182,540,1.86,549,2.424,552,3.005,562,2.43,573,2.681,612,3.31,655,4.179,735,2.341,869,2.631,882,4.735,929,5.358,955,3.184,1001,2.746,1111,3.773,1327,3.773,1371,3.605,1519,3.607,1599,3.897,1604,3.962,1689,3.605,1769,4.735,1929,4.735,2049,5.102,2051,3.607,2097,3.607,2098,3.607,2099,3.607,2132,3.897,2199,3.607,2253,6.295,2254,4.284,2255,5.71,2259,5.285,2269,4.284,2271,4.284,2453,3.855,2565,3.897,2603,4.284,2664,2.746,2752,3.019,2753,3.019,2758,3.897,2762,2.746,2780,3.019,2795,2.874,2843,3.897,2850,5.624,3000,3.019,3001,3.019,3002,3.019,3003,3.019,3027,3.897,3028,4.179,3047,4.284,3124,4.284,3132,3.376,3148,5.598,3149,4.431,3150,4.431,3151,4.284,3166,4.284,3170,5.624,3269,4.284,3482,4.873,3483,4.873,3484,6.396,3485,6.396,3486,4.873,3487,4.873,3488,4.873,3489,4.873,3490,6.396,3491,6.396,3492,6.396,3493,6.396,3494,6.396,3495,6.396,3496,6.396,3497,6.396,3498,6.396,3499,6.396,3500,6.396,3501,6.396,3502,6.396,3503,6.396,3504,4.873,3505,4.873,3506,4.873,3507,4.873,3508,4.873,3509,4.873,3510,4.873,3511,4.873,3512,4.873,3513,4.873,3514,4.873,3515,4.873,3516,4.873,3517,4.873,3518,4.873,3519,4.873,3520,6.396,3521,4.873,3522,4.873,3523,6.396,3524,4.873,3525,4.873,3526,4.873,3527,4.873,3528,4.873,3529,4.873,3530,4.873,3531,4.873,3532,4.873,3533,4.873,3534,4.873,3535,4.873,3536,4.873,3537,4.873,3538,4.873,3539,4.873,3540,4.873,3541,4.873,3542,4.873,3543,4.873,3544,4.873,3545,4.873,3546,4.873,3547,6.396,3548,4.873,3549,4.873,3550,4.873]],["title/additional-documentation/inspector-vm.html",[326,0.76,2765,2.355,2998,1.971,2999,1.971]],["body/additional-documentation/inspector-vm.html",[11,0.685,16,0.011,18,1.04,63,0.755,67,2.872,69,1.736,79,1.106,126,0.208,141,0.967,203,0.007,204,0.009,205,0.007,229,1.297,242,3.345,312,1.935,316,2.14,326,1.975,327,1.325,334,2.977,347,1.69,378,2.26,867,4.586,1327,4.387,1526,4.877,1689,3.492,1733,4.292,1967,4.954,2148,4.954,2423,5.447,2434,5.447,2452,5.948,2453,4.016,2454,5.948,2664,3.492,2721,6.54,2725,6.54,2727,6.374,2729,6.54,2752,3.838,2753,3.838,2762,3.492,2765,6.12,2775,5.447,2795,3.655,3000,3.838,3001,3.838,3002,3.838,3003,3.838,3008,5.447,3072,5.447,3551,6.196,3552,7.971,3553,6.196,3554,6.196,3555,6.196,3556,6.196,3557,6.196,3558,6.196,3559,7.438,3560,6.196,3561,6.196,3562,6.196,3563,6.196,3564,6.196,3565,6.196,3566,6.196,3567,8.267,3568,6.196,3569,6.196,3570,6.196,3571,6.196,3572,6.196,3573,6.196,3574,6.196,3575,6.196,3576,6.196,3577,6.196]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["0",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["0.0.0.0",{"_index":3494,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["0.005",{"_index":281,"title":{},"body":{"classes/Buckets.html":{}}}],["0.01",{"_index":282,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["0.025",{"_index":283,"title":{},"body":{"classes/Buckets.html":{}}}],["0.05",{"_index":284,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["0.1",{"_index":285,"title":{},"body":{"classes/Buckets.html":{}}}],["0.25",{"_index":286,"title":{},"body":{"classes/Buckets.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":287,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.75",{"_index":2022,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.9",{"_index":2023,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.95",{"_index":2024,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.98",{"_index":2025,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.99",{"_index":2026,"title":{},"body":{"classes/Percentiles.html":{}}}],["0.999",{"_index":2027,"title":{},"body":{"classes/Percentiles.html":{}}}],["0/0",{"_index":2900,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":2897,"title":{},"body":{"unit-test.html":{}}}],["0/11",{"_index":2956,"title":{},"body":{"unit-test.html":{}}}],["0/19",{"_index":2892,"title":{},"body":{"unit-test.html":{}}}],["0/2",{"_index":2946,"title":{},"body":{"unit-test.html":{}}}],["0/20",{"_index":2955,"title":{},"body":{"unit-test.html":{}}}],["0/22",{"_index":2936,"title":{},"body":{"unit-test.html":{}}}],["0/25",{"_index":2891,"title":{},"body":{"unit-test.html":{}}}],["0/4",{"_index":2958,"title":{},"body":{"unit-test.html":{}}}],["0/41",{"_index":2962,"title":{},"body":{"unit-test.html":{}}}],["0/44",{"_index":2961,"title":{},"body":{"unit-test.html":{}}}],["0/5",{"_index":2966,"title":{},"body":{"unit-test.html":{}}}],["0/6",{"_index":2945,"title":{},"body":{"unit-test.html":{}}}],["0/7",{"_index":2898,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":288,"title":{},"body":{"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["1.0",{"_index":1174,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.0.0",{"_index":3487,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["1.3",{"_index":1830,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.5",{"_index":1928,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1/1",{"_index":2669,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":2713,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2681,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/4",{"_index":2932,"title":{},"body":{"unit-test.html":{}}}],["10",{"_index":291,"title":{},"body":{"classes/Buckets.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["100",{"_index":1320,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["100.0",{"_index":1305,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["1000",{"_index":354,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-csv.html":{}}}],["10000",{"_index":255,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["1000000",{"_index":514,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":3108,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["1000000000",{"_index":3080,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["1000192",{"_index":3523,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["100ms",{"_index":3109,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["102",{"_index":3082,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["11",{"_index":2790,"title":{},"body":{"index.html":{},"unit-test.html":{}}}],["11/11",{"_index":2672,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["11/12",{"_index":2952,"title":{},"body":{"unit-test.html":{}}}],["11/16",{"_index":2904,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":2360,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["12/13",{"_index":2912,"title":{},"body":{"unit-test.html":{}}}],["12/14",{"_index":2987,"title":{},"body":{"unit-test.html":{}}}],["12/18",{"_index":2970,"title":{},"body":{"unit-test.html":{}}}],["12/19",{"_index":2968,"title":{},"body":{"unit-test.html":{}}}],["12/30",{"_index":2937,"title":{},"body":{"unit-test.html":{}}}],["12345",{"_index":3066,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["127.0.0.1",{"_index":3162,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["127.0.0.2",{"_index":3164,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["127.0.0.3",{"_index":3166,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["127.0.0.4",{"_index":3047,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["13",{"_index":2791,"title":{},"body":{"index.html":{}}}],["13/13",{"_index":2899,"title":{},"body":{"unit-test.html":{}}}],["13/15",{"_index":2949,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":2704,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":2671,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":2919,"title":{},"body":{"unit-test.html":{}}}],["14/32",{"_index":2688,"title":{},"body":{"coverage.html":{}}}],["148/150",{"_index":2889,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":1169,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["15/15",{"_index":2690,"title":{},"body":{"coverage.html":{}}}],["15/33",{"_index":2684,"title":{},"body":{"coverage.html":{}}}],["153/157",{"_index":2885,"title":{},"body":{"unit-test.html":{}}}],["154/167",{"_index":2978,"title":{},"body":{"unit-test.html":{}}}],["158/171",{"_index":2975,"title":{},"body":{"unit-test.html":{}}}],["159/174",{"_index":2917,"title":{},"body":{"unit-test.html":{}}}],["15s",{"_index":3507,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["16",{"_index":2895,"title":{},"body":{"unit-test.html":{}}}],["16/16",{"_index":2707,"title":{},"body":{"coverage.html":{}}}],["16/44",{"_index":2929,"title":{},"body":{"unit-test.html":{}}}],["163/178",{"_index":2913,"title":{},"body":{"unit-test.html":{}}}],["17/17",{"_index":2950,"title":{},"body":{"unit-test.html":{}}}],["17/35",{"_index":2712,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":2979,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":2906,"title":{},"body":{"unit-test.html":{}}}],["18/23",{"_index":2921,"title":{},"body":{"unit-test.html":{}}}],["18/36",{"_index":2686,"title":{},"body":{"coverage.html":{}}}],["18/47",{"_index":2926,"title":{},"body":{"unit-test.html":{}}}],["19/27",{"_index":2924,"title":{},"body":{"unit-test.html":{}}}],["1999872",{"_index":3526,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["2",{"_index":2079,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["2.5",{"_index":289,"title":{},"body":{"classes/Buckets.html":{}}}],["2.6.0",{"_index":3450,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["2/19",{"_index":2927,"title":{},"body":{"unit-test.html":{}}}],["2/2",{"_index":2679,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["2/3",{"_index":2953,"title":{},"body":{"unit-test.html":{}}}],["2/4",{"_index":2933,"title":{},"body":{"unit-test.html":{}}}],["2/5",{"_index":2973,"title":{},"body":{"unit-test.html":{}}}],["2/6",{"_index":2969,"title":{},"body":{"unit-test.html":{}}}],["20",{"_index":2361,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["20/22",{"_index":2942,"title":{},"body":{"unit-test.html":{}}}],["20/38",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["2000128",{"_index":3528,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["201810201900_metrics.csv",{"_index":3356,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.005\",14",{"_index":3232,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.01\",14",{"_index":3233,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.025\",14",{"_index":3234,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.05\",14",{"_index":3235,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.1\",14",{"_index":3236,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.25\",14",{"_index":3237,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.5\",14",{"_index":3238,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_1\",14",{"_index":3239,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_10\",14",{"_index":3242,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_2.5\",14",{"_index":3240,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_5\",14",{"_index":3241,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"bucket_inf\",40",{"_index":3243,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"count\",40",{"_index":3244,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m15_rate\",38",{"_index":3245,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m1_rate\",38",{"_index":3246,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"m5_rate\",38",{"_index":3247,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"max\",2000128",{"_index":3248,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"mean\",700012.8",{"_index":3249,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"mean_rate\",26.455026455026456",{"_index":3250,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"min\",0",{"_index":3251,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p50\",999936",{"_index":3252,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p75\",1000192",{"_index":3253,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p95\",2000115.2",{"_index":3254,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p98\",2000128",{"_index":3255,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p99\",2000128",{"_index":3256,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"p999\",2000128",{"_index":3257,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"stddev\",563876.4091414141",{"_index":3258,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"\",\"requests3\",\"sum\",28000512csv",{"_index":3259,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.005\",0",{"_index":3176,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.01\",0",{"_index":3177,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.025\",0",{"_index":3178,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.05\",0",{"_index":3179,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.1\",0",{"_index":3180,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.25\",0",{"_index":3181,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.5\",0",{"_index":3182,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_1\",0",{"_index":3183,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_10\",0",{"_index":3186,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_2.5\",0",{"_index":3184,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_5\",0",{"_index":3185,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_inf\",10",{"_index":3187,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"count\",10",{"_index":3188,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m15_rate\",9",{"_index":3189,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m1_rate\",9",{"_index":3190,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"m5_rate\",9",{"_index":3191,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"max\",2999808",{"_index":3192,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"mean\",1399961.6",{"_index":3193,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"mean_rate\",6.622515994912551",{"_index":3194,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"min\",999936",{"_index":3195,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p50\",999936",{"_index":3196,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p75\",2000128",{"_index":3197,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p95\",2999808",{"_index":3198,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p98\",2999808",{"_index":3199,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p99\",2999808",{"_index":3200,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"p999\",2999808",{"_index":3201,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"stddev\",699209.9735144262",{"_index":3202,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests1\",\"sum\",13999616",{"_index":3203,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5",{"_index":3204,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5",{"_index":3205,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5",{"_index":3206,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5",{"_index":3207,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5",{"_index":3208,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5",{"_index":3209,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5",{"_index":3210,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_1\",5",{"_index":3211,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_10\",5",{"_index":3214,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5",{"_index":3212,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_5\",5",{"_index":3213,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_inf\",20",{"_index":3215,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"count\",20",{"_index":3216,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m15_rate\",19",{"_index":3217,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m1_rate\",19",{"_index":3218,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"m5_rate\",19",{"_index":3219,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"max\",2000128",{"_index":3220,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"mean\",850022.4",{"_index":3221,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"mean_rate\",13.227513227513228",{"_index":3222,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"min\",0",{"_index":3223,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p50\",999936",{"_index":3224,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p75\",1000192",{"_index":3225,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p95\",2000128",{"_index":3226,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p98\",2000128",{"_index":3227,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p99\",2000128",{"_index":3228,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"p999\",2000128",{"_index":3229,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"stddev\",587171.928872124",{"_index":3230,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020191953.380+00:00,\"requests\",\"requests2\",\"sum\",17000448",{"_index":3231,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.005\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3327,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.01\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3328,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.025\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3329,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.05\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3330,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3331,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.25\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3332,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3333,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3334,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_10\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3337,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_2.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3335,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3336,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3338,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"count\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3339,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3340,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3341,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3342,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"max\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3343,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"mean\",800006.4,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3344,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"mean_rate\",26.19515279863145,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3345,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3346,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3347,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p75\",1000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3348,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p95\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3349,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p98\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3350,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p99\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3351,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"p999\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3352,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"stddev\",516413.0421795807,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc",{"_index":3353,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"\",\"requests3\",\"sum\",32000256,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"example",{"_index":3354,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.005\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3271,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.01\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3272,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.025\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3273,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.05\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3274,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3275,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.25\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3276,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3277,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3278,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_10\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3281,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_2.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3279,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3280,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3282,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3283,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3284,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3285,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3286,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"max\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3287,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"mean\",1000012.8,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3288,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"mean_rate\",6.565989008975633,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3289,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3290,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p50\",1000064,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3291,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p75\",1000192,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3292,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p95\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3293,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p98\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3294,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p99\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3295,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"p999\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3296,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"stddev\",471374.3671220714,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3297,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests1\",\"sum\",10000128,\"timer\",type=\"metric\";host=\"127.0.0.1",{"_index":3298,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3299,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3300,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3301,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3302,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3303,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3304,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3305,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3306,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_10\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3309,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3307,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3308,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3310,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3311,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3312,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3313,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3314,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"max\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3315,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"mean\",900006.4,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3316,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"mean_rate\",13.106160994487947,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3317,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3318,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3319,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p75\",1000192,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3320,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p95\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3321,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p98\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3322,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p99\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3323,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"p999\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3324,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"stddev\",852194.9951649873,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3325,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020194618.877+00:00,\"requests\",\"requests2\",\"sum\",18000128,\"timer\",type=\"override_tag\";host=\"127.0.0.2",{"_index":3326,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.005\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3414,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.01\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3415,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.025\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3416,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.05\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3417,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3418,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.25\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3419,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3420,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3421,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_10\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3424,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_2.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3422,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3423,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3425,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"count\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3426,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3427,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3428,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3429,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3430,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"mean\",899987.2,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3431,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"mean_rate\",26.2639516212128,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3432,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"min\",0,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3433,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3434,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p75\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3435,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p95\",2950067.1999999955,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3436,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3437,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3438,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3439,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"stddev\",545386.4756426474,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc",{"_index":3440,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"\",\"requests3\",\"sum\",35999488,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"multi",{"_index":3441,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.005\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3358,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.01\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3359,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.025\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3360,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.05\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3361,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.1\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3362,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.25\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3363,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3364,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_1\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3365,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_10\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3368,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_2.5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3366,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_5\",3,\"timer\",\"metric\",\"127.0.0.1",{"_index":3367,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",\"metric\",\"127.0.0.1",{"_index":3369,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",\"metric\",\"127.0.0.1",{"_index":3370,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3371,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3372,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",\"metric\",\"127.0.0.1",{"_index":3373,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3374,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"mean\",999987.2,\"timer\",\"metric\",\"127.0.0.1",{"_index":3375,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"mean_rate\",6.578947368421053,\"timer\",\"metric\",\"127.0.0.1",{"_index":3376,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",\"metric\",\"127.0.0.1",{"_index":3377,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.1",{"_index":3378,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p75\",1250112,\"timer\",\"metric\",\"127.0.0.1",{"_index":3379,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p95\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3380,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3381,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3382,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.1",{"_index":3383,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"stddev\",942809.0458299838,\"timer\",\"metric\",\"127.0.0.1",{"_index":3384,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests1\",\"sum\",9999872,\"timer\",\"metric\",\"127.0.0.1",{"_index":3385,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.005\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3386,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.01\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3387,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.025\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3388,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.05\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3389,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.1\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3390,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.25\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3391,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3392,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_1\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3393,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_10\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3396,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_2.5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3394,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_5\",3,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3395,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3397,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3398,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3399,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3400,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3401,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"max\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3402,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"mean\",1049996.8,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3403,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"mean_rate\",13.1319758106064,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3404,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3405,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3406,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p75\",1749952,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3407,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p95\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3408,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p98\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3409,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p99\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3410,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"p999\",2000128,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3411,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"stddev\",604805.6067375874,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3412,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["20181020195009.787+00:00,\"requests\",\"requests2\",\"sum\",20999936,\"timer\",\"override_tag\",\"127.0.0.2",{"_index":3413,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["2019",{"_index":2817,"title":{},"body":{"license.html":{}}}],["21/28",{"_index":2918,"title":{},"body":{"unit-test.html":{}}}],["22",{"_index":2362,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["22/40",{"_index":2692,"title":{},"body":{"coverage.html":{}}}],["23/23",{"_index":2894,"title":{},"body":{"unit-test.html":{}}}],["23/41",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["24.25",{"_index":2369,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["24/46",{"_index":2730,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":2363,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["25);201810201900_metrics.csv",{"_index":3174,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["25/61",{"_index":2682,"title":{},"body":{"coverage.html":{}}}],["27/29",{"_index":2939,"title":{},"body":{"unit-test.html":{}}}],["27/45",{"_index":2689,"title":{},"body":{"coverage.html":{}}}],["283998208reporting",{"_index":3534,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["3",{"_index":1321,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-metrics.html":{}}}],["3/19",{"_index":2896,"title":{},"body":{"unit-test.html":{}}}],["3/3",{"_index":2668,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":2716,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":2928,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":2364,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["30.000",{"_index":1202,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["30/67",{"_index":2938,"title":{},"body":{"unit-test.html":{}}}],["30/69",{"_index":2935,"title":{},"body":{"unit-test.html":{}}}],["30s",{"_index":3509,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["31",{"_index":2964,"title":{},"body":{"unit-test.html":{}}}],["32",{"_index":2365,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["32/50",{"_index":2695,"title":{},"body":{"coverage.html":{}}}],["32bit",{"_index":1578,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":2680,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["34/34",{"_index":2709,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":2370,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["362",{"_index":3532,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["37/37",{"_index":2710,"title":{},"body":{"coverage.html":{}}}],["37/43",{"_index":2908,"title":{},"body":{"unit-test.html":{}}}],["38",{"_index":2925,"title":{},"body":{"unit-test.html":{}}}],["39/41",{"_index":2951,"title":{},"body":{"unit-test.html":{}}}],["3rd",{"_index":2766,"title":{},"body":{"index.html":{}}}],["4",{"_index":2080,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["4.390",{"_index":3085,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["4/11",{"_index":2944,"title":{},"body":{"unit-test.html":{}}}],["4/13",{"_index":2965,"title":{},"body":{"unit-test.html":{}}}],["4/16",{"_index":2959,"title":{},"body":{"unit-test.html":{}}}],["4/18",{"_index":2957,"title":{},"body":{"unit-test.html":{}}}],["4/4",{"_index":2678,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/5",{"_index":2699,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":2941,"title":{},"body":{"unit-test.html":{}}}],["40",{"_index":2366,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{}}}],["40/45",{"_index":2888,"title":{},"body":{"unit-test.html":{}}}],["4000000",{"_index":3530,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["41/43",{"_index":2947,"title":{},"body":{"unit-test.html":{}}}],["42/49",{"_index":2977,"title":{},"body":{"unit-test.html":{}}}],["43",{"_index":2687,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["43/46",{"_index":2902,"title":{},"body":{"unit-test.html":{}}}],["45",{"_index":2683,"title":{},"body":{"coverage.html":{},"overview.html":{},"unit-test.html":{}}}],["47/47",{"_index":2719,"title":{},"body":{"coverage.html":{}}}],["47/56",{"_index":2922,"title":{},"body":{"unit-test.html":{}}}],["48",{"_index":2711,"title":{},"body":{"coverage.html":{}}}],["48/48",{"_index":2708,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":290,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"unit-test.html":{}}}],["5/5",{"_index":2700,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1662,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["500",{"_index":936,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["50th",{"_index":1272,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["51,25",{"_index":2371,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["51/51",{"_index":2677,"title":{},"body":{"coverage.html":{}}}],["51/63",{"_index":2984,"title":{},"body":{"unit-test.html":{}}}],["52",{"_index":2722,"title":{},"body":{"coverage.html":{}}}],["52/52",{"_index":2667,"title":{},"body":{"coverage.html":{}}}],["52/64",{"_index":2983,"title":{},"body":{"unit-test.html":{}}}],["55",{"_index":2367,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["55/56",{"_index":2910,"title":{},"body":{"unit-test.html":{}}}],["56",{"_index":2368,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["56/91",{"_index":2697,"title":{},"body":{"coverage.html":{}}}],["58/58",{"_index":2670,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":871,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["6.0",{"_index":3460,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["6/116",{"_index":2963,"title":{},"body":{"unit-test.html":{}}}],["6/119",{"_index":2960,"title":{},"body":{"unit-test.html":{}}}],["6/12",{"_index":2981,"title":{},"body":{"unit-test.html":{}}}],["6/55",{"_index":2893,"title":{},"body":{"unit-test.html":{}}}],["6/57",{"_index":2954,"title":{},"body":{"unit-test.html":{}}}],["6/58",{"_index":2890,"title":{},"body":{"unit-test.html":{}}}],["6/6",{"_index":2675,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":2943,"title":{},"body":{"unit-test.html":{}}}],["60",{"_index":1166,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["60/60",{"_index":2674,"title":{},"body":{"coverage.html":{}}}],["61",{"_index":2696,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["62",{"_index":2930,"title":{},"body":{"unit-test.html":{}}}],["63",{"_index":2967,"title":{},"body":{"unit-test.html":{}}}],["64",{"_index":2694,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["64bit",{"_index":1576,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["67",{"_index":2940,"title":{},"body":{"unit-test.html":{}}}],["68",{"_index":2703,"title":{},"body":{"coverage.html":{}}}],["68/74",{"_index":2718,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":2903,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":2081,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["7/11",{"_index":2934,"title":{},"body":{"unit-test.html":{}}}],["7/14",{"_index":2980,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":2705,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["70",{"_index":2923,"title":{},"body":{"unit-test.html":{}}}],["72/86",{"_index":2916,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":1663,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{}}}],["75th",{"_index":1258,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["76/102",{"_index":2886,"title":{},"body":{"unit-test.html":{}}}],["78",{"_index":2920,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":1698,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["8/10",{"_index":2974,"title":{},"body":{"unit-test.html":{}}}],["8/13",{"_index":2931,"title":{},"body":{"unit-test.html":{}}}],["8/8",{"_index":2673,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["8/9",{"_index":2715,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":2698,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["8080",{"_index":3495,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["8086",{"_index":3479,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["81",{"_index":2982,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":2971,"title":{},"body":{"unit-test.html":{}}}],["82/93",{"_index":2914,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":2915,"title":{},"body":{"unit-test.html":{}}}],["85",{"_index":2985,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":2907,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":2948,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":2714,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["88/105",{"_index":2976,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":2887,"title":{},"body":{"unit-test.html":{}}}],["9",{"_index":2789,"title":{},"body":{"index.html":{}}}],["9'].sort",{"_index":2082,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["9/11",{"_index":2972,"title":{},"body":{"unit-test.html":{}}}],["9/12",{"_index":2909,"title":{},"body":{"unit-test.html":{}}}],["9/27",{"_index":2702,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":2676,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2905,"title":{},"body":{"unit-test.html":{}}}],["9091",{"_index":2271,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["91",{"_index":2717,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["92",{"_index":2911,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":2901,"title":{},"body":{"unit-test.html":{}}}],["93/110",{"_index":2988,"title":{},"body":{"unit-test.html":{}}}],["94/111",{"_index":2986,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":1664,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95th",{"_index":1261,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["97",{"_index":2884,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":1665,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["98th",{"_index":1263,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["99",{"_index":1666,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["99.9",{"_index":1667,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9th",{"_index":1265,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["999936",{"_index":3520,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["99th",{"_index":1267,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["9_",{"_index":2074,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_",{"_index":2078,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_${field",{"_index":2206,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["_index",{"_index":1129,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["_type",{"_index":1131,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["a.localecompare(b",{"_index":2083,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["above",{"_index":2843,"title":{},"body":{"license.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["abstract",{"_index":9,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetric.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{}}}],["abstracting",{"_index":2297,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["abstraction",{"_index":492,"title":{},"body":{"classes/Clock.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Logger.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":1611,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accessors",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{},"classes/HdrSnapshot.html":{}}}],["according",{"_index":497,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accordingly",{"_index":858,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/SpaceHistory.html":{}}}],["action",{"_index":2866,"title":{},"body":{"license.html":{}}}],["active_handles",{"_index":3563,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["active_requests",{"_index":3564,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["actual",{"_index":584,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":1357,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["add",{"_index":1569,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["add(value",{"_index":1573,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration",{"_index":2592,"title":{},"body":{"classes/StopWatch.html":{}}}],["added",{"_index":1353,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["adding",{"_index":1226,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["additional",{"_index":2998,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{}}],["additionalfields",{"_index":2192,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["addlistener",{"_index":1815,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistry",{"_index":1341,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["addmetricregistry(metricregistry",{"_index":1344,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["address",{"_index":2258,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["adds",{"_index":971,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["addtags",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["addtags(tags",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["admin",{"_index":3476,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["afterreport",{"_index":1364,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["afterreport(ctx",{"_index":1428,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["afterwards",{"_index":1431,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["again",{"_index":1786,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["aliases",{"_index":2874,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_in_one_column",{"_index":618,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{}}}],["allocated",{"_index":2472,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["allocations",{"_index":3129,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["alpha",{"_index":1145,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_samplerate",{"_index":1149,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_samplerate",{"_index":1150,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_samplerate",{"_index":1147,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_samplerate",{"_index":1148,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_samplerate",{"_index":1151,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_samplerate",{"_index":1152,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["always",{"_index":522,"title":{},"body":{"classes/Clock.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{}}}],["amount",{"_index":1752,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["amqp",{"_index":2768,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["analyzing",{"_index":3015,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["and/or",{"_index":2835,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":1483,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["any,handle",{"_index":2301,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["anymetric",{"_index":142,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.getbuckets",{"_index":264,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["anymetric.getcounts",{"_index":265,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["anymetric.getgroup",{"_index":143,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getmetadatamap",{"_index":145,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getname",{"_index":147,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.getsnapshot",{"_index":2314,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.gettags",{"_index":146,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anymetric.hasownproperty(\"snapshot",{"_index":2315,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["anymetric.name",{"_index":150,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["anything",{"_index":3490,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["api",{"_index":2763,"title":{},"body":{"index.html":{}}}],["apiversion",{"_index":3459,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["app",{"_index":3512,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["appended",{"_index":2250,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{}}}],["appendfile",{"_index":878,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["applicable",{"_index":569,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["application",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["applied",{"_index":1365,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["args",{"_index":1700,"title":{},"body":{"interfaces/Logger.html":{}}}],["argument",{"_index":1693,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["arguments",{"_index":1133,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["arising",{"_index":2869,"title":{},"body":{"license.html":{}}}],["around",{"_index":2751,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["arr",{"_index":1021,"title":{},"body":{"classes/DefaultSender.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":1938,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":1939,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":401,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["array(count",{"_index":256,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["array.isarray(anymetric.buckets",{"_index":266,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["arraylength",{"_index":3061,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylength.getvalue();histogram",{"_index":3071,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylengthgauge",{"_index":3056,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":3062,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["assigning",{"_index":2030,"title":{},"body":{"classes/Percentiles.html":{}}}],["associate",{"_index":1705,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["associated",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"license.html":{}}}],["assumes",{"_index":504,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":371,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["async.asyncqueue",{"_index":853,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["async.queue((task",{"_index":898,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["asynchronously",{"_index":2612,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribute",{"_index":1614,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["authors",{"_index":2859,"title":{},"body":{"license.html":{}}}],["available",{"_index":1697,"title":{},"body":{"interfaces/Logger.html":{},"classes/SpaceHistory.html":{},"index.html":{}}}],["availablesize",{"_index":2424,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["average",{"_index":1144,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.ts",{"_index":1141,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:105",{"_index":1179,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:113",{"_index":1162,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:136",{"_index":1182,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:146",{"_index":1185,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:157",{"_index":1184,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:171",{"_index":1199,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:187",{"_index":1186,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":2011,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":2012,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:38",{"_index":2014,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:47",{"_index":2013,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:59",{"_index":1167,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":1168,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":1172,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":1173,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:63",{"_index":1170,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:64",{"_index":1171,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:73",{"_index":1163,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:81",{"_index":1176,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:89",{"_index":1178,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:97",{"_index":1175,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["averages",{"_index":1191,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["avg",{"_index":1153,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":379,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["b",{"_index":258,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["back",{"_index":1510,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["base",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["based",{"_index":1232,"title":{},"body":{"interfaces/Groupable.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["basemetric",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["basemetric#tojson",{"_index":1225,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["basemetric.counter",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:217",{"_index":1977,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:225",{"_index":1980,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:233",{"_index":1979,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:241",{"_index":1982,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:249",{"_index":1978,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:257",{"_index":1981,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:265",{"_index":1983,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:275",{"_index":1996,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:279",{"_index":1995,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:283",{"_index":2000,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:289",{"_index":2005,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:294",{"_index":1997,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:298",{"_index":2006,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:303",{"_index":1993,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:307",{"_index":2003,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:312",{"_index":1994,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:316",{"_index":2004,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:321",{"_index":1999,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:325",{"_index":1998,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:329",{"_index":2007,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:334",{"_index":2008,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:339",{"_index":1992,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:344",{"_index":2001,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:349",{"_index":2002,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:354",{"_index":2010,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:367",{"_index":2009,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basename",{"_index":1056,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basereporter",{"_index":1751,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["basic",{"_index":3002,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["batch",{"_index":3010,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["before",{"_index":1001,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["beforereport",{"_index":696,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["beforereport(ctx",{"_index":1427,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["beginning",{"_index":2401,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["behavior",{"_index":592,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["between",{"_index":635,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/Percentiles.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["body",{"_index":1105,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["body.length",{"_index":1109,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["bookings",{"_index":3006,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["boolean",{"_index":546,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["boot",{"_index":2779,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":2802,"title":{},"body":{"index.html":{}}}],["bootstrapgenerate",{"_index":2796,"title":{},"body":{"index.html":{}}}],["boundaries",{"_index":211,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["boundaries.foreach((boundary",{"_index":2033,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundaries.sort((a",{"_index":2032,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundaries=[0.01",{"_index":2031,"title":{},"body":{"classes/Percentiles.html":{}}}],["boundary",{"_index":233,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":2805,"title":{},"body":{"index.html":{}}}],["branches",{"_index":2881,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":809,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucket",{"_index":260,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["bucketcount",{"_index":2227,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketcounting",{"_index":206,"title":{"interfaces/BucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bucketcount}${timestamp",{"_index":2231,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketfields",{"_index":710,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucketfields.bucket_inf",{"_index":713,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bucketfields[`bucket_${bucket",{"_index":712,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["buckets",{"_index":227,"title":{"classes/Buckets.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["buckets(boundaries",{"_index":257,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buckets(metric.buckets",{"_index":269,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buckets=new",{"_index":1319,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["bucketstrings",{"_index":2225,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketstrings.join('\\n",{"_index":2232,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["bucketstrings.push",{"_index":2229,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["buckettocountmap",{"_index":261,"title":{"interfaces/BucketToCountMap.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bucketwidth",{"_index":251,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["buffer",{"_index":3127,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["build",{"_index":1043,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["builder",{"_index":3470,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["buildheaders",{"_index":736,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["building",{"_index":1048,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["buildprometheustags",{"_index":2170,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["buildrow",{"_index":790,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["builds",{"_index":419,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["built",{"_index":687,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["bulk",{"_index":1104,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["business",{"_index":2759,"title":{},"body":{"index.html":{}}}],["c",{"_index":1107,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{}}}],["calculated",{"_index":1192,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["calculates",{"_index":1142,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":658,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableMetered.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["callback",{"_index":900,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["callback(null",{"_index":948,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["callcount",{"_index":3088,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get15minuterate",{"_index":3093,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get1minuterate",{"_index":3097,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.get5minuterate",{"_index":3095,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.getcount",{"_index":3091,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.getmeanrate();timer",{"_index":3098,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callcount.mark(1",{"_index":3090,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["called",{"_index":590,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["calling",{"_index":824,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["calls",{"_index":215,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["callstats",{"_index":3099,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.addduration(100",{"_index":3101,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get15minuterate",{"_index":3103,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get1minuterate",{"_index":3105,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.get5minuterate",{"_index":3104,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getcount",{"_index":3102,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getmeanrate",{"_index":3106,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.getsnapshot",{"_index":3107,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.newstopwatch",{"_index":3111,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.time",{"_index":3115,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["callstats.timeasync(async",{"_index":3117,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["can't",{"_index":2180,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["canbereported",{"_index":2054,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["canhandlemessage",{"_index":1410,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["canreport",{"_index":2183,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["cansendmessagestoworkers",{"_index":2133,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["capacity",{"_index":965,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-metrics.html":{}}}],["carbon",{"_index":307,"title":{"additional-documentation/inspector-carbon.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["carbon/lib/metrics/carbonmetricreporter.ts",{"_index":300,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":299,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tags",{"_index":413,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreporter",{"_index":348,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{}}}],["carbonmetricreporteroptions",{"_index":344,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["case",{"_index":807,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["catch",{"_index":910,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["catch((cause",{"_index":2146,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["catch((err",{"_index":418,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/StopWatch.html":{}}}],["catch((error",{"_index":2120,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["cause",{"_index":2148,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-vm.html":{}}}],["causes",{"_index":3041,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["causing",{"_index":1989,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["certain",{"_index":1045,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":566,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["changes",{"_index":1707,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["character",{"_index":2076,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["characters",{"_index":2068,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["charge",{"_index":2822,"title":{},"body":{"license.html":{}}}],["check",{"_index":847,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{}}}],["checking",{"_index":2797,"title":{},"body":{"index.html":{}}}],["checks",{"_index":1407,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["child",{"_index":1916,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["choose",{"_index":1356,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["cint64\").int64",{"_index":1585,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":2862,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["class's",{"_index":690,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"overview.html":{}}}],["clb",{"_index":899,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["client",{"_index":328,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["client(clientoptions",{"_index":1102,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["clientoptions",{"_index":1035,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["clock",{"_index":355,"title":{"classes/Clock.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["clock:48",{"_index":2562,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=this.defaultclock",{"_index":1898,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["cluster",{"_index":552,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["cluster.ismaster",{"_index":3545,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["cluster.isworker",{"_index":935,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["cluster.worker",{"_index":574,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["cluster.worker.send",{"_index":575,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["cluster.worker.send(message",{"_index":576,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["cluster.workers",{"_index":940,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["clustering",{"_index":548,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["clusteroptions",{"_index":359,"title":{"interfaces/ClusterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["clusteroptions.enabled",{"_index":1399,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.eventreceiver.on(\"message",{"_index":1401,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.getworkers",{"_index":2110,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["clusteroptions.sendmetricstomaster",{"_index":1400,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["clusteroptions.sendtoworker",{"_index":2134,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["clusteroptions.workerresponsetimeout",{"_index":2119,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co",{"_index":2100,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co.eventreceiver.on('message",{"_index":2104,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co.sendmetricstomaster",{"_index":2103,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["co?.enabled",{"_index":2101,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["code",{"_index":2261,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"index.html":{},"additional-documentation/inspector-csv.html":{}}}],["code(200",{"_index":3502,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["codes",{"_index":3152,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["collect",{"_index":3022,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["collection",{"_index":210,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["collection.length",{"_index":1621,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.size",{"_index":1624,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collectmetrics",{"_index":3538,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["collector",{"_index":3551,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["collectors",{"_index":2764,"title":{},"body":{"index.html":{}}}],["collects",{"_index":3023,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["column",{"_index":606,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["columns",{"_index":631,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["columns.ts",{"_index":3355,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["columntype",{"_index":608,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":2580,"title":{},"body":{"classes/StopWatch.html":{}}}],["combinations",{"_index":1103,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["combined",{"_index":310,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["command",{"_index":864,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["comments",{"_index":2197,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["common",{"_index":526,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["commonly",{"_index":13,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["commontags",{"_index":3467,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["compatibility",{"_index":868,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"index.html":{}}}],["compatible",{"_index":551,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["complete",{"_index":1520,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["component",{"_index":521,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["compose",{"_index":2778,"title":{},"body":{"index.html":{}}}],["computes",{"_index":3463,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["conditions",{"_index":2842,"title":{},"body":{"license.html":{}}}],["config",{"_index":983,"title":{},"body":{"classes/DefaultSender.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-influx.html":{}}}],["configoptions",{"_index":3458,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["configurable",{"_index":3017,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["configuration",{"_index":928,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["configure",{"_index":3167,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["configured",{"_index":2267,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["connected",{"_index":3048,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["connection",{"_index":2870,"title":{},"body":{"license.html":{}}}],["considering",{"_index":2358,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["console",{"_index":352,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["console.log(\"reporting",{"_index":3500,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["console.log(`added",{"_index":3119,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["console.log(`removed",{"_index":3120,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["console.log(error",{"_index":2121,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["const",{"_index":141,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["constant",{"_index":1384,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor",{"_index":278,"title":{},"body":{"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["constructor(alpha",{"_index":1160,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(boundaries",{"_index":279,"title":{},"body":{"classes/Buckets.html":{},"classes/Percentiles.html":{}}}],["constructor(clock",{"_index":2567,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(config",{"_index":987,"title":{},"body":{"classes/DefaultSender.html":{}}}],["constructor(initial",{"_index":1571,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listener",{"_index":1959,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(maxsize",{"_index":963,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":1773,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["constructor(name",{"_index":1973,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"additional-documentation/inspector-metrics.html":{}}}],["constructor(nanosecondsperunit",{"_index":2645,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(options",{"_index":1397,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor(reference",{"_index":1252,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["constructor(spacename",{"_index":2427,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["constructor(tags",{"_index":1382,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["constructor(undefined",{"_index":841,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["constructor(values",{"_index":2336,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["contained",{"_index":2523,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["container",{"_index":131,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["container.ts",{"_index":1702,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["container.ts:19",{"_index":1719,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:29",{"_index":1718,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:39",{"_index":1720,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:50",{"_index":1721,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:56",{"_index":1704,"title":{},"body":{"interfaces/Metadata.html":{}}}],["contains",{"_index":242,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["content",{"_index":2282,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["context",{"_index":1378,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["context.ts",{"_index":1965,"title":{},"body":{"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"coverage.html":{}}}],["context.ts:6",{"_index":2016,"title":{},"body":{"interfaces/OverallReportContext.html":{}}}],["contract",{"_index":2867,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":151,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{}}}],["convenient",{"_index":176,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["converted",{"_index":2249,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["converts",{"_index":1582,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":2643,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(value",{"_index":2647,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copies",{"_index":2837,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1606,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{}}}],["copyright",{"_index":2816,"title":{},"body":{"license.html":{}}}],["correct",{"_index":2214,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["corresponding",{"_index":234,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["count",{"_index":212,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["countable",{"_index":237,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["counter",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["counter#getcount",{"_index":1651,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter(name",{"_index":1894,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.getcount",{"_index":422,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counter.getgroup",{"_index":426,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counter.getname",{"_index":428,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["counterctx",{"_index":1442,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counterctx.metrics",{"_index":1448,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counterresults",{"_index":1454,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["counters",{"_index":672,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["countertype",{"_index":2089,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["counting",{"_index":230,"title":{"interfaces/Counting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrSnapshot.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{}}}],["counts",{"_index":220,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["counts[boundary",{"_index":2228,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["counts[bucket",{"_index":274,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["count}${timestamp}\\n",{"_index":2234,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["coverage",{"_index":2663,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["cpu_usage",{"_index":3561,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["created",{"_index":849,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["createdir",{"_index":886,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["createmetricsetreportcontext",{"_index":1474,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createmetricsetreportcontext(ctx",{"_index":1443,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createoverallreportcontext",{"_index":1473,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["createreportingcontext",{"_index":1435,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["creates",{"_index":247,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["creating",{"_index":3147,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["crypto",{"_index":2042,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["csv",{"_index":645,"title":{"additional-documentation/inspector-csv.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts",{"_index":581,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:58",{"_index":1213,"title":{},"body":{"interfaces/Fields.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:88",{"_index":589,"title":{},"body":{"interfaces/CsvFileWriter.html":{}}}],["csv/lib/metrics/csvmetricreporter.ts:98",{"_index":595,"title":{},"body":{"interfaces/CsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts",{"_index":834,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:101",{"_index":844,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:109",{"_index":843,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:148",{"_index":855,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:194",{"_index":876,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:214",{"_index":875,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:239",{"_index":862,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:259",{"_index":873,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:83",{"_index":852,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csv/lib/metrics/defaultcsvfilewriter.ts:92",{"_index":850,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["csvfilewriter",{"_index":580,"title":{"interfaces/CsvFileWriter.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{}}}],["csvmetricreporter",{"_index":620,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["csvmetricreporter.message_type",{"_index":681,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["csvmetricreporteroptions",{"_index":621,"title":{"interfaces/CsvMetricReporterOptions.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"coverage.html":{}}}],["ctx",{"_index":398,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.canbereported",{"_index":2159,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.date",{"_index":1128,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["ctx.date.gettime",{"_index":1486,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.fields",{"_index":2160,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.logmetadata",{"_index":1658,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.group",{"_index":1656,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.measurement",{"_index":1655,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.logmetadata.tags",{"_index":1657,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["ctx.metrics",{"_index":1480,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ctx.registry",{"_index":1126,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["ctx.result",{"_index":2154,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["ctx.result}${workerresponses.join('\\n",{"_index":2126,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ctx.type",{"_index":1127,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["current",{"_index":226,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["currentdir",{"_index":835,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["currentfilename",{"_index":836,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["currently",{"_index":1966,"title":{},"body":{"interfaces/MetricSetReportContext.html":{}}}],["custom",{"_index":3170,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["customtags",{"_index":1505,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["customtags[key",{"_index":1508,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["d",{"_index":2806,"title":{},"body":{"index.html":{}}}],["dailyindex",{"_index":1057,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["damages",{"_index":2863,"title":{},"body":{"license.html":{}}}],["data",{"_index":735,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["database",{"_index":999,"title":{},"body":{"classes/DefaultSender.html":{},"additional-documentation/inspector-influx.html":{}}}],["databases",{"_index":1017,"title":{},"body":{"classes/DefaultSender.html":{}}}],["databases.find((value",{"_index":1020,"title":{},"body":{"classes/DefaultSender.html":{}}}],["databases.localecompare(database",{"_index":1019,"title":{},"body":{"classes/DefaultSender.html":{}}}],["date",{"_index":374,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date(point.timestamp",{"_index":1532,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["date(this.options.clock.time().milliseconds",{"_index":1441,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["date(timestamp",{"_index":411,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["date,group,name,field,value",{"_index":3175,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date,group,name,field,value,type,tag_type,tag_host,tag_special_tag",{"_index":3357,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date,group,name,field,value,type,tags",{"_index":3270,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["date.getdate",{"_index":1059,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.getfullyear",{"_index":1064,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.getmonth",{"_index":1062,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["date.now",{"_index":518,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["dateformat",{"_index":640,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["datestr",{"_index":698,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["day",{"_index":1058,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["dayprefix",{"_index":1060,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["dayprefix}${day",{"_index":1066,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["db",{"_index":984,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["dbconfig",{"_index":3474,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["dd",{"_index":1055,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["deal",{"_index":2826,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2871,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1690,"title":{},"body":{"interfaces/Logger.html":{}}}],["decimal",{"_index":1316,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["default",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["defaultclock",{"_index":1811,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultclusteroptions",{"_index":311,"title":{"classes/DefaultClusterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["defaultcsvfilewriter",{"_index":833,"title":{"classes/DefaultCsvFileWriter.html":{}},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["defaultcsvfilewriteroptions",{"_index":842,"title":{"interfaces/DefaultCsvFileWriterOptions.html":{}},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"coverage.html":{}}}],["defaultdocumentbuilder",{"_index":1067,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["defaultnamefactory",{"_index":1810,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultprometheusclusteroptions",{"_index":926,"title":{"classes/DefaultPrometheusClusterOptions.html":{}},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["defaultreservoir",{"_index":953,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defaultsender",{"_index":979,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["defaultsender(dbconfig",{"_index":3480,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["defaulttypedeterminator",{"_index":1051,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["defined",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["defines",{"_index":994,"title":{},"body":{"classes/DefaultSender.html":{}}}],["defining",{"_index":209,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["definition",{"_index":2319,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["delay",{"_index":3558,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["delegation",{"_index":582,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["delete",{"_index":1822,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["delimiter",{"_index":634,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["depend",{"_index":1741,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["dependencies",{"_index":1328,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["dependency",{"_index":2793,"title":{},"body":{"index.html":{}}}],["depends",{"_index":1201,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"additional-documentation/inspector-csv.html":{}}}],["deployment",{"_index":3009,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["deprecated",{"_index":1829,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["depsrelease",{"_index":2798,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["description=null",{"_index":1892,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["description}\\n",{"_index":2200,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["desired",{"_index":1408,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["determine",{"_index":493,"title":{},"body":{"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["determinebetween",{"_index":3542,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["determined",{"_index":2181,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["determines",{"_index":134,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-csv.html":{}}}],["determining",{"_index":890,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["development",{"_index":2773,"title":{},"body":{"index.html":{}}}],["deviation",{"_index":1275,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":510,"title":{},"body":{"classes/Clock.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(one",{"_index":2742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["difference",{"_index":1189,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["different",{"_index":1770,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["dir",{"_index":846,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["directgauge",{"_index":1803,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["directly",{"_index":1516,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["directory",{"_index":891,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["disable",{"_index":331,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["disabled",{"_index":2269,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["disabledclusteroptions",{"_index":578,"title":{"classes/DisabledClusterOptions.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["disables",{"_index":577,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["disabling",{"_index":3446,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["distribute",{"_index":2833,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":249,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["distribution",{"_index":3019,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["dividing",{"_index":1193,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["docker",{"_index":2777,"title":{},"body":{"index.html":{}}}],["docs",{"_index":2800,"title":{},"body":{"index.html":{}}}],["document",{"_index":304,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["documentation",{"_index":2664,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["documents",{"_index":3466,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["doesn't",{"_index":885,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["double",{"_index":627,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["due",{"_index":3535,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["duration",{"_index":509,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["durations",{"_index":2565,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["during",{"_index":409,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["dynamic",{"_index":1821,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["e",{"_index":1292,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["e.g",{"_index":214,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["each",{"_index":567,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["each_in_own_column",{"_index":619,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{}}}],["elapsed",{"_index":501,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elastic/elasticsearch",{"_index":1044,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearch",{"_index":1040,"title":{"additional-documentation/inspector-elasticsearch.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearch/lib/metrics/elasticsearchmetricreporter.ts",{"_index":1033,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["elasticsearchmetricreporter",{"_index":1034,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.dailyindex('metric",{"_index":1100,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.dailyindex(`metrics",{"_index":3454,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.defaultdocumentbuilder",{"_index":1099,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.defaulttypedeterminator",{"_index":1101,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["elasticsearchmetricreporter.getcountervalues(metric",{"_index":1069,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getgaugevalue(metric",{"_index":1073,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gethistogramvalues(metric",{"_index":1070,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmetervalues(metric",{"_index":1071,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmonotonecountervalues(metric",{"_index":1068,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gettimervalues(metric",{"_index":1072,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporteroption",{"_index":1032,"title":{"interfaces/ElasticsearchMetricReporterOption.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{}}}],["element",{"_index":3126,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["embedded",{"_index":2595,"title":{},"body":{"classes/StopWatch.html":{}}}],["emitcomments",{"_index":2097,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["emitted",{"_index":2248,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{}}}],["emitter",{"_index":2298,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":1280,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["enabled",{"_index":527,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["enables",{"_index":571,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["encodeuricomponent(getmetricdescription(metric",{"_index":810,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["encoding",{"_index":887,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["end",{"_index":245,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["ended",{"_index":3011,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["endings",{"_index":888,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["endpoint",{"_index":3484,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["ensure",{"_index":856,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["ensures",{"_index":998,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{}}}],["entry",{"_index":1377,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["entry.ts",{"_index":1747,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{}}}],["enum",{"_index":616,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["enumeration",{"_index":2048,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":2734,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env/boot.sh",{"_index":2782,"title":{},"body":{"index.html":{}}}],["env/reset.sh",{"_index":2784,"title":{},"body":{"index.html":{}}}],["environment:./test",{"_index":2781,"title":{},"body":{"index.html":{}}}],["equal",{"_index":2036,"title":{},"body":{"classes/Percentiles.html":{}}}],["equals",{"_index":2651,"title":{},"body":{"classes/TimeUnit.html":{}}}],["err",{"_index":414,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/StopWatch.html":{}}}],["error",{"_index":1309,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/Logger.html":{},"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["error(\"module",{"_index":1324,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["error(\"sender",{"_index":1518,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error('boundaries",{"_index":2034,"title":{},"body":{"classes/Percentiles.html":{}}}],["error('invalid",{"_index":1523,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["error(`error",{"_index":1121,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["errorcount",{"_index":3038,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.getcount",{"_index":3043,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.increment",{"_index":3042,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.increment(1",{"_index":3040,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errorcount.reset();event",{"_index":3044,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["errors",{"_index":1042,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["eslint",{"_index":330,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["eslint/no",{"_index":335,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["eslint/restrict",{"_index":1116,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["etc",{"_index":1047,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["evaluation_interval",{"_index":3508,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["event",{"_index":312,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-vm.html":{}}}],["event(\"application_started",{"_index":3049,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["event.gettime",{"_index":375,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["event.getvalue",{"_index":1521,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["eventbus",{"_index":2093,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["eventemitter",{"_index":2043,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["eventloop",{"_index":3559,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["eventloop.stop",{"_index":3576,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["eventreceiver",{"_index":528,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["events",{"_index":213,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["everything",{"_index":236,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["example",{"_index":23,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["example.ts",{"_index":3151,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["examples",{"_index":2771,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":2169,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["exclude.includes(normalizedkey",{"_index":2175,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["exclude.sort((a",{"_index":2171,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["executable",{"_index":2465,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["execute",{"_index":2785,"title":{},"body":{"index.html":{}}}],["execution",{"_index":3130,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["exist",{"_index":857,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["existing",{"_index":1000,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exponential",{"_index":277,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponential(initial",{"_index":293,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentially",{"_index":296,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentiallyweightedmovingaverage",{"_index":1139,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":137,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-csv.html":{}}}],["exported",{"_index":614,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["exporting",{"_index":3262,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["exportmode",{"_index":617,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["exportmode.all_in_one_column",{"_index":649,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["exportmode.each_in_own_column",{"_index":739,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["exposed",{"_index":3483,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["exposes",{"_index":3485,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["express",{"_index":2850,"title":{},"body":{"license.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["expressions",{"_index":1117,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["extend",{"_index":1639,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["extending",{"_index":339,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["extends",{"_index":171,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{}}}],["extension",{"_index":1049,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["extractor",{"_index":1626,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":2610,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":294,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factory",{"_index":1812,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["failures",{"_index":346,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["false",{"_index":149,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["fashion",{"_index":866,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["feature",{"_index":560,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["features",{"_index":2754,"title":{},"body":{"index.html":{}}}],["few",{"_index":3030,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["field",{"_index":596,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["fieldnameprefix",{"_index":1535,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields",{"_index":175,"title":{"interfaces/Fields.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["fields.count",{"_index":2194,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":1538,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_rate",{"_index":1557,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_rate",{"_index":1558,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_rate",{"_index":1559,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":1545,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":1546,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_rate",{"_index":1560,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":1547,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":1548,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":1549,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":1550,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":1551,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":1552,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":1553,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":1554,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}value",{"_index":1541,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["fields[field",{"_index":704,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["fieldstr",{"_index":2204,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["figures",{"_index":1315,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["figures=3",{"_index":1314,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["file.also",{"_index":3442,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["filename",{"_index":851,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["files",{"_index":646,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"index.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["filter",{"_index":613,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["filter((metric",{"_index":1481,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["filter((result",{"_index":1489,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["filter(metricregistry.iscounter",{"_index":1834,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgauge",{"_index":1840,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":1843,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismeter",{"_index":1846,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecounter",{"_index":1852,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istimer",{"_index":1849,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(null",{"_index":767,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filtered",{"_index":760,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["filteredkeys",{"_index":763,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredkeys.add(key",{"_index":768,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterednames",{"_index":741,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterednames.foreach((metadataname",{"_index":744,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredtags",{"_index":750,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filteredtags.foreach((tag",{"_index":753,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filtering",{"_index":770,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filterkeys",{"_index":762,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["filters",{"_index":757,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["finally",{"_index":1439,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["finds",{"_index":1936,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["finished",{"_index":597,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["firemetricadded",{"_index":1944,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved",{"_index":1948,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":505,"title":{},"body":{"classes/Clock.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["fitness",{"_index":2855,"title":{},"body":{"license.html":{}}}],["flushevents",{"_index":383,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["fo",{"_index":2333,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{}}}],["folder",{"_index":2772,"title":{},"body":{"index.html":{}}}],["following",{"_index":2359,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((metadatamaparray",{"_index":777,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["foreach((metrictagsarray",{"_index":787,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["foreach((registration",{"_index":1835,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["foreach((value",{"_index":711,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["forked",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["format",{"_index":639,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["forward",{"_index":2094,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["forwards",{"_index":2150,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["found",{"_index":1325,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["fr",{"_index":2803,"title":{},"body":{"index.html":{}}}],["frame",{"_index":1740,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["free",{"_index":2821,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":2760,"title":{},"body":{"index.html":{}}}],["fs",{"_index":880,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["function",{"_index":139,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["function's",{"_index":2607,"title":{},"body":{"classes/StopWatch.html":{}}}],["functionality",{"_index":2801,"title":{},"body":{"index.html":{}}}],["functions",{"_index":15,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["furnished",{"_index":2840,"title":{},"body":{"license.html":{}}}],["future",{"_index":1706,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["g",{"_index":2075,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["garbage",{"_index":3024,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["gather",{"_index":3124,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["gathers",{"_index":708,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["gauge",{"_index":313,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["gauge's",{"_index":1659,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getgroup",{"_index":434,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getname",{"_index":435,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["gauge.getvalue",{"_index":433,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gauge.ts",{"_index":1610,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":1634,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":2399,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugectx",{"_index":1444,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gaugectx.metrics",{"_index":1455,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gaugeregistration",{"_index":1805,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gaugeresults",{"_index":1457,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["gauges",{"_index":673,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["gaugetype",{"_index":2090,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gc",{"_index":2727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-vm.html":{}}}],["gc.stop",{"_index":3575,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["generalized",{"_index":1122,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["generate",{"_index":1809,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["generatename",{"_index":1941,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generaterandomid",{"_index":2136,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["generates",{"_index":120,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["generator",{"_index":3464,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["get15minuterate",{"_index":1725,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get1minuterate",{"_index":1726,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get5minuterate",{"_index":1727,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentile",{"_index":1241,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentile",{"_index":1242,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentile",{"_index":1243,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentile",{"_index":1244,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentile",{"_index":1245,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getallmetadatakeys",{"_index":771,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["getalltagkeys",{"_index":782,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["getalpha",{"_index":1156,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage",{"_index":1157,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":1183,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbuckets",{"_index":223,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["getbyname",{"_index":1940,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":241,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["getcounter",{"_index":1861,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":1831,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounters",{"_index":1832,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname",{"_index":1860,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountervalues",{"_index":1077,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getcounts",{"_index":224,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{}}}],["getdefaultclock",{"_index":1826,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescription",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getdescription(metric",{"_index":2211,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["geteventstring",{"_index":2130,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["geteventstring>(event",{"_index":2128,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getfieldnameprefix",{"_index":1563,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getfirstbyname",{"_index":1937,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauge",{"_index":1863,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":1838,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauges",{"_index":1839,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname",{"_index":1862,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugevalue",{"_index":1078,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getgroup",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["gethistogram",{"_index":1866,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":1841,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistograms",{"_index":1842,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname",{"_index":1865,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramvalues",{"_index":1080,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getlog",{"_index":362,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["getmax",{"_index":1246,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":1247,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanrate",{"_index":1728,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["getmeasurementname",{"_index":1564,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["getmedian",{"_index":1248,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmetadata",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["getmetadata(name",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getmetadatamap",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getmeter",{"_index":1868,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":1844,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeters",{"_index":1845,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname",{"_index":1867,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetervalues",{"_index":1092,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getmetric",{"_index":1858,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricbuckets",{"_index":2044,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricbuckets(metric",{"_index":267,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["getmetriccounts",{"_index":2045,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetriccounts(metric",{"_index":271,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["getmetricdescription",{"_index":598,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricdescription(metric",{"_index":157,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetricgroup",{"_index":599,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricgroup(metric",{"_index":160,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetriclist",{"_index":1854,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{}}}],["getmetricmetadata",{"_index":600,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricmetadata(metric",{"_index":166,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetricname",{"_index":489,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetricname(metric",{"_index":153,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetrics",{"_index":1853,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{}}}],["getmetricsbyname",{"_index":1857,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsstring",{"_index":2107,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getmetricstring",{"_index":2184,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getmetrictags",{"_index":1370,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmetrictags(metric",{"_index":163,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["getmetrictags(taggable",{"_index":1506,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getmin",{"_index":1249,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":1851,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountersbyname",{"_index":1872,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountervalues",{"_index":1075,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getname",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["getnanosecondsperunit",{"_index":2644,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getnumber",{"_index":1098,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getnumber(value",{"_index":1511,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getquantiles",{"_index":2235,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gets",{"_index":172,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["getsnapshot",{"_index":1333,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getsnapshot(metric",{"_index":2237,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"miscellaneous/functions.html":{}}}],["getstddev",{"_index":1250,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":2334,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["gettag(name",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["gettags",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["getter",{"_index":2587,"title":{},"body":{"classes/StopWatch.html":{}}}],["gettimer",{"_index":1870,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":1847,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimers",{"_index":1848,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname",{"_index":1869,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimervalues",{"_index":1097,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gettimestamp",{"_index":2220,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["getting",{"_index":305,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["getunit",{"_index":1158,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalue",{"_index":1217,"title":{},"body":{"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-metrics.html":{}}}],["getvalue(0.5",{"_index":2351,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":2341,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":2343,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":2345,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":2349,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":2347,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantile",{"_index":1276,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalues",{"_index":1251,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getworkers",{"_index":530,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["gh",{"_index":2807,"title":{},"body":{"index.html":{}}}],["git",{"_index":2804,"title":{},"body":{"index.html":{}}}],["give",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["given",{"_index":397,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["gives",{"_index":1509,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["global",{"_index":3505,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["global.console",{"_index":3026,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["global.setinterval",{"_index":2498,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["granted",{"_index":2820,"title":{},"body":{"license.html":{}}}],["graphite",{"_index":308,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["graphite.createclient(this.options.host",{"_index":389,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":3133,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["graphs",{"_index":1763,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["greater",{"_index":2035,"title":{},"body":{"classes/Percentiles.html":{}}}],["group",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["group=null",{"_index":1891,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupable",{"_index":128,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{}}}],["grouped",{"_index":1438,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["grouping",{"_index":1233,"title":{},"body":{"interfaces/Groupable.html":{}}}],["groups",{"_index":1771,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["group}:${name",{"_index":2243,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["h",{"_index":3499,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["h.response(reporter.getmetricsstring",{"_index":3501,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["hand",{"_index":1753,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["handle",{"_index":691,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handled",{"_index":3444,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["handler(request",{"_index":3498,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["handlereportmessage",{"_index":692,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handlereportmessage(worker",{"_index":1416,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handlereportrequest",{"_index":2139,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handlereportresponse",{"_index":2151,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["handleresults",{"_index":400,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handles",{"_index":1415,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["handling",{"_index":1703,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["hapi",{"_index":3492,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["hapi.server",{"_index":3493,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["happen",{"_index":408,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["haschanged(metricid",{"_index":1495,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["haven't",{"_index":1755,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["having",{"_index":565,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["hdr",{"_index":1289,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["hdrhistogram",{"_index":1239,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["hdrhistogram(lowest",{"_index":1906,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["hdrsnapshot",{"_index":1236,"title":{"classes/HdrSnapshot.html":{}},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{}}}],["hdrsnapshot(this",{"_index":1332,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["header",{"_index":593,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["header.join(this.options.delimiter",{"_index":919,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["headers",{"_index":654,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["headers.push(`${this.options.metadatacolumnprefix}${metadataname",{"_index":745,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["headers.push(`${this.options.tagcolumnprefix}${tag",{"_index":754,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["headers.push(columntype",{"_index":756,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["health",{"_index":1756,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["healthy",{"_index":1759,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["heap",{"_index":2458,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapsizelimit",{"_index":2470,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapspacestatistics",{"_index":2499,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapspacestatistics.foreach((heapspacestatistic",{"_index":2511,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["heapstatistics",{"_index":2501,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["help",{"_index":2199,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["helper",{"_index":259,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["here",{"_index":1709,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["hereby",{"_index":2819,"title":{},"body":{"license.html":{}}}],["high",{"_index":1195,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":239,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["histogram#getcount",{"_index":1661,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram(reservoir",{"_index":1910,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.getcount",{"_index":439,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogram.getgroup",{"_index":442,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getname",{"_index":443,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["histogram.getsnapshot",{"_index":441,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["histogram.getsum().tostring",{"_index":726,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["histogram.ts",{"_index":1238,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["histogram.ts:108",{"_index":1268,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:119",{"_index":1273,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:129",{"_index":1283,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:139",{"_index":1279,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:149",{"_index":1281,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:160",{"_index":1270,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:171",{"_index":1274,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:182",{"_index":1277,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:26",{"_index":1253,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:42",{"_index":1254,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:53",{"_index":1260,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:64",{"_index":1262,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:75",{"_index":1264,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:86",{"_index":1266,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:97",{"_index":1271,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogramctx",{"_index":1445,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramctx.metrics",{"_index":1459,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramjson",{"_index":2617,"title":{},"body":{"classes/StopWatch.html":{}}}],["histogramresults",{"_index":1461,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histograms",{"_index":674,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["histogramtype",{"_index":2091,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["history",{"_index":2513,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.removetag(name",{"_index":2557,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.setgroup(group",{"_index":2533,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.settag(name",{"_index":2545,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.availablesize.setvalue(heapspacestatistic.space_available_size",{"_index":2515,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.removetag(name",{"_index":2558,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.setgroup(group",{"_index":2534,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.settag(name",{"_index":2546,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.physicalsize.setvalue(heapspacestatistic.physical_space_size",{"_index":2516,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.removetag(name",{"_index":2559,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.setgroup(group",{"_index":2535,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.settag(name",{"_index":2547,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.size.setvalue(heapspacestatistic.space_size",{"_index":2517,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.removetag(name",{"_index":2560,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.setgroup(group",{"_index":2536,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.settag(name",{"_index":2548,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["history.usedsize.setvalue(heapspacestatistic.space_used_size",{"_index":2518,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["hoc",{"_index":1358,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["holders",{"_index":2860,"title":{},"body":{"license.html":{}}}],["holds",{"_index":845,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/MonotoneCounter.html":{}}}],["host",{"_index":342,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["hostname",{"_index":2256,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["hosts",{"_index":3478,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["hour",{"_index":2641,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hrd",{"_index":1256,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["http",{"_index":2263,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["http.request(options",{"_index":2289,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["http://graphite",{"_index":3134,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["http://localhost:9200",{"_index":3453,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["http://metrics.dropwizard.io",{"_index":2746,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["https://github.com/node",{"_index":3471,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["https://github.com/prometheus/pushgateway",{"_index":2270,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["https://prometheus.io/docs/concepts",{"_index":2059,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["https://prometheus.io/docs/instrumenting/exposition_formats/#text",{"_index":2060,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["iclusterconfig",{"_index":988,"title":{},"body":{"classes/DefaultSender.html":{}}}],["id",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["identifier",{"_index":2665,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["identify",{"_index":1600,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["identifying",{"_index":1387,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ignores",{"_index":2153,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["imetricreporter",{"_index":1339,"title":{"interfaces/IMetricReporter.html":{}},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["immediately",{"_index":1362,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["implementation",{"_index":221,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["implementations",{"_index":570,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["implemented",{"_index":2268,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["implements",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["implied",{"_index":2851,"title":{},"body":{"license.html":{}}}],["import",{"_index":126,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["include",{"_index":1754,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["included",{"_index":563,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["includetimestamp",{"_index":2098,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["including",{"_index":2828,"title":{},"body":{"license.html":{}}}],["inclusive",{"_index":1318,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["increases",{"_index":1987,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["increasing",{"_index":1970,"title":{},"body":{"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{}}}],["increment",{"_index":1971,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["increment(value",{"_index":1985,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["independent",{"_index":2756,"title":{},"body":{"index.html":{}}}],["index",{"_index":24,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexable",{"_index":275,"title":{},"body":{"interfaces/BucketToCountMap.html":{},"interfaces/Fields.html":{},"interfaces/Metadata.html":{},"interfaces/MeteredRates.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/Tags.html":{}}}],["indexname",{"_index":1052,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexnamedeterminator",{"_index":1036,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["indexof(metric",{"_index":1884,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":1879,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indicates",{"_index":547,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["inf",{"_index":2216,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["infinity",{"_index":2219,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["influx",{"_index":992,"title":{"additional-documentation/inspector-influx.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":3473,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["influx/lib/metrics/defaultsender.ts",{"_index":980,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["influx/lib/metrics/defaultsender.ts:21",{"_index":993,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:29",{"_index":991,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:37",{"_index":996,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:45",{"_index":990,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:65",{"_index":997,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:83",{"_index":1002,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/defaultsender.ts:93",{"_index":1006,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts",{"_index":1513,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:40",{"_index":2329,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:48",{"_index":2328,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/lib/metrics/influxmetricreporter.ts:57",{"_index":2330,"title":{},"body":{"interfaces/Sender.html":{}}}],["influx/node",{"_index":3472,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["influxdb",{"_index":981,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxdb(config",{"_index":1015,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreporter",{"_index":1009,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["influxmetricreporteroptions",{"_index":1512,"title":{"interfaces/InfluxMetricReporterOptions.html":{}},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["information",{"_index":1046,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["inherited",{"_index":1976,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/StdClock.html":{}}}],["init",{"_index":585,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["init(header",{"_index":587,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/Fields.html":{}}}],["initial",{"_index":297,"title":{},"body":{"classes/Buckets.html":{},"classes/Int64Wrapper.html":{},"classes/MonotoneCounter.html":{}}}],["initial=0",{"_index":1586,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["initialization",{"_index":1514,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["initially",{"_index":1221,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["insertion",{"_index":1951,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":326,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["install",{"_index":1327,"title":{},"body":{"classes/HdrSnapshot.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["installed",{"_index":1310,"title":{},"body":{"classes/HdrSnapshot.html":{},"index.html":{}}}],["instance",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["instance.getmetrics",{"_index":1808,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalue",{"_index":1804,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":1795,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalue",{"_index":1806,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":410,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["instances",{"_index":1123,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["instancing",{"_index":3465,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["instead",{"_index":626,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["int64",{"_index":1583,"title":{},"body":{"classes/Int64Wrapper.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initial",{"_index":1588,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":1567,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapper",{"_index":1565,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/Int64Wrapper.html":{},"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["integer",{"_index":1580,"title":{},"body":{"classes/Int64Wrapper.html":{},"additional-documentation/inspector-metrics.html":{}}}],["inter",{"_index":1594,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["interface",{"_index":170,"title":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["interfaces",{"_index":207,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"overview.html":{}}}],["internal",{"_index":351,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["internaleventbus",{"_index":2096,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["internalrequest/response",{"_index":3539,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["interprocess",{"_index":1375,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["interprocessmessage",{"_index":1374,"title":{"interfaces/InterprocessMessage.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["interprocessreportmessage",{"_index":601,"title":{"interfaces/InterprocessReportMessage.html":{}},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["interprocessreportrequest",{"_index":1597,"title":{"interfaces/InterprocessReportRequest.html":{}},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["interprocessreportresponse",{"_index":1602,"title":{"interfaces/InterprocessReportResponse.html":{}},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["interval",{"_index":1154,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["intervalref",{"_index":2477,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["introduced",{"_index":2794,"title":{},"body":{"index.html":{}}}],["invocation",{"_index":2573,"title":{},"body":{"classes/StopWatch.html":{}}}],["invoked",{"_index":2279,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/StopWatch.html":{}}}],["invokes",{"_index":1943,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ip",{"_index":2257,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["ipoint",{"_index":1005,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["iscounter",{"_index":1794,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isempty",{"_index":2086,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isgauge",{"_index":1802,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram",{"_index":1799,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface",{"_index":1620,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface",{"_index":1622,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismeter",{"_index":1800,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset",{"_index":1807,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter",{"_index":1796,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(count",{"_index":1076,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["isnan(counter.getcount",{"_index":1654,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["isnan(histogram.getcount",{"_index":1668,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(meter.getcount",{"_index":1681,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(quantile",{"_index":2372,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["isnan(timer.getcount",{"_index":1687,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["isnan(value",{"_index":423,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["isnumber",{"_index":2088,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["ispuremonotonecounter",{"_index":1797,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isready",{"_index":986,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["isserializablebucketcounting",{"_index":263,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablebucketcounting(metric",{"_index":268,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"miscellaneous/functions.html":{}}}],["isserializablemetric",{"_index":140,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablemetric(metric",{"_index":154,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"miscellaneous/functions.html":{}}}],["isserializablesampling",{"_index":2706,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isserializablesampling(metric",{"_index":2313,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"miscellaneous/functions.html":{}}}],["issizeattributeinterface",{"_index":1623,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface",{"_index":1625,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istimer",{"_index":1801,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it's",{"_index":1360,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["javascript",{"_index":1577,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{}}}],["job",{"_index":2254,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["job_name",{"_index":3511,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["join",{"_index":881,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["join('\\n",{"_index":2242,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["join(dir",{"_index":914,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["join(this.currentdir",{"_index":921,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["join(this.options.tagdelimiter",{"_index":804,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["js",{"_index":870,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["json",{"_index":1228,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["json.value",{"_index":1230,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["keep",{"_index":867,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-vm.html":{}}}],["keeps",{"_index":1393,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/SlidingWindowReservoir.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["key",{"_index":192,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["key.replace(prometheusmetricreporter.label_name_replacement_regexp",{"_index":2174,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys",{"_index":761,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["keys(fields",{"_index":2202,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys(tags",{"_index":2190,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["keys.foreach((key",{"_index":765,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["kind",{"_index":2849,"title":{},"body":{"license.html":{}}}],["known",{"_index":659,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["koa",{"_index":3491,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["label",{"_index":2069,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["label_name_replacement_regexp",{"_index":2070,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["label_name_start_exclusion",{"_index":2077,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["last",{"_index":1190,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastmodifiedfunction",{"_index":1479,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastmodifiedfunction(metric",{"_index":1485,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastreport",{"_index":1496,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["lastvalue",{"_index":1494,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["latencies",{"_index":3488,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["latency",{"_index":3072,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["latest",{"_index":1764,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["le",{"_index":2189,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["legacy",{"_index":3452,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["length",{"_index":1613,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["lengthattributeinterface",{"_index":1608,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterface",{"_index":1615,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lerna",{"_index":2814,"title":{},"body":{"index.html":{}}}],["level",{"_index":1386,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["liability",{"_index":2864,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2861,"title":{},"body":{"license.html":{}}}],["lib",{"_index":2997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libraries",{"_index":3021,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["library",{"_index":1689,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["license",{"_index":2761,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["limitation",{"_index":2829,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2852,"title":{},"body":{"license.html":{}}}],["line",{"_index":333,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{}}}],["linear",{"_index":248,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["linear(start",{"_index":253,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["lineending",{"_index":889,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["lines",{"_index":2155,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"unit-test.html":{}}}],["lines.push(line",{"_index":2161,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["link",{"_index":136,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{}}}],["linked",{"_index":1750,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["list",{"_index":534,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/Percentiles.html":{},"index.html":{}}}],["listener",{"_index":1777,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["listener.metricadded(name",{"_index":1946,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(name",{"_index":1949,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.ts",{"_index":1950,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{}}}],["listener.ts:19",{"_index":1956,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:28",{"_index":1958,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listeners",{"_index":1814,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listening",{"_index":3144,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["lists",{"_index":604,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["literal",{"_index":1039,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InterprocessReportMessage.html":{}}}],["local",{"_index":2774,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":3548,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["localhost:8080example",{"_index":3516,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["localhost:9200",{"_index":3461,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["log",{"_index":343,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["logger",{"_index":314,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["loggerreporter",{"_index":1640,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["loggerreporteroptions",{"_index":1641,"title":{"interfaces/LoggerReporterOptions.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["loggerreportingcontext",{"_index":1638,"title":{"interfaces/LoggerReportingContext.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logic",{"_index":498,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["logline",{"_index":1635,"title":{"interfaces/LogLine.html":{}},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{}}}],["logline.metadata",{"_index":1645,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logline.result.metadata",{"_index":1650,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["logmetadata",{"_index":349,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["logs",{"_index":1648,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["look",{"_index":2753,"title":{},"body":{"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["loop",{"_index":3557,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["lower",{"_index":2376,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["lowest",{"_index":1312,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["lowest=1",{"_index":1311,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m",{"_index":1476,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/ReportingResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["m.getname",{"_index":1934,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":1878,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getname",{"_index":1926,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":3096,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m15",{"_index":3092,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m15_rate",{"_index":728,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m1_rate",{"_index":729,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["m5",{"_index":3094,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["m5_rate",{"_index":730,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["made",{"_index":3132,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["main",{"_index":3054,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["mainly",{"_index":2215,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["maintained",{"_index":1317,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["makes",{"_index":685,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["mallocedmemory",{"_index":2473,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["managed",{"_index":1788,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manages",{"_index":1792,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manually",{"_index":1818,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["many",{"_index":610,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["map",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["map((boundary",{"_index":2238,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map((field",{"_index":2203,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map((m",{"_index":1877,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metric",{"_index":1487,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["map((metrics",{"_index":774,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["map((registration",{"_index":1850,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((registry",{"_index":772,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["map((result",{"_index":403,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{}}}],["map((tag",{"_index":802,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["map(async",{"_index":405,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map.set(metric.getname",{"_index":2522,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["map.set(registration.name",{"_index":1836,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mapping",{"_index":232,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{}}}],["maps",{"_index":84,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["maptometadata",{"_index":129,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["maptometadata(metadatamap",{"_index":1715,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"miscellaneous/functions.html":{}}}],["maptometadata(metric.getmetadatamap",{"_index":168,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptometadata(this.metadatamap",{"_index":179,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptotags",{"_index":132,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["maptotags(metric.gettags",{"_index":165,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["maptotags(registry.gettags",{"_index":2157,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["maptotags(tagmap",{"_index":2633,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["maptotags(this.tagmap",{"_index":180,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["mark",{"_index":243,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["master",{"_index":540,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["matching",{"_index":204,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["math.exp",{"_index":1165,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(pos",{"_index":2379,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(pos",{"_index":2374,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":2357,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":715,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["max=100",{"_index":1313,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["maximum",{"_index":957,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{}}}],["maxsize",{"_index":960,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":716,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["mean_rate",{"_index":731,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meaning",{"_index":219,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{}}}],["meanrate",{"_index":1739,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["means",{"_index":1758,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["meant",{"_index":3000,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["measure",{"_index":1724,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["measurement",{"_index":303,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{}}}],["measurement[`${prefix}.count",{"_index":431,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m15_rate",{"_index":471,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m1_rate",{"_index":473,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m5_rate",{"_index":475,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.max",{"_index":445,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean",{"_index":447,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean_rate",{"_index":477,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.min",{"_index":449,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p50",{"_index":451,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p75",{"_index":453,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p95",{"_index":455,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p98",{"_index":457,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p99",{"_index":459,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p999",{"_index":461,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.stddev",{"_index":463,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.value",{"_index":437,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement_type",{"_index":1647,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["measures",{"_index":2606,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["mechanism",{"_index":2132,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["memberof",{"_index":173,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["memory",{"_index":2452,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["memorymetrics",{"_index":3553,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["memorymetrics.stop",{"_index":3574,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["merchantability",{"_index":2854,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2832,"title":{},"body":{"license.html":{}}}],["message",{"_index":541,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["message.targetreportertype",{"_index":1414,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message.ts",{"_index":1593,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"coverage.html":{}}}],["message.type",{"_index":1413,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message_type",{"_index":1388,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["message_type_request",{"_index":2061,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["message_type_response",{"_index":2064,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["messages",{"_index":539,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["messagesand",{"_index":3146,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["messageto",{"_index":3143,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["messagetype",{"_index":946,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["messaging",{"_index":2131,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["meta_",{"_index":651,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadata",{"_index":20,"title":{"interfaces/Metadata.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadata[key",{"_index":1714,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadata[metadataname",{"_index":797,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadata[name",{"_index":1717,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadata[percentiles.metadata_name",{"_index":2236,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metadata_name",{"_index":2020,"title":{},"body":{"classes/Percentiles.html":{}}}],["metadatacolumnprefix",{"_index":637,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatacontainer",{"_index":130,"title":{"interfaces/MetadataContainer.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{}}}],["metadatadelimiter",{"_index":638,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadataexportmode",{"_index":630,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatafilter",{"_index":644,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["metadatamap",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"miscellaneous/functions.html":{}}}],["metadatamap.foreach((value",{"_index":1716,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadatamap.keys",{"_index":780,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatamap.set(key",{"_index":1713,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["metadatamaparray.foreach((metadatamap",{"_index":778,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadataname",{"_index":779,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatanames",{"_index":647,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatanames.add(metadataname",{"_index":781,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadataname}=${quote}${metadatavalue}${quote}${this.options.metadatadelimiter",{"_index":798,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatastr",{"_index":794,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatastr.slice(0",{"_index":799,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metadatatomap",{"_index":2701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["metadatatomap(metadata",{"_index":1711,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"miscellaneous/functions.html":{}}}],["metadatavalue",{"_index":796,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["meter",{"_index":315,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["meter#getcount",{"_index":1680,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter(clock",{"_index":1902,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.getcount",{"_index":466,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meter.getgroup",{"_index":468,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meter.getname",{"_index":469,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["meterctx",{"_index":1446,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meterctx.metrics",{"_index":1463,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metered",{"_index":1722,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["meteredrates",{"_index":1736,"title":{"interfaces/MeteredRates.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["meterjson",{"_index":2619,"title":{},"body":{"classes/StopWatch.html":{}}}],["meterresults",{"_index":1465,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["meters",{"_index":675,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["method",{"_index":152,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["methods",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{}}}],["metric",{"_index":11,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metric's",{"_index":2624,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["metric.counts",{"_index":272,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.description",{"_index":158,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.getbuckets",{"_index":270,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.getcount",{"_index":3468,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getcounts",{"_index":273,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["metric.getdescription",{"_index":159,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.getgroup",{"_index":162,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getgroup()}.${metric.getname",{"_index":490,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup()}.${name",{"_index":1942,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetadatamap",{"_index":776,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":1925,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":1932,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getname",{"_index":156,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Metric.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metric.getsnapshot",{"_index":2317,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["metric.group",{"_index":161,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.metadata",{"_index":167,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.metricref",{"_index":1856,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.name",{"_index":155,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableMetric.html":{}}}],["metric.setdescription(description",{"_index":1919,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":1918,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(name",{"_index":1930,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.tags",{"_index":164,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["metric_name_replacement_regexp",{"_index":2084,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metric_name_start_exclusion",{"_index":2085,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricadded",{"_index":1953,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(name",{"_index":1955,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricdocumentbuilder",{"_index":1037,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metricentry",{"_index":1376,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":1501,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricentry.lastvalue",{"_index":1499,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricid",{"_index":1482,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricinfodeterminator",{"_index":1041,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metricname",{"_index":1782,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}${fieldstr}{${tagstr",{"_index":2209,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}_bucket{${tagstr}${tagprefix}le=\"${boundary",{"_index":2230,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricname}{${tagstr}${tagprefix}quantile=\"${boundary",{"_index":2240,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricref",{"_index":1772,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getname",{"_index":1791,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistration",{"_index":1765,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{}}}],["metricregistration(metric",{"_index":1922,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistries",{"_index":1391,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricregistry",{"_index":316,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metricregistry.defaultnamefactory",{"_index":1813,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(instance",{"_index":1798,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metric",{"_index":1920,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metric",{"_index":1924,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylistener",{"_index":1776,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricregistrylistenerregistration",{"_index":1787,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricregistrylistenerregistration(listener",{"_index":1817,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry}'s",{"_index":1430,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricremoved",{"_index":1954,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(name",{"_index":1957,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricreporter",{"_index":555,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["metricreporter.message_type",{"_index":1412,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metricreporteroptions",{"_index":556,"title":{"interfaces/MetricReporterOptions.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metrics",{"_index":327,"title":{"additional-documentation/inspector-metrics.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"classes/SpaceHistory.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["metrics.foreach((metric",{"_index":1883,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":1876,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.map((metric",{"_index":775,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metrics.push(this.availablesize",{"_index":2449,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.physicalsize",{"_index":2450,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.size",{"_index":2447,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics.push(this.usedsize",{"_index":2448,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["metrics/job/${this.options.job}/instance/${this.options.instance",{"_index":2286,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["metrics/lib/metrics/clock.ts",{"_index":491,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/clock.ts:48",{"_index":495,"title":{},"body":{"classes/Clock.html":{}}}],["metrics/lib/metrics/clock.ts:65",{"_index":2561,"title":{},"body":{"classes/StdClock.html":{}}}],["metrics/lib/metrics/counter.ts",{"_index":1968,"title":{},"body":{"classes/MonotoneCounter.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/counter.ts:24",{"_index":1974,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:46",{"_index":1986,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:60",{"_index":1984,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:70",{"_index":1990,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/counter.ts:81",{"_index":1991,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["metrics/lib/metrics/event.ts",{"_index":2685,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/gauge.ts",{"_index":1214,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/gauge.ts:22",{"_index":1218,"title":{},"body":{"interfaces/Gauge.html":{}}}],["metrics/lib/metrics/gauge.ts:42",{"_index":2380,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/gauge.ts:63",{"_index":2381,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/gauge.ts:74",{"_index":2383,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/gauge.ts:85",{"_index":2384,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["metrics/lib/metrics/hdr",{"_index":1237,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/histogram.ts",{"_index":2691,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/meter.ts",{"_index":2693,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/metric",{"_index":1766,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/counting.ts",{"_index":208,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/counting.ts:120",{"_index":225,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["metrics/lib/metrics/model/counting.ts:130",{"_index":231,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["metrics/lib/metrics/model/counting.ts:137",{"_index":276,"title":{},"body":{"interfaces/BucketToCountMap.html":{}}}],["metrics/lib/metrics/model/counting.ts:20",{"_index":579,"title":{},"body":{"interfaces/Counting.html":{}}}],["metrics/lib/metrics/model/counting.ts:43",{"_index":298,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:67",{"_index":295,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:88",{"_index":280,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/counting.ts:97",{"_index":292,"title":{},"body":{"classes/Buckets.html":{}}}],["metrics/lib/metrics/model/groupable.ts",{"_index":1231,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{}}}],["metrics/lib/metrics/model/groupable.ts:18",{"_index":1234,"title":{},"body":{"interfaces/Groupable.html":{}}}],["metrics/lib/metrics/model/groupable.ts:27",{"_index":1235,"title":{},"body":{"interfaces/Groupable.html":{}}}],["metrics/lib/metrics/model/int64.ts",{"_index":1566,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/model/int64.ts:21",{"_index":1572,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:40",{"_index":1574,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:51",{"_index":1575,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/int64.ts:61",{"_index":1581,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["metrics/lib/metrics/model/metadata",{"_index":1701,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/metered.ts",{"_index":1723,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"coverage.html":{}}}],["metrics/lib/metrics/model/metered.ts:20",{"_index":1732,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:28",{"_index":1729,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:36",{"_index":1731,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:44",{"_index":1730,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:52",{"_index":1734,"title":{},"body":{"interfaces/Metered.html":{}}}],["metrics/lib/metrics/model/metered.ts:62",{"_index":1742,"title":{},"body":{"interfaces/MeteredRates.html":{}}}],["metrics/lib/metrics/model/metric.ts",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/metric.ts:118",{"_index":1744,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:127",{"_index":1746,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:135",{"_index":1743,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:144",{"_index":1745,"title":{},"body":{"interfaces/Metric.html":{}}}],["metrics/lib/metrics/model/metric.ts:217",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:225",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:233",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:241",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:249",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:257",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:265",{"_index":83,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:267",{"_index":124,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:271",{"_index":125,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:275",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:279",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:283",{"_index":101,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:289",{"_index":112,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:294",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:298",{"_index":114,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:303",{"_index":89,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:307",{"_index":108,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:312",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:316",{"_index":110,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:321",{"_index":99,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:325",{"_index":98,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:329",{"_index":116,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:334",{"_index":118,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:339",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:344",{"_index":103,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:349",{"_index":105,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:354",{"_index":123,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/metric.ts:367",{"_index":119,"title":{},"body":{"classes/BaseMetric.html":{}}}],["metrics/lib/metrics/model/moving",{"_index":1140,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/reservoir.ts",{"_index":954,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:113",{"_index":968,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:136",{"_index":2404,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:144",{"_index":2403,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:152",{"_index":2402,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:170",{"_index":2405,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:183",{"_index":2407,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:19",{"_index":2307,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:198",{"_index":2406,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:28",{"_index":2309,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:36",{"_index":2308,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:58",{"_index":966,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:66",{"_index":964,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:84",{"_index":967,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/reservoir.ts:97",{"_index":970,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["metrics/lib/metrics/model/sampling.ts",{"_index":2310,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/sampling.ts:19",{"_index":2311,"title":{},"body":{"interfaces/Sampling.html":{}}}],["metrics/lib/metrics/model/snapshot.ts",{"_index":2335,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:105",{"_index":2417,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:114",{"_index":2418,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:150",{"_index":2385,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:169",{"_index":2386,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:17",{"_index":2408,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:179",{"_index":2387,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:189",{"_index":2388,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:199",{"_index":2389,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:209",{"_index":2390,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:219",{"_index":2393,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:229",{"_index":2391,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:239",{"_index":2394,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:249",{"_index":2397,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:25",{"_index":2409,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:259",{"_index":2398,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:269",{"_index":2392,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:285",{"_index":2395,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:319",{"_index":2396,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:33",{"_index":2410,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:41",{"_index":2411,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:49",{"_index":2412,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:57",{"_index":2415,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:65",{"_index":2413,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:73",{"_index":2416,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:81",{"_index":2419,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:89",{"_index":2420,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/snapshot.ts:97",{"_index":2414,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["metrics/lib/metrics/model/summarizing.ts",{"_index":2332,"title":{},"body":{"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["metrics/lib/metrics/model/summarizing.ts:19",{"_index":2621,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["metrics/lib/metrics/model/taggable.ts",{"_index":2622,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/model/taggable.ts:24",{"_index":2626,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:33",{"_index":2625,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:43",{"_index":2629,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:52",{"_index":2630,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:6",{"_index":2636,"title":{},"body":{"interfaces/Tags.html":{}}}],["metrics/lib/metrics/model/taggable.ts:61",{"_index":2623,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:70",{"_index":2627,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/taggable.ts:79",{"_index":2628,"title":{},"body":{"interfaces/Taggable.html":{}}}],["metrics/lib/metrics/model/time",{"_index":2639,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["metrics/lib/metrics/reporter/interprocess",{"_index":1592,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"coverage.html":{}}}],["metrics/lib/metrics/reporter/logger",{"_index":1636,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/logger.ts",{"_index":1688,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["metrics/lib/metrics/reporter/metric",{"_index":524,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/reporter/overall",{"_index":2015,"title":{},"body":{"interfaces/OverallReportContext.html":{},"coverage.html":{}}}],["metrics/lib/metrics/reporter/report",{"_index":2295,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"coverage.html":{}}}],["metrics/lib/metrics/reporter/reporting",{"_index":2304,"title":{},"body":{"interfaces/ReportingResult.html":{},"coverage.html":{}}}],["metrics/lib/metrics/reporter/scheduled",{"_index":2318,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/size",{"_index":1609,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/timer.ts",{"_index":2564,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{},"unit-test.html":{}}}],["metrics/lib/metrics/timer.ts:30",{"_index":2569,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:38",{"_index":2570,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:46",{"_index":2568,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:66",{"_index":2571,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/lib/metrics/timer.ts:78",{"_index":2572,"title":{},"body":{"classes/StopWatch.html":{}}}],["metrics/packages/inspector",{"_index":2883,"title":{},"body":{"unit-test.html":{}}}],["metrics:metric",{"_index":1389,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metrics[0",{"_index":1882,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics_path",{"_index":3513,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["metricset",{"_index":1778,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SpaceHistory.html":{},"coverage.html":{}}}],["metricsetreportcontext",{"_index":317,"title":{"interfaces/MetricSetReportContext.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["metricsfile",{"_index":892,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["metricsstr",{"_index":1605,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["metricstates",{"_index":1396,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["metrictagsarray.foreach((metrictags",{"_index":788,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["metrictype",{"_index":318,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["metrictype}\\n",{"_index":2201,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["microsecond",{"_index":2650,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":2652,"title":{},"body":{"classes/TimeUnit.html":{}}}],["microseconds",{"_index":3083,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["millisecond",{"_index":319,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["milliseconds",{"_index":499,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["millisecond}s",{"_index":2323,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["min",{"_index":717,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["minimal",{"_index":345,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["minimum",{"_index":558,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"additional-documentation/inspector-csv.html":{}}}],["minreportingtimeout",{"_index":358,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["minute",{"_index":1203,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["minute.convertto(this.options.minreportingtimeout",{"_index":1500,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["minutes",{"_index":561,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{}}}],["miscellaneou",{"_index":2995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":2733,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2762,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["mkdir",{"_index":838,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["mkdir(dir",{"_index":861,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["mm",{"_index":1054,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["model",{"_index":2755,"title":{},"body":{"index.html":{}}}],["model/counting",{"_index":1284,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/StopWatch.html":{}}}],["model/int64",{"_index":2574,"title":{},"body":{"classes/StopWatch.html":{}}}],["model/metered",{"_index":2575,"title":{},"body":{"classes/StopWatch.html":{}}}],["model/metric",{"_index":1219,"title":{},"body":{"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/ReportingResult.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["model/reservoir",{"_index":1780,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["model/sampling",{"_index":1285,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/snapshot",{"_index":1286,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/summarizing",{"_index":1288,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["model/taggable",{"_index":1372,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["model/time",{"_index":1373,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["modify",{"_index":2831,"title":{},"body":{"license.html":{}}}],["module",{"_index":329,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"classes/HdrSnapshot.html":{},"interfaces/MetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["modules",{"_index":2750,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["modules.inspector",{"_index":2749,"title":{},"body":{"index.html":{}}}],["moment",{"_index":602,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{}}}],["moment().format(\"yyyymmddhh00\")}_${process.pid}_metrics.csv",{"_index":3448,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["moment().format(\"yyyymmddhh00\")}_metrics.csv",{"_index":3261,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["moment().format('yyyymmddhh00')}_metrics.csv",{"_index":893,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["moment.tz(date",{"_index":699,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["monitoring",{"_index":2744,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["mono",{"_index":2747,"title":{},"body":{"index.html":{}}}],["monotone",{"_index":1074,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonecounter",{"_index":238,"title":{"classes/MonotoneCounter.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["monotonecounter#getcount",{"_index":1652,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["monotonecounter(name",{"_index":1897,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["monotonecounterresults",{"_index":1450,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonecounters",{"_index":676,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["monotonically",{"_index":1969,"title":{},"body":{"classes/MonotoneCounter.html":{},"additional-documentation/inspector-metrics.html":{}}}],["month",{"_index":1061,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["monthprefix",{"_index":1063,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["monthprefix}${month",{"_index":1065,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["more",{"_index":1196,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["moving",{"_index":1143,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverage",{"_index":1146,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["multi",{"_index":2758,"title":{},"body":{"index.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["multiple",{"_index":1769,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["multiplier",{"_index":1180,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["multiplying",{"_index":1188,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["myarray",{"_index":3060,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(1",{"_index":3068,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(2",{"_index":3069,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["myarray.push(3",{"_index":3070,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["n",{"_index":895,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{}}}],["n${metricname}_bucket{${tagstr}${tagprefix}le=\"+inf",{"_index":2233,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["n\\tcount",{"_index":1669,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm15_rate",{"_index":1682,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm1_rate",{"_index":1684,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tm5_rate",{"_index":1683,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmax",{"_index":1670,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean",{"_index":1671,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmean_rate",{"_index":1685,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tmin",{"_index":1672,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp50",{"_index":1673,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp75",{"_index":1674,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp95",{"_index":1675,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp98",{"_index":1676,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp99",{"_index":1677,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tp999",{"_index":1678,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["n\\tstddev",{"_index":1679,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["name",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-vm.html":{}}}],["name.replace(prometheusmetricreporter.metric_name_replacement_regexp",{"_index":2244,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["name.slice(1",{"_index":2246,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["namefactory",{"_index":1781,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["names",{"_index":106,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["names.foreach((name",{"_index":195,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["nan",{"_index":1269,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":1200,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":2649,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanoseconds",{"_index":1211,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanoseconds",{"_index":500,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nanosecondsperunit",{"_index":2642,"title":{},"body":{"classes/TimeUnit.html":{}}}],["native",{"_index":1255,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nativehistogram",{"_index":1290,"title":{},"body":{"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram(lowest",{"_index":1330,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["nats",{"_index":2770,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["nature",{"_index":3536,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["necessarily",{"_index":1475,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["necessary",{"_index":3004,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["need",{"_index":562,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["needed",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{}}}],["needs",{"_index":848,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["negative",{"_index":1988,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["new",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["newcounter",{"_index":1893,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhdrhistogram",{"_index":1905,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhistogram",{"_index":1908,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmeter",{"_index":1900,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter",{"_index":1896,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newstopwatch",{"_index":2615,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtimer",{"_index":1911,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["next",{"_index":332,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/IMetricReporter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["node",{"_index":869,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Logger.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["nodejs",{"_index":2453,"title":{},"body":{"classes/SpaceHistory.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["nodejs.timer",{"_index":2321,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{}}}],["nodexx",{"_index":2788,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":2858,"title":{},"body":{"license.html":{}}}],["normalized",{"_index":2167,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["normalizedfilename",{"_index":913,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["normalizedkey",{"_index":2173,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["normally",{"_index":1761,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["note",{"_index":3572,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["nothing",{"_index":382,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["notice",{"_index":2844,"title":{},"body":{"license.html":{}}}],["now",{"_index":2182,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{}}}],["now.getutcmilliseconds",{"_index":2222,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["npm",{"_index":2795,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["null",{"_index":377,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["num",{"_index":1568,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["number.isfinite(value",{"_index":2218,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["number.isnan(gauge.getvalue",{"_index":1660,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["number.isnan(value",{"_index":1079,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["numbers",{"_index":972,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["numeric",{"_index":2213,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-csv.html":{}}}],["o",{"_index":1392,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["object",{"_index":228,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":1646,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["object.keys(cluster.workers",{"_index":950,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["object.keys(counts",{"_index":2226,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["object.keys(customtags).foreach((key",{"_index":1507,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["object.keys(fields",{"_index":702,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(metadata).foreach((key",{"_index":1712,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["object.keys(metadata).foreach((metadataname",{"_index":795,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(metrictags).foreach((tag",{"_index":789,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(registrytags).foreach((key",{"_index":2178,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["object.keys(tags",{"_index":801,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["object.keys(tags).foreach((key",{"_index":2631,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["objects",{"_index":1612,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"additional-documentation/inspector-metrics.html":{}}}],["obtaining",{"_index":2824,"title":{},"body":{"license.html":{}}}],["official",{"_index":3449,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["old",{"_index":865,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["older",{"_index":506,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["on(messagetype",{"_index":2299,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["one",{"_index":244,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["one.milliseconds",{"_index":513,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanoseconds",{"_index":512,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalue",{"_index":511,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onwards",{"_index":3451,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["open",{"_index":2056,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["operation",{"_index":3443,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["operations",{"_index":995,"title":{},"body":{"classes/DefaultSender.html":{}}}],["optional",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":341,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["options.ts",{"_index":525,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["options.ts:116",{"_index":827,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:123",{"_index":828,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:129",{"_index":829,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:136",{"_index":830,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:142",{"_index":832,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:148",{"_index":831,"title":{},"body":{"classes/DefaultClusterOptions.html":{}}}],["options.ts:165",{"_index":1026,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:172",{"_index":1027,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:178",{"_index":1028,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:185",{"_index":1029,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:191",{"_index":1031,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:197",{"_index":1030,"title":{},"body":{"classes/DisabledClusterOptions.html":{}}}],["options.ts:45",{"_index":537,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["options.ts:54",{"_index":544,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["options.ts:61",{"_index":533,"title":{},"body":{"interfaces/ClusterOptions.html":{}}}],["order",{"_index":1599,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["origin/gh",{"_index":2811,"title":{},"body":{"index.html":{}}}],["originating",{"_index":1596,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{}}}],["ot",{"_index":2262,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-influx.html":{}}}],["otherwise",{"_index":660,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"license.html":{}}}],["out",{"_index":641,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["output",{"_index":2266,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["over",{"_index":3020,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["overall",{"_index":1335,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["overallctx",{"_index":376,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["overallctx.result",{"_index":2129,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["overallctx.result}${lines.join('\\n",{"_index":2162,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["overallreportcontext",{"_index":320,"title":{"interfaces/OverallReportContext.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["override",{"_index":3263,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["override_tag",{"_index":3265,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["overview",{"_index":2872,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.concat(c",{"_index":1108,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["p50",{"_index":718,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p75",{"_index":719,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p95",{"_index":720,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p98",{"_index":721,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p99",{"_index":722,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["p999",{"_index":723,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["package",{"_index":2813,"title":{},"body":{"index.html":{}}}],["packages",{"_index":2799,"title":{},"body":{"index.html":{}}}],["packages/.../carbonmetricreporter.ts",{"_index":2992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../clock.ts",{"_index":2736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../counting.ts",{"_index":2737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../csvmetricreporter.ts",{"_index":2735,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["packages/.../elasticsearchmetricreporter.ts",{"_index":2875,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../hdr",{"_index":2994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../int64.ts",{"_index":2993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../metadata",{"_index":2740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../metric",{"_index":2876,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../metric.ts",{"_index":2738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../prometheusmetricreporter.ts",{"_index":2878,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../sampling.ts",{"_index":2739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../scheduled",{"_index":2879,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../size",{"_index":2880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["packages/.../taggable.ts",{"_index":2741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["packages/.../time",{"_index":2990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../v8gcmetrics.ts",{"_index":2991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/inspector",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["page",{"_index":2999,"title":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}},"body":{}}],["pages",{"_index":2808,"title":{},"body":{"index.html":{}}}],["param",{"_index":138,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["parameter",{"_index":502,"title":{},"body":{"classes/Clock.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["parameters",{"_index":87,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":689,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["part",{"_index":3447,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["particular",{"_index":2856,"title":{},"body":{"license.html":{}}}],["party",{"_index":2767,"title":{},"body":{"index.html":{}}}],["passed",{"_index":135,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultSender.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["password",{"_index":3477,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["path",{"_index":882,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["payload",{"_index":2274,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["payload.length",{"_index":2283,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["peakmallocedmemory",{"_index":2475,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["per",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["percent",{"_index":2019,"title":{},"body":{"classes/Percentiles.html":{}}}],["percentile",{"_index":1259,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["percentiles",{"_index":2017,"title":{"classes/Percentiles.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["periodical",{"_index":386,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permission",{"_index":2818,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2838,"title":{},"body":{"license.html":{}}}],["person",{"_index":2823,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2839,"title":{},"body":{"license.html":{}}}],["physical",{"_index":2431,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["physicalsize",{"_index":2425,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["pid",{"_index":3148,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["placeholder",{"_index":554,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["please",{"_index":1326,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["point",{"_index":496,"title":{},"body":{"classes/Clock.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["point.timestamp",{"_index":1524,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["points",{"_index":1008,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["points.foreach((point",{"_index":1531,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["points.length",{"_index":1530,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["pool",{"_index":2609,"title":{},"body":{"classes/StopWatch.html":{}}}],["port",{"_index":2255,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["portions",{"_index":2847,"title":{},"body":{"license.html":{}}}],["pos",{"_index":2373,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["position",{"_index":975,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["possible",{"_index":605,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["precision",{"_index":254,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultSender.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{}}}],["precision=\"s",{"_index":1010,"title":{},"body":{"classes/DefaultSender.html":{}}}],["precision=10000",{"_index":252,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["prefix",{"_index":429,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["prerequisites",{"_index":2776,"title":{},"body":{"index.html":{}}}],["previously",{"_index":1352,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["prints",{"_index":1643,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"additional-documentation/inspector-metrics.html":{}}}],["private",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{}}}],["probably",{"_index":695,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["procedures",{"_index":1429,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["process",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["process.on(messagetype",{"_index":947,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["process.pid",{"_index":3150,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["process.send",{"_index":942,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["process.send(message",{"_index":952,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["processes",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["processesand",{"_index":3540,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["processmetric",{"_index":3565,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["processmetric.stop();license",{"_index":3577,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["produces",{"_index":3169,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["prog",{"_index":2320,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["progress",{"_index":494,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["project",{"_index":2792,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["prometheus",{"_index":2049,"title":{"additional-documentation/inspector-prometheus.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["prometheus's",{"_index":2264,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts",{"_index":927,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:22",{"_index":937,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:29",{"_index":933,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:36",{"_index":934,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:43",{"_index":932,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:64",{"_index":943,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:75",{"_index":939,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/defaultprometheusclusteroptions.ts:90",{"_index":941,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["prometheus/lib/metrics/interprocessreportrequest.ts",{"_index":1598,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"coverage.html":{}}}],["prometheus/lib/metrics/interprocessreportresponse.ts",{"_index":1603,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"coverage.html":{}}}],["prometheus/lib/metrics/percentiles.ts",{"_index":2018,"title":{},"body":{"classes/Percentiles.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/percentiles.ts:16",{"_index":2021,"title":{},"body":{"classes/Percentiles.html":{}}}],["prometheus/lib/metrics/percentiles.ts:23",{"_index":2028,"title":{},"body":{"classes/Percentiles.html":{}}}],["prometheus/lib/metrics/prometheusclusteroptions.ts",{"_index":2037,"title":{},"body":{"interfaces/PrometheusClusterOptions.html":{},"coverage.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.ts",{"_index":2039,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.ts:58",{"_index":2040,"title":{},"body":{"interfaces/PrometheusFields.html":{}}}],["prometheus/lib/metrics/prometheusreporteroptions.ts",{"_index":2247,"title":{},"body":{"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["prometheus/lib/metrics/pushgatewaymetricreporter.ts",{"_index":2252,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"unit-test.html":{}}}],["prometheus:metric",{"_index":2062,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusclusteroptions",{"_index":930,"title":{"interfaces/PrometheusClusterOptions.html":{}},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["prometheusfields",{"_index":2038,"title":{"interfaces/PrometheusFields.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["prometheusmetricreporter",{"_index":929,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["prometheusmetricreporter#geteventstring",{"_index":2272,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheusmetricreporter#getmetricsstring",{"_index":2057,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter#message_type_request",{"_index":2138,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter#message_type_response",{"_index":2149,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(description",{"_index":2212,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(field",{"_index":2205,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isempty(tagstr",{"_index":2224,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.isnumber(value",{"_index":2217,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.label_name_start_exclusion.includes(normalizedkey.charat(0",{"_index":2176,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.message_type_request",{"_index":2112,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.message_type_response",{"_index":2143,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricreporter.metric_name_start_exclusion.includes(name.charat(0",{"_index":2245,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["prometheusmetricresult",{"_index":2053,"title":{"interfaces/PrometheusMetricResult.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"coverage.html":{}}}],["prometheusmetrictype",{"_index":2050,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{}}}],["prometheusreporteroptions",{"_index":2047,"title":{"interfaces/PrometheusReporterOptions.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["promise",{"_index":370,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["promise((resolve",{"_index":406,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["promise.all(results",{"_index":402,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(tasks",{"_index":769,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["promise.all(workerpromises",{"_index":2124,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["promise.reject(new",{"_index":1522,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["promise.resolve",{"_index":1110,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["properties",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["property",{"_index":1227,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["protected",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["provide",{"_index":1380,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["provided",{"_index":1307,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{},"license.html":{}}}],["proxy",{"_index":1768,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["prune",{"_index":2810,"title":{},"body":{"index.html":{}}}],["pseudo",{"_index":1379,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{}}}],["publish",{"_index":1050,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"license.html":{}}}],["publishdocs",{"_index":2812,"title":{},"body":{"index.html":{}}}],["published",{"_index":3469,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["publishlicense",{"_index":2815,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":2857,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":3482,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushgateway",{"_index":2259,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["pushgatewaymetricreporter",{"_index":2253,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["pushgatewayreporteroptions",{"_index":2251,"title":{"interfaces/PushgatewayReporterOptions.html":{}},"body":{"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{}}}],["pushreporter",{"_index":3547,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushreporter.start();license",{"_index":3550,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["pushreporter.start();multi",{"_index":3549,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["put",{"_index":2278,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["quantile",{"_index":1278,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["quantiles",{"_index":2029,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["queue",{"_index":837,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["queuesize",{"_index":3058,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuesize.getvalue",{"_index":3067,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuesize.setvalue(12345",{"_index":3065,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["queuing",{"_index":1361,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["quote",{"_index":791,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["quotes",{"_index":625,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["random",{"_index":974,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["randombytes",{"_index":2041,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["randombytes(32).tostring('hex",{"_index":2137,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["randomid",{"_index":2135,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["range",{"_index":246,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{}}}],["rate",{"_index":1181,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["rates",{"_index":1735,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{}}}],["reached",{"_index":958,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["readonly",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["ready",{"_index":985,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":1119,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reason.message",{"_index":1120,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["rebuild",{"_index":664,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["received",{"_index":2095,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["receiver",{"_index":553,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["receiver.ts",{"_index":2296,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{},"coverage.html":{}}}],["receiver.ts:21",{"_index":2302,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["receives",{"_index":2303,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["recorded",{"_index":1282,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["recording",{"_index":2519,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["reduce((p",{"_index":1106,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reference",{"_index":392,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/HdrSnapshot.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["referenced",{"_index":1257,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["references",{"_index":1793,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["refers",{"_index":2306,"title":{},"body":{"interfaces/ReportingResult.html":{}}}],["reflected",{"_index":1708,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{}}}],["reg",{"_index":1417,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["regardless",{"_index":1216,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{}}}],["regexp('[^a",{"_index":2071,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["register",{"_index":1929,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["registered",{"_index":1526,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-vm.html":{}}}],["registermetric",{"_index":1917,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registers",{"_index":1914,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration",{"_index":1783,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"additional-documentation/inspector-metrics.html":{}}}],["registration.metricref",{"_index":1837,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metric",{"_index":3123,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry",{"_index":378,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["registry's",{"_index":1437,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.addlistener(new",{"_index":3121,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.getcounterlist",{"_index":1453,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getdefaultclock",{"_index":3556,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.getgaugelist",{"_index":1456,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gethistogramlist",{"_index":1460,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getmeterlist",{"_index":1464,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.getmetriclist",{"_index":773,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["registry.getmonotonecounterlist",{"_index":1449,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettags",{"_index":1503,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettags().foreach((tag",{"_index":1504,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.gettimerlist",{"_index":1468,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["registry.newcounter(\"newallocations",{"_index":3131,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newcounter(\"requestcount",{"_index":3033,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newcounter(\"requests",{"_index":3122,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newhdrhistogram(\"requestlatency",{"_index":3081,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newhistogram(\"requestlatency",{"_index":3074,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newmeter(\"callcount",{"_index":3089,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newmonotonecounter(\"errorcount",{"_index":3039,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newtimer(\"callstats",{"_index":3100,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.newtimer(\"requests",{"_index":3027,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["registry.newtimer(\"requests1",{"_index":3154,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.newtimer(\"requests2",{"_index":3156,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.newtimer(\"requests3",{"_index":3158,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["registry.registermetric(arraylength",{"_index":3064,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.registermetric(capacity",{"_index":3128,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.registermetric(eventloop",{"_index":3570,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(gc",{"_index":3569,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(memorymetrics",{"_index":3568,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(processmetric",{"_index":3571,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["registry.registermetric(queuesize",{"_index":3063,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["registry.ts",{"_index":1767,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:25",{"_index":1960,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:41",{"_index":1961,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:61",{"_index":1775,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:68",{"_index":1774,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registrytags",{"_index":2156,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["registrytags[key",{"_index":2179,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reject",{"_index":407,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["reject(err",{"_index":416,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["related",{"_index":2451,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["remaining",{"_index":1347,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["removal",{"_index":1952,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["remove",{"_index":1785,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removecounter",{"_index":1885,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removed",{"_index":1947,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegauge",{"_index":1887,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram",{"_index":1888,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener",{"_index":1819,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetadata",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["removemetadata(name",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["removemeter",{"_index":1889,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetric",{"_index":1875,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistry",{"_index":1342,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["removemetricregistry(metricregistry",{"_index":1349,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["removemetrics",{"_index":1874,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removes",{"_index":1351,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["removetag",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{}}}],["removetag(name",{"_index":102,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["removetags",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["removetags(...names",{"_index":104,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["removetimer",{"_index":1890,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["rendered",{"_index":1607,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{}}}],["replace",{"_index":2066,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["replaced",{"_index":959,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":302,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["report.date",{"_index":1420,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.counters",{"_index":1422,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.gauges",{"_index":1423,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.histograms",{"_index":1424,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.meters",{"_index":1425,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.monotonecounters",{"_index":1421,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["report.metrics.timers",{"_index":1426,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportcounter",{"_index":421,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reported",{"_index":661,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter",{"_index":347,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["reporter.addmetricregistry(registry",{"_index":3028,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.gettags().set(\"app",{"_index":3136,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["reporter.reportevent(event);gauge",{"_index":3055,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["reporter.reportevent(event);multi",{"_index":3142,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["reporter.setlog(global.console",{"_index":3481,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["reporter.settags(tags",{"_index":3269,"title":{},"body":{"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.settags(tagstomap",{"_index":3149,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reporter.start",{"_index":3029,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["reporter.start();determine",{"_index":3462,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter.start();for",{"_index":3455,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["reporter.start();set",{"_index":3135,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["reporter.ts",{"_index":1340,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:106",{"_index":1346,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:123",{"_index":2637,"title":{},"body":{"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter.ts:141",{"_index":2638,"title":{},"body":{"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter.ts:35",{"_index":1348,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:44",{"_index":1367,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:53",{"_index":1368,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:62",{"_index":1369,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:71",{"_index":1345,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:80",{"_index":1350,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter.ts:98",{"_index":1355,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reporter:report",{"_index":1390,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporter:request",{"_index":2063,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reporter:response",{"_index":2065,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reporters",{"_index":1595,"title":{},"body":{"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reportertype",{"_index":350,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportevent",{"_index":1343,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reportevent(event",{"_index":1354,"title":{},"body":{"interfaces/IMetricReporter.html":{}}}],["reportevent>(event",{"_index":372,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportfunction",{"_index":1478,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportfunction(metric",{"_index":1488,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportgauge",{"_index":432,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gauge",{"_index":1490,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporthistogram",{"_index":438,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":1491,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reporting",{"_index":387,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SimpleGauge.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["reportingcontext",{"_index":709,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricSetReportContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportingresult",{"_index":321,"title":{"interfaces/ReportingResult.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportingResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["reportinterval",{"_index":353,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-csv.html":{}}}],["reportmessagereceiver",{"_index":550,"title":{"interfaces/ReportMessageReceiver.html":{}},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"coverage.html":{}}}],["reportmeter",{"_index":465,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reportmeter(meter",{"_index":1492,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportmetric",{"_index":1124,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportmetricregistry",{"_index":1440,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reportmetrics",{"_index":1436,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["reports",{"_index":366,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Sender.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{}}}],["reporttimer",{"_index":479,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["reporttimer(timer",{"_index":1493,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["repository",{"_index":2748,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1215,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["representation",{"_index":169,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/Summarizing.html":{}}}],["representing",{"_index":301,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Percentiles.html":{},"classes/StopWatch.html":{}}}],["represents",{"_index":235,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["req",{"_index":2288,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["req.end",{"_index":2294,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["req.write(payload",{"_index":2293,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["request",{"_index":1604,"title":{},"body":{"interfaces/InterprocessReportResponse.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetered.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["request.id",{"_index":2141,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["request.targetreportertype",{"_index":2142,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["requestcount",{"_index":3032,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.decrement(1",{"_index":3035,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.getcount",{"_index":3036,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.increment(1",{"_index":3034,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestcount.reset();monotonecounter",{"_index":3037,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency",{"_index":3073,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.getsnapshot",{"_index":3078,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(102000",{"_index":3084,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(12345",{"_index":3075,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(23456",{"_index":3076,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(34567",{"_index":3077,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requestlatency.update(4390000",{"_index":3086,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["requests",{"_index":216,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["requests.settag(\"host",{"_index":3489,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests.time",{"_index":3031,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-influx.html":{}}}],["requests1",{"_index":3153,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.setgroup(\"requests",{"_index":3159,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.settag(\"host",{"_index":3161,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests1.time",{"_index":3171,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2",{"_index":3155,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.setgroup(\"requests",{"_index":3160,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.settag(\"host",{"_index":3163,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.settag(\"type",{"_index":3264,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests2.time",{"_index":3172,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3",{"_index":3157,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.settag(\"host",{"_index":3165,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.settag(\"special_tag",{"_index":3266,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests3.time",{"_index":3173,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["requests_count{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":3531,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests_sum{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":3533,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01",{"_index":3517,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05",{"_index":3518,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5",{"_index":3519,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75",{"_index":3521,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9",{"_index":3522,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95",{"_index":3524,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98",{"_index":3525,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99",{"_index":3527,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999",{"_index":3529,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["require(\"node",{"_index":1584,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["require('gc",{"_index":2996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('graphite",{"_index":338,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["require('moment",{"_index":883,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["require('native",{"_index":1291,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["requires",{"_index":337,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["res",{"_index":2290,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"classes/StopWatch.html":{}}}],["res.statusmessage",{"_index":2292,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["reserved",{"_index":2168,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["reservoir",{"_index":956,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=null",{"_index":1904,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["reset",{"_index":1972,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["resolve",{"_index":417,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["resolve(response.metricsstr",{"_index":2115,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["resolve(stats",{"_index":925,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["resolved",{"_index":1366,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["resource",{"_index":3014,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["respect",{"_index":860,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["respond",{"_index":938,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{}}}],["response",{"_index":1111,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["response.warnings",{"_index":1114,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["responses",{"_index":1601,"title":{},"body":{"interfaces/InterprocessReportRequest.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["restarts",{"_index":2400,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restriction",{"_index":2827,"title":{},"body":{"license.html":{}}}],["result",{"_index":203,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["result.metric",{"_index":701,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["result.metrics.map((metric",{"_index":785,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["result.result",{"_index":404,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["result.ts",{"_index":2305,"title":{},"body":{"interfaces/ReportingResult.html":{},"coverage.html":{}}}],["results",{"_index":205,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["results.map((result",{"_index":1529,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["return",{"_index":148,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["returned",{"_index":393,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["returns",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":2830,"title":{},"body":{"license.html":{}}}],["rm",{"_index":2787,"title":{},"body":{"index.html":{}}}],["root/inspector",{"_index":2882,"title":{},"body":{"unit-test.html":{}}}],["route",{"_index":3496,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["row",{"_index":588,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["row.push(`${quote}${field",{"_index":813,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${getmetricgroup(metric",{"_index":814,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${getmetricname(metric",{"_index":818,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${metadata[metadataname",{"_index":817,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${tags[tag",{"_index":821,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${tmpstr}${quote",{"_index":812,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(`${quote}${type",{"_index":822,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(datestr",{"_index":808,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(metadatastr",{"_index":815,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(tagstr",{"_index":819,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["row.push(value",{"_index":823,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["rows",{"_index":611,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["rows.length",{"_index":706,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["rows.push(row",{"_index":705,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["run",{"_index":591,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/OverallReportContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"index.html":{},"additional-documentation/inspector-csv.html":{}}}],["running",{"_index":1967,"title":{},"body":{"interfaces/MetricSetReportContext.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-vm.html":{}}}],["runs",{"_index":657,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/MetricSetReportContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["s",{"_index":1011,"title":{},"body":{"classes/DefaultSender.html":{}}}],["safely",{"_index":1784,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sales",{"_index":3007,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["same",{"_index":1224,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-csv.html":{}}}],["sample",{"_index":508,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["sampled",{"_index":3016,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["samplerate",{"_index":1901,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{}}}],["samplerate=1",{"_index":1899,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1000",{"_index":2478,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["samples",{"_index":240,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sampling",{"_index":1177,"title":{"interfaces/Sampling.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["save",{"_index":3001,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["schedule",{"_index":3260,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["scheduled",{"_index":1637,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["scheduledmetricreporter",{"_index":322,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["scheduledmetricreporteroptions",{"_index":323,"title":{"interfaces/ScheduledMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["scheduler",{"_index":356,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-csv.html":{}}}],["schedules",{"_index":877,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["scheduling",{"_index":656,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["scrape_configs",{"_index":3510,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["scrape_interval",{"_index":3506,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["scraping",{"_index":3537,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["second",{"_index":507,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["see",{"_index":2058,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["sell",{"_index":2836,"title":{},"body":{"license.html":{}}}],["send",{"_index":538,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["send(points",{"_index":1004,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":982,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"coverage.html":{},"additional-documentation/inspector-influx.html":{}}}],["senderready",{"_index":1527,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["sending",{"_index":545,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["sendmetricstomaster",{"_index":529,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["sendpayload",{"_index":2281,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["sends",{"_index":1007,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["sendtomaster",{"_index":531,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["sendtomaster(message",{"_index":536,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["sendtoworker",{"_index":532,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["sendtoworker(worker",{"_index":542,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["sent",{"_index":306,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{}}}],["separate",{"_index":615,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/inspector-csv.html":{}}}],["separately",{"_index":632,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["serializable",{"_index":1737,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{}}}],["serializablebucketcounting",{"_index":262,"title":{"interfaces/SerializableBucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablemetered",{"_index":1738,"title":{"interfaces/SerializableMetered.html":{}},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["serializablemetric",{"_index":22,"title":{"interfaces/SerializableMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablesampling",{"_index":2046,"title":{"interfaces/SerializableSampling.html":{}},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serializablesummarizing",{"_index":2331,"title":{"interfaces/SerializableSummarizing.html":{}},"body":{"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["serialization",{"_index":178,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["serialized",{"_index":121,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{}}}],["serializedsnapshot",{"_index":1240,"title":{"interfaces/SerializedSnapshot.html":{}},"body":{"classes/HdrSnapshot.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["series",{"_index":2757,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["serve",{"_index":3544,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server",{"_index":309,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["server.route",{"_index":3497,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server.start",{"_index":3546,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["server.start();/etc/prometheus/config.yml",{"_index":3504,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["service",{"_index":3137,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["serving",{"_index":3541,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["set",{"_index":17,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["set.ts",{"_index":1962,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{}}}],["set.ts:21",{"_index":1964,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":1963,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock",{"_index":1828,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescription",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setdescription(description",{"_index":107,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setgroup",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{}}}],["setgroup(group",{"_index":109,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setinterval",{"_index":357,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{}}}],["setlog",{"_index":364,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["setlog(log",{"_index":1642,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["setmetadata",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setmetadata(name",{"_index":111,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setname",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setname(name",{"_index":113,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["setnamefactory",{"_index":1824,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sets",{"_index":174,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["settag",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{}}}],["settag(\"component",{"_index":3053,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["settag(\"customtag",{"_index":3140,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["settag(\"mode",{"_index":3052,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["settag(name",{"_index":115,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["settags",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["settags(tags",{"_index":117,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["settimeout",{"_index":2117,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["setting",{"_index":568,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["setup",{"_index":2775,"title":{},"body":{"index.html":{},"additional-documentation/inspector-vm.html":{}}}],["setvalue",{"_index":1223,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["setvalue(\"started",{"_index":3051,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["setvalue(1.0",{"_index":3139,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["setvalue(value",{"_index":2382,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["shall",{"_index":2845,"title":{},"body":{"license.html":{}}}],["ships",{"_index":3025,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["shortcut",{"_index":609,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"miscellaneous/typealiases.html":{}}}],["shouldcallinit",{"_index":684,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["shutdown",{"_index":2783,"title":{},"body":{"index.html":{}}}],["signals",{"_index":3050,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["signed",{"_index":1579,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["similar",{"_index":2745,"title":{},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["simple",{"_index":955,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["simplegauge",{"_index":1220,"title":{"classes/SimpleGauge.html":{}},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["simplegauge(\"requestcount",{"_index":3059,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["simplegauge('heapsizelimit",{"_index":2471,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('mallocedmemory",{"_index":2474,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('peakmallocedmemory",{"_index":2476,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spaceavailablesize",{"_index":2440,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spacephysicalsize",{"_index":2442,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spacesize",{"_index":2436,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('spaceusedsize",{"_index":2438,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalavailablesize",{"_index":2462,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalheapsize",{"_index":2460,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalheapsizeexecutable",{"_index":2467,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('totalphysicalsize",{"_index":2464,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplegauge('usedheapsize",{"_index":2469,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["simplesnapshot",{"_index":976,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["simplesnapshot(metric.snapshot.values",{"_index":2316,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{}}}],["simplified",{"_index":2260,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["simply",{"_index":2265,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["simulate",{"_index":3168,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["single",{"_index":624,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["size",{"_index":961,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{}}}],["sizeattributeinterface",{"_index":1617,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge",{"_index":1619,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collection",{"_index":1629,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collection",{"_index":1631,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collection",{"_index":1632,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collection",{"_index":1633,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterface",{"_index":1616,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":1779,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":1909,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":440,"title":{"interfaces/Snapshot.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean",{"_index":3110,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();hdrhistogram",{"_index":3079,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();meter",{"_index":3087,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getmean();metriclisteners",{"_index":3118,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["snapshot.getvalue(boundary",{"_index":2239,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["software",{"_index":2825,"title":{},"body":{"license.html":{}}}],["sorted",{"_index":2312,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["sources",{"_index":3543,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["space",{"_index":2423,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["spacehistory",{"_index":2421,"title":{"classes/SpaceHistory.html":{}},"body":{"classes/SpaceHistory.html":{},"coverage.html":{}}}],["spacehistory('code_space",{"_index":2492,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('large_object_space",{"_index":2496,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('map_space",{"_index":2494,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('new_space",{"_index":2488,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacehistory('old_space",{"_index":2490,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spacename",{"_index":2429,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["spaces",{"_index":2457,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["specialvalue",{"_index":3141,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{}}}],["specific",{"_index":222,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableBucketCounting.html":{}}}],["specified",{"_index":420,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["specs",{"_index":2456,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["standard",{"_index":340,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusClusterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["start",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["started",{"_index":2743,"title":{"index.html":{},"license.html":{}},"body":{"additional-documentation/inspector-metrics.html":{}}}],["starts",{"_index":655,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["starttime",{"_index":2566,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":839,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["stat(filename",{"_index":872,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["state",{"_index":1003,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["statements",{"_index":2666,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["states",{"_index":1395,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["static",{"_index":27,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["static_configs",{"_index":3514,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["statistical",{"_index":3018,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["statistics",{"_index":3552,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["stats",{"_index":879,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stats.isdirectory",{"_index":909,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["stats.size",{"_index":917,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["status",{"_index":1757,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stdclock",{"_index":324,"title":{"classes/StdClock.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["stddev",{"_index":724,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["stderr",{"_index":1699,"title":{},"body":{"interfaces/Logger.html":{}}}],["stdout",{"_index":1695,"title":{},"body":{"interfaces/Logger.html":{}}}],["stop",{"_index":394,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stops",{"_index":391,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/SpaceHistory.html":{}}}],["stopwatch",{"_index":2563,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"additional-documentation/inspector-metrics.html":{}}}],["stopwatch(this.clock",{"_index":2616,"title":{},"body":{"classes/StopWatch.html":{}}}],["storage",{"_index":3125,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["store",{"_index":623,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["stores",{"_index":2455,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["straight",{"_index":2273,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["stream",{"_index":1696,"title":{},"body":{"interfaces/Logger.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/OverallReportContext.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSummarizing.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["strings",{"_index":758,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["subject",{"_index":2841,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2834,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2846,"title":{},"body":{"license.html":{}}}],["sum",{"_index":725,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summarizing",{"_index":1287,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/HdrSnapshot.html":{},"interfaces/SerializableSummarizing.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["summary",{"_index":2051,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["summarytype",{"_index":2092,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["super",{"_index":360,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["super(null",{"_index":1322,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["super(options",{"_index":2322,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["super.handlereportmessage(worker",{"_index":694,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["super.report",{"_index":1528,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.start",{"_index":390,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["super.stop",{"_index":395,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.tojson",{"_index":1229,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["support",{"_index":549,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/MetricReporterOptions.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["support/register",{"_index":127,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSet.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/OverallReportContext.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["supported",{"_index":3005,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["sure",{"_index":686,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["switch",{"_index":806,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["sync",{"_index":854,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["synchronously",{"_index":2608,"title":{},"body":{"classes/StopWatch.html":{}}}],["system",{"_index":3008,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["t",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportingResult.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["table",{"_index":2732,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2731,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":612,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tag.and",{"_index":3445,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["tag_",{"_index":650,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagcolumnprefix",{"_index":633,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagdelimiter",{"_index":636,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagexportmode",{"_index":629,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tagfilter",{"_index":643,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["taggable",{"_index":133,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/SerializableMetric.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["tagmap",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["tagmap.foreach((tag",{"_index":2634,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tagmap.set(key",{"_index":2632,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tagnames",{"_index":748,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tagprefix",{"_index":2223,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tags",{"_index":19,"title":{"interfaces/Tags.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metric.html":{},"interfaces/MetricReporterOptions.html":{},"classes/MonotoneCounter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tags.add(tag",{"_index":784,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tags.foreach((value",{"_index":191,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["tags.group",{"_index":425,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags.name",{"_index":427,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags.set(\"app_version",{"_index":3486,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["tags.set(\"application",{"_index":3045,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["tags.set(\"hostname",{"_index":3046,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["tags.set(\"type",{"_index":3268,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["tags[key",{"_index":1502,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["tags[name",{"_index":2635,"title":{},"body":{"interfaces/Taggable.html":{},"interfaces/Tags.html":{}}}],["tags[normalizedkey",{"_index":2177,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tagsnames",{"_index":648,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tagsonlymetricregistry",{"_index":1381,"title":{"classes/TagsOnlyMetricRegistry.html":{}},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["tagsonlymetricregistry(report.tags",{"_index":1418,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["tagstomap",{"_index":1371,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["tagstomap(tags",{"_index":1383,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"miscellaneous/functions.html":{}}}],["tagstr",{"_index":800,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tag}=\"${tags[tag",{"_index":2191,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["tag}=${quote}${tags[tag]}${quote",{"_index":803,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["take",{"_index":2752,"title":{},"body":{"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["targetreportertype",{"_index":679,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["targets",{"_index":3515,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["targettype",{"_index":1411,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["targettype=metricreporter.message_type",{"_index":1409,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["task(callback",{"_index":901,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["tasks",{"_index":764,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tasks.push((async",{"_index":766,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["template",{"_index":367,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["test",{"_index":2780,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["test_abc",{"_index":3267,"title":{},"body":{"additional-documentation/inspector-csv.html":{}}}],["tests:docker",{"_index":2786,"title":{},"body":{"index.html":{}}}],["tevent",{"_index":369,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["teventdata",{"_index":368,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["text",{"_index":2055,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["text/plain",{"_index":2284,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["th",{"_index":1334,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["then((res",{"_index":2614,"title":{},"body":{"classes/StopWatch.html":{}}}],["therefore",{"_index":2603,"title":{},"body":{"classes/StopWatch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["this.a.length",{"_index":3057,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["this.addduration(diff(starttime",{"_index":2611,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.afterreport(ctx",{"_index":1434,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.alpha",{"_index":1205,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.availablesize",{"_index":2439,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.availablesize.settag('space",{"_index":2445,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.avg",{"_index":1210,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.beforereport(ctx",{"_index":1432,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.bucketsinternal.boundaries",{"_index":1338,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.buildheaders",{"_index":666,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildprometheustags(metric",{"_index":2188,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.buildrow(registry",{"_index":703,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildtags(ctx",{"_index":1542,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(ctx.registry",{"_index":424,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(null",{"_index":678,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.buildtags(registry",{"_index":793,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.buildtags(result.registry",{"_index":786,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.canhandlemessage(message",{"_index":693,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.cansendmessagestoworkers",{"_index":2109,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.client",{"_index":388,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client.bulk",{"_index":1112,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client.end",{"_index":396,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measurement",{"_index":412,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.clock",{"_index":2576,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.time",{"_index":2578,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.config",{"_index":1012,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.database",{"_index":1016,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.constructor.name",{"_index":1398,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.count",{"_index":1336,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.countertype",{"_index":2164,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.createoverallreportcontext",{"_index":381,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.currentdir",{"_index":905,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.currentfilename",{"_index":904,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.db",{"_index":1014,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(database",{"_index":1023,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenames",{"_index":1018,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(points",{"_index":1025,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.defaultclock",{"_index":1827,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.description",{"_index":186,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{}}}],["this.eventreceiver",{"_index":945,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["this.extractor",{"_index":1630,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.filterkeys(metadatanames",{"_index":742,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.filterkeys(tagnames",{"_index":751,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.firemetricadded(metric.getname",{"_index":1923,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(name",{"_index":1931,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(name",{"_index":1881,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.gaugetype",{"_index":2163,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.generaterandomid",{"_index":2111,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.get15minuterate",{"_index":2589,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.get1minuterate",{"_index":2591,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.get5minuterate",{"_index":2590,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getallmetadatakeys",{"_index":740,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getalltagkeys",{"_index":749,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getbuckets(metric",{"_index":2193,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getbyname(name",{"_index":1871,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(name",{"_index":1873,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getcount",{"_index":2586,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getdescription",{"_index":198,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getdescription(metric",{"_index":2186,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getfieldnameprefix(counter",{"_index":1536,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(gauge",{"_index":1539,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":1543,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(meter",{"_index":1555,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(timer",{"_index":1561,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getfirstbyname(name",{"_index":1859,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(name",{"_index":1864,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getgroup",{"_index":199,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getmax",{"_index":2375,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":2356,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmeanrate",{"_index":2588,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.getmeasurementname(counter",{"_index":1537,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gauge",{"_index":1540,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":1544,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(meter",{"_index":1556,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(timer",{"_index":1562,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.getmetricname(counter",{"_index":430,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(gauge",{"_index":436,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(histogram",{"_index":444,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(meter",{"_index":470,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(metric",{"_index":2185,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getmetricname(timer",{"_index":484,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricsstring",{"_index":2140,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getmetricstring(date",{"_index":2158,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getname",{"_index":201,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.getnumber(histogram.getcount",{"_index":714,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(meter.get15minuterate",{"_index":472,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuterate",{"_index":474,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuterate",{"_index":476,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getcount",{"_index":727,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(meter.getmeanrate",{"_index":478,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentile",{"_index":454,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentile",{"_index":456,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentile",{"_index":458,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentile",{"_index":462,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentile",{"_index":460,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":446,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":448,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":452,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":450,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":464,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuterate",{"_index":485,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuterate",{"_index":486,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuterate",{"_index":487,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getcount",{"_index":732,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.getnumber(timer.getmeanrate",{"_index":488,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.getquantiles(metric",{"_index":2195,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.gettimestamp(now",{"_index":2187,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.getvalue(0.5",{"_index":2352,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":2342,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":2344,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":2346,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":2350,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":2348,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(fields[field",{"_index":2208,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.group",{"_index":187,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.group}.${this.name",{"_index":197,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.handlereportmessage(worker",{"_index":1402,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.handlereportrequest(message",{"_index":2105,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.handlereportresponse(message",{"_index":2106,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.handleresults",{"_index":380,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["this.handleresults(ctx",{"_index":1472,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.handleresults(null",{"_index":683,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{}}}],["this.handleresults(report.ctx",{"_index":1419,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.haschanged(metricid",{"_index":1484,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.hdrsnapshot",{"_index":1331,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.header",{"_index":665,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.heapsizelimit.removetag(name",{"_index":2554,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.setgroup(group",{"_index":2529,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.settag(name",{"_index":2542,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.heapsizelimit.setvalue(heapstatistics.heap_size_limit",{"_index":2508,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.histogram",{"_index":1329,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["this.histogram.buckets",{"_index":2582,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.counts",{"_index":2583,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getbuckets",{"_index":2604,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":2597,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcounts",{"_index":2605,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":2596,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":2598,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.snapshot",{"_index":2585,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.sum",{"_index":2584,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.tojson",{"_index":2618,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(duration",{"_index":2593,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogramtype",{"_index":2165,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus",{"_index":2102,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.emit(response.id",{"_index":2152,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.once(message.id",{"_index":2114,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.internaleventbus.removealllisteners(message.id",{"_index":2118,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.interval",{"_index":1206,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.intervalref",{"_index":2497,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.intervalref.unref",{"_index":2520,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.listeners.foreach((listener",{"_index":1945,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listener",{"_index":1820,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listener",{"_index":1816,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":1823,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.logmetadata",{"_index":361,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["this.mallocedmemory.removetag(name",{"_index":2555,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.setgroup(group",{"_index":2530,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.settag(name",{"_index":2543,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.mallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":2509,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.maxsize",{"_index":977,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.metadata",{"_index":200,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap",{"_index":181,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.delete(name",{"_index":183,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.get(name",{"_index":182,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatamap.set(name",{"_index":184,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.metadatanames",{"_index":816,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.metadatanames.push(metadataname",{"_index":746,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.meter",{"_index":2581,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get15minuterate",{"_index":2599,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuterate",{"_index":2601,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuterate",{"_index":2600,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanrate",{"_index":2602,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":2594,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.tojson",{"_index":2620,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metricref",{"_index":1790,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistries",{"_index":662,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.indexof(metricregistry",{"_index":1405,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.length",{"_index":663,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.push(metricregistry",{"_index":1404,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricregistries.splice(index",{"_index":1406,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metrics",{"_index":1833,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SpaceHistory.html":{}}}],["this.metrics.foreach((metric",{"_index":2521,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.map((metric",{"_index":1855,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":1921,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(this.heapsizelimit",{"_index":2484,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.mallocedmemory",{"_index":2485,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.peakmallocedmemory",{"_index":2486,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalavailablesize",{"_index":2481,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalheapsize",{"_index":2479,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalheapsizeexecutable",{"_index":2482,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.totalphysicalsize",{"_index":2480,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.push(this.usedheapsize",{"_index":2483,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.metrics.splice(index",{"_index":1880,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricstates.get(metricid",{"_index":1498,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.metricstates.has(metricid",{"_index":1497,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.mkdir(dir",{"_index":911,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.name",{"_index":185,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"additional-documentation/inspector-metrics.html":{}}}],["this.namefactory",{"_index":1825,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(name",{"_index":1933,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":2654,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":1587,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(value",{"_index":1589,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumber",{"_index":1590,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostring",{"_index":1591,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.options",{"_index":896,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions",{"_index":669,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.enabled",{"_index":670,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendmetricstomaster",{"_index":671,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendtomaster",{"_index":2144,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.clusteroptions.sendtomaster(message",{"_index":682,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.clusteroptions.sendtomaster(response",{"_index":2145,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.columns",{"_index":737,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.createdir",{"_index":906,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.dir",{"_index":902,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.emitcomments",{"_index":2198,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.encoding",{"_index":924,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.filename",{"_index":903,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.host",{"_index":2285,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.includetimestamp",{"_index":2221,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.indexnamedeterminator(ctx.registry",{"_index":1130,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.lineending",{"_index":920,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.log",{"_index":363,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug",{"_index":1115,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.log.debug('wrote",{"_index":1525,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.debug(`wrote",{"_index":1534,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.log.error(err",{"_index":415,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.info(logline.message",{"_index":1644,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.info(logline.result.message",{"_index":1649,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["this.options.log.trace(`${res.statuscode",{"_index":2291,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.log?.error",{"_index":2147,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.metadataexportmode",{"_index":738,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.metadatafilter",{"_index":743,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.metricdocumentbuilder",{"_index":1125,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.port",{"_index":2287,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.geteventstring(event",{"_index":2275,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.getmetricsstring",{"_index":2280,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.scheduler(async",{"_index":2326,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.options.sender.init",{"_index":1515,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.isready",{"_index":1517,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.sender.send(points",{"_index":1533,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["this.options.tagexportmode",{"_index":747,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.tagfilter",{"_index":752,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.tags",{"_index":1403,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.options.tags.foreach((value",{"_index":783,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.timezone).format(this.options.dateformat",{"_index":700,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.typedeterminator(ctx.registry",{"_index":1132,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.unit.convertto(this.options.reportinterval",{"_index":2324,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.options.usesinglequotes",{"_index":792,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.useuntyped",{"_index":2196,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.options.writeheaders",{"_index":915,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.options.writer.init(this.header",{"_index":668,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.options.writer.writerow(metric",{"_index":826,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.peakmallocedmemory.removetag(name",{"_index":2556,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.setgroup(group",{"_index":2531,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.settag(name",{"_index":2544,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.peakmallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":2510,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.physicalsize",{"_index":2441,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.physicalsize.settag('space",{"_index":2446,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.precision",{"_index":1013,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.queue",{"_index":897,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.queue.push(async",{"_index":922,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.ready",{"_index":1024,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.reference.getcount",{"_index":1301,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.max",{"_index":1299,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.mean",{"_index":1302,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.min",{"_index":1300,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(50",{"_index":1298,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(75",{"_index":1293,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(95",{"_index":1294,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(98",{"_index":1295,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99",{"_index":1297,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99.9",{"_index":1296,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(quantile",{"_index":1304,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.stddev",{"_index":1303,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.register(metricname",{"_index":1935,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(counter",{"_index":1895,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(histogram",{"_index":1907,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":1927,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(meter",{"_index":1903,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(timer",{"_index":1913,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listener",{"_index":1789,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(name",{"_index":1886,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removetag(name",{"_index":196,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.report",{"_index":2125,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.reportcounter(counter",{"_index":1452,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportertype",{"_index":680,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportgauge(event",{"_index":373,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{}}}],["this.reportgauge(gauge",{"_index":1458,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reporthistogram(histogram",{"_index":1462,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmeter(meter",{"_index":1466,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmetric(counter",{"_index":1134,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(gauge",{"_index":1135,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(histogram",{"_index":1136,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(meter",{"_index":1137,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(timer",{"_index":1138,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetricregistry(ctx",{"_index":1433,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reportmetrics(ctx",{"_index":1451,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.reporttimer(timer",{"_index":1470,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.sendmetricstomaster",{"_index":1471,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.sendpayload(payload",{"_index":2276,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{}}}],["this.setdescription(description",{"_index":1628,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(name",{"_index":1627,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.shouldcallinit",{"_index":667,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.size",{"_index":2435,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.size.settag('space",{"_index":2443,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.foreach((history",{"_index":2532,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.get(heapspacestatistic.space_name",{"_index":2514,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.has(heapspacestatistic.space_name",{"_index":2512,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('code_space",{"_index":2491,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('large_object_space",{"_index":2495,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('map_space",{"_index":2493,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('new_space",{"_index":2487,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.spaces.set('old_space",{"_index":2489,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.starttime",{"_index":2577,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.stat(dir",{"_index":908,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.stat(normalizedfilename",{"_index":916,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.sum",{"_index":1212,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.suminternal.add(value",{"_index":1337,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["this.summarytype",{"_index":2166,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["this.tagmap",{"_index":188,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.delete(name",{"_index":194,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.tagmap.get(name",{"_index":189,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.set(key",{"_index":193,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{}}}],["this.tagmap.set(name",{"_index":190,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/SpaceHistory.html":{}}}],["this.tags",{"_index":202,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/IMetricReporter.html":{},"interfaces/Metric.html":{},"interfaces/SerializableMetric.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["this.tagsnames",{"_index":820,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.tagsnames.push(tag",{"_index":755,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["this.timer",{"_index":2325,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttime",{"_index":2579,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.unref",{"_index":2327,"title":{},"body":{"interfaces/ScheduledMetricReporterOptions.html":{}}}],["this.timeunitinnanoseconds",{"_index":1208,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.totalavailablesize.removetag(name",{"_index":2550,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.setgroup(group",{"_index":2525,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.settag(name",{"_index":2538,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalavailablesize.setvalue(heapstatistics.total_available_size",{"_index":2505,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.removetag(name",{"_index":2549,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.setgroup(group",{"_index":2524,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.settag(name",{"_index":2537,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsize.setvalue(heapstatistics.total_heap_size",{"_index":2503,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.removetag(name",{"_index":2552,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.setgroup(group",{"_index":2527,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.settag(name",{"_index":2540,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalheapsizeexecutable.setvalue(heapstatistics.total_heap_size_executable",{"_index":2506,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.removetag(name",{"_index":2551,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.setgroup(group",{"_index":2526,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.settag(name",{"_index":2539,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.totalphysicalsize.setvalue(heapstatistics.total_physical_size",{"_index":2504,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.unit",{"_index":1207,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.usedheapsize.removetag(name",{"_index":2553,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.setgroup(group",{"_index":2528,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.settag(name",{"_index":2541,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedheapsize.setvalue(heapstatistics.used_heap_size",{"_index":2507,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedsize",{"_index":2437,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.usedsize.settag('space",{"_index":2444,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["this.value",{"_index":1222,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["this.values",{"_index":2337,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((value",{"_index":2355,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":978,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":2340,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":2354,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":2377,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":2353,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.write",{"_index":918,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["this.writerows(metric",{"_index":707,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["those",{"_index":3145,"title":{},"body":{"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["threads",{"_index":3013,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["through",{"_index":1194,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"additional-documentation/inspector-metrics.html":{}}}],["throw",{"_index":1323,"title":{},"body":{"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Percentiles.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["throws",{"_index":1308,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["tick",{"_index":1159,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":217,"title":{"interfaces/Time.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["timeasync",{"_index":2613,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeout",{"_index":559,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["timeprecision",{"_index":989,"title":{},"body":{"classes/DefaultSender.html":{}}}],["timer",{"_index":325,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["timer#getcount",{"_index":1686,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer(clock",{"_index":1912,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.getcount",{"_index":480,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timer.getgroup",{"_index":482,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getname",{"_index":483,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{}}}],["timer.getsnapshot",{"_index":481,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Sender.html":{}}}],["timer.getsum().tostring",{"_index":733,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["timer.start",{"_index":3112,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["timer.stop",{"_index":3113,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["timerctx",{"_index":1447,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timerctx.metrics",{"_index":1467,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timerresults",{"_index":1469,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["timers",{"_index":677,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{}}}],["timestamp",{"_index":399,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricEntry.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["timestamps",{"_index":1749,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["timeunit",{"_index":1161,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"additional-documentation/inspector-csv.html":{}}}],["timeunit(1",{"_index":2656,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":2657,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":2658,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":2659,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":2661,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":2660,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":2662,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanoseconds",{"_index":1155,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["timezone",{"_index":603,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["tmpstr",{"_index":805,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tmpstr.replace(/'/g",{"_index":811,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["tojson",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{}}}],["tonumber",{"_index":1570,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["top",{"_index":859,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["tort",{"_index":2868,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["total",{"_index":1733,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/SerializableMetered.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["totalavailablesize",{"_index":2461,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalheapsize",{"_index":2459,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalheapsizeexecutable",{"_index":2466,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["totalphysicalsize",{"_index":2463,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["trace",{"_index":1691,"title":{},"body":{"interfaces/Logger.html":{}}}],["track",{"_index":1394,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricRegistryListener.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["transforms",{"_index":1710,"title":{},"body":{"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"miscellaneous/functions.html":{}}}],["trigger",{"_index":385,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{}}}],["triggers",{"_index":1204,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":573,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/TagsOnlyMetricRegistry.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["truth",{"_index":519,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["try",{"_index":907,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/HdrSnapshot.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/StopWatch.html":{}}}],["ts",{"_index":2769,"title":{},"body":{"index.html":{}}}],["two",{"_index":503,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.milliseconds",{"_index":517,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanoseconds",{"_index":516,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalue",{"_index":515,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/InterprocessMessage.html":{},"interfaces/InterprocessReportMessage.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/InterprocessReportResponse.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/MetricSetReportContext.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/ReportingResult.html":{},"interfaces/Reservoir.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["type(\"text/plain",{"_index":3503,"title":{},"body":{"additional-documentation/inspector-prometheus.html":{}}}],["type.ts",{"_index":2877,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":2873,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1477,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["typedeterminator",{"_index":1038,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["typeof",{"_index":144,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["types",{"_index":607,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{}}}],["typescript",{"_index":334,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["und",{"_index":3567,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["undefined",{"_index":467,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["under",{"_index":1915,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["unhealthy",{"_index":1760,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["unidirectional",{"_index":572,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{}}}],["unique",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{}}}],["unit",{"_index":218,"title":{"unit-test.html":{}},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MovingAverage.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"unit-test.html":{},"additional-documentation/inspector-csv.html":{}}}],["unit.convertto(interval",{"_index":1209,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":2655,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts",{"_index":2640,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":2646,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":2653,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":2648,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unstopped",{"_index":3573,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["unsupported",{"_index":2067,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["until",{"_index":973,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["untyped",{"_index":2052,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["unwanted",{"_index":642,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["update",{"_index":962,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["update(value",{"_index":969,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updated",{"_index":734,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/MovingAverage.html":{},"index.html":{},"additional-documentation/inspector-metrics.html":{}}}],["updates",{"_index":1187,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{}}}],["upper",{"_index":2378,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["usage",{"_index":3003,"title":{},"body":{"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["use",{"_index":177,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableMetric.html":{},"classes/TagsOnlyMetricRegistry.html":{},"license.html":{},"additional-documentation/inspector-metrics.html":{}}}],["used",{"_index":229,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/Groupable.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/InterprocessReportRequest.html":{},"interfaces/LogLine.html":{},"interfaces/Logger.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{},"additional-documentation/inspector-vm.html":{}}}],["usedheapsize",{"_index":2468,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["usedsize",{"_index":2426,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["user",{"_index":3562,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["username",{"_index":3475,"title":{},"body":{"additional-documentation/inspector-influx.html":{}}}],["users",{"_index":3456,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["uses",{"_index":384,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"classes/Clock.html":{},"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ScheduledMetricReporterOptions.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{},"additional-documentation/inspector-influx.html":{}}}],["usesinglequotes",{"_index":628,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["useuntyped",{"_index":2099,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["using",{"_index":759,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["usual",{"_index":1363,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["usually",{"_index":1694,"title":{},"body":{"interfaces/Logger.html":{},"interfaces/ReportMessageReceiver.html":{}}}],["utc",{"_index":653,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["utf8",{"_index":894,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["utility",{"_index":1748,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["v1.2.3\");reporting",{"_index":3138,"title":{},"body":{"additional-documentation/inspector-carbon.html":{}}}],["v8",{"_index":2434,"title":{},"body":{"classes/SpaceHistory.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8.getheapspacestatistics",{"_index":2500,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["v8.getheapstatistics",{"_index":2502,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["v8eventloop",{"_index":2721,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8eventloop(\"eventloop",{"_index":3560,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8gcmetrics",{"_index":2725,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8gcmetrics(\"gc",{"_index":3555,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8memorymetrics",{"_index":2454,"title":{},"body":{"classes/SpaceHistory.html":{},"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8memorymetrics(\"v8",{"_index":3554,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["v8processmetrics",{"_index":2729,"title":{},"body":{"coverage.html":{},"additional-documentation/inspector-vm.html":{}}}],["v8processmetrics(\"process",{"_index":3566,"title":{},"body":{"additional-documentation/inspector-vm.html":{}}}],["valid",{"_index":1653,"title":{},"body":{"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"classes/DefaultSender.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"interfaces/Gauge.html":{},"classes/HdrSnapshot.html":{},"interfaces/IMetricReporter.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"interfaces/MetricEntry.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/Reservoir.html":{},"interfaces/Sender.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"interfaces/Taggable.html":{},"interfaces/Tags.html":{},"classes/TagsOnlyMetricRegistry.html":{},"classes/TimeUnit.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{}}}],["value.localecompare(database",{"_index":1022,"title":{},"body":{"classes/DefaultSender.html":{}}}],["value.trim",{"_index":2087,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["valueextractor",{"_index":1618,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values",{"_index":250,"title":{},"body":{"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DefaultReservoir.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Fields.html":{},"classes/HdrSnapshot.html":{},"interfaces/LogLine.html":{},"interfaces/LoggerReporterOptions.html":{},"interfaces/LoggerReportingContext.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/MetricEntry.html":{},"interfaces/MovingAverage.html":{},"classes/Percentiles.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/SpaceHistory.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-csv.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["values.count",{"_index":1081,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.join(this.options.delimiter",{"_index":923,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["values.length",{"_index":2339,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.m15_rate",{"_index":1093,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.m1_rate",{"_index":1094,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.m5_rate",{"_index":1095,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.max",{"_index":1082,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.mean",{"_index":1083,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.mean_rate",{"_index":1096,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.min",{"_index":1084,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p50",{"_index":1085,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p75",{"_index":1086,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p95",{"_index":1087,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p98",{"_index":1088,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p99",{"_index":1089,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.p999",{"_index":1090,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values.slice(0",{"_index":2338,"title":{},"body":{"interfaces/SerializedSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.stddev",{"_index":1091,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["valuestr",{"_index":2207,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["valuestr}${timestamp}\\n",{"_index":2210,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["value}${timestamp",{"_index":2241,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["var",{"_index":336,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["variable",{"_index":1385,"title":{},"body":{"interfaces/IMetricReporter.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"classes/StopWatch.html":{},"classes/TagsOnlyMetricRegistry.html":{},"coverage.html":{}}}],["variables",{"_index":2989,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versa",{"_index":1198,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":122,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"interfaces/MeteredRates.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/Sampling.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetered.html":{},"interfaces/SerializableMetric.html":{},"interfaces/SerializableSampling.html":{},"interfaces/SerializableSummarizing.html":{},"interfaces/SerializedSnapshot.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"index.html":{},"additional-documentation/inspector-carbon.html":{},"additional-documentation/inspector-elasticsearch.html":{}}}],["versions",{"_index":3457,"title":{},"body":{"additional-documentation/inspector-elasticsearch.html":{}}}],["via",{"_index":2277,"title":{},"body":{"interfaces/PushgatewayReporterOptions.html":{},"additional-documentation/inspector-metrics.html":{}}}],["vice",{"_index":1197,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["vm",{"_index":2765,"title":{"additional-documentation/inspector-vm.html":{}},"body":{"index.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-vm.html":{}}}],["vm/lib/metrics/v8eventloop.ts",{"_index":2720,"title":{},"body":{"coverage.html":{}}}],["vm/lib/metrics/v8gcmetrics.ts",{"_index":2724,"title":{},"body":{"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts",{"_index":2422,"title":{},"body":{"classes/SpaceHistory.html":{},"coverage.html":{},"unit-test.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:24",{"_index":2432,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:31",{"_index":2433,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:38",{"_index":2430,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8memorymetrics.ts:45",{"_index":2428,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["vm/lib/metrics/v8processmetrics.ts",{"_index":2728,"title":{},"body":{"coverage.html":{}}}],["void",{"_index":365,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/PushgatewayReporterOptions.html":{},"interfaces/ReportMessageReceiver.html":{},"interfaces/Sender.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-metrics.html":{}}}],["wait",{"_index":1519,"title":{},"body":{"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{},"additional-documentation/inspector-influx.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["waiting",{"_index":3012,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["want",{"_index":1762,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["warn",{"_index":1692,"title":{},"body":{"interfaces/Logger.html":{}}}],["warnings",{"_index":1113,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["warranties",{"_index":2853,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2848,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3114,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["weight",{"_index":1164,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["well",{"_index":557,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"classes/SpaceHistory.html":{},"additional-documentation/inspector-csv.html":{}}}],["wether",{"_index":1359,"title":{},"body":{"interfaces/IMetricReporter.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["whether",{"_index":2865,"title":{},"body":{"license.html":{}}}],["who's",{"_index":520,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"interfaces/BucketToCountMap.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"interfaces/SerializableBucketCounting.html":{},"interfaces/SerializableMetric.html":{},"classes/SimpleGauge.html":{},"miscellaneous/variables.html":{},"additional-documentation/inspector-metrics.html":{},"additional-documentation/inspector-prometheus.html":{}}}],["without",{"_index":564,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricEntry.html":{},"interfaces/MetricReporterOptions.html":{},"license.html":{},"additional-documentation/inspector-csv.html":{}}}],["worker",{"_index":543,"title":{},"body":{"interfaces/ClusterOptions.html":{},"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/Fields.html":{},"interfaces/IMetricReporter.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/ReportMessageReceiver.html":{},"classes/TagsOnlyMetricRegistry.html":{}}}],["worker,message",{"_index":2300,"title":{},"body":{"interfaces/ReportMessageReceiver.html":{}}}],["worker.send",{"_index":944,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["worker.send(message",{"_index":949,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["workerpromise",{"_index":2113,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerpromises",{"_index":2108,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerpromises.push(promise.race([workerpromise",{"_index":2122,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponses",{"_index":2123,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponses.join('\\n",{"_index":2127,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workerresponsetimeout",{"_index":931,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{},"interfaces/PrometheusClusterOptions.html":{}}}],["workers",{"_index":535,"title":{},"body":{"interfaces/ClusterOptions.html":{},"classes/DefaultClusterOptions.html":{},"classes/DefaultPrometheusClusterOptions.html":{},"classes/DisabledClusterOptions.html":{},"interfaces/MetricReporterOptions.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["workers.push(cluster.workers[key",{"_index":951,"title":{},"body":{"classes/DefaultPrometheusClusterOptions.html":{}}}],["workertimeout",{"_index":2116,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["works",{"_index":3116,"title":{},"body":{"additional-documentation/inspector-metrics.html":{}}}],["worktree",{"_index":2809,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1306,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["wraps",{"_index":863,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["write",{"_index":840,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"classes/DefaultSender.html":{},"additional-documentation/inspector-csv.html":{}}}],["write(filename",{"_index":874,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{}}}],["writeheader",{"_index":912,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["writeheaders",{"_index":884,"title":{},"body":{"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"additional-documentation/inspector-csv.html":{}}}],["writer",{"_index":622,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["writerow",{"_index":586,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{}}}],["writerow(metric",{"_index":594,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/Fields.html":{}}}],["writerows",{"_index":825,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{}}}],["writes",{"_index":697,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["writing",{"_index":583,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/ElasticsearchMetricReporterOption.html":{},"interfaces/Fields.html":{},"interfaces/InfluxMetricReporterOptions.html":{},"interfaces/Sender.html":{}}}],["written",{"_index":688,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"classes/DefaultCsvFileWriter.html":{},"interfaces/DefaultCsvFileWriterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["wrote",{"_index":1118,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["x",{"_index":2172,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["yes",{"_index":1975,"title":{},"body":{"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["yyyy",{"_index":1053,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["yyyymmddhhmmss.sssz",{"_index":652,"title":{},"body":{"interfaces/CsvFileWriter.html":{},"interfaces/CsvMetricReporterOptions.html":{},"interfaces/Fields.html":{},"additional-documentation/inspector-csv.html":{}}}],["z0",{"_index":2073,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["za",{"_index":2072,"title":{},"body":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{}}}],["zero",{"_index":523,"title":{},"body":{"classes/Clock.html":{},"interfaces/IMetricReporter.html":{},"classes/StdClock.html":{},"classes/TagsOnlyMetricRegistry.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set description\nget / set tags\nget / set metadata\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                            Metric\n                            SerializableMetric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metadata\n                                \n                                \n                                    tags\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:217\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:249\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:233\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:225\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadataMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:257\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:241\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tagMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:265\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:339\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:279\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadataMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:294\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:283\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:344\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:316\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:289\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:298\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:367\n                \n            \n\n\n            \n                \n                    Generates a serialized version of this metric.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        metadata\n                    \n                \n\n                \n                    \n                        getmetadata()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:267\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        tags\n                    \n                \n\n                \n                    \n                        gettags()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:271\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketCounting.html":{"url":"interfaces/BucketCounting.html","title":"interface - BucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\nThe meaning of the counts is implementation-specific.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBuckets\n                                \n                                \n                                    getCounts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBuckets\n                        \n                        \n                    \n                \n            \n            \n                \ngetBuckets()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:120\n                \n            \n\n\n            \n                \n                    Gets the current Buckets object used to do the counting.\n\n\n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCounts\n                        \n                        \n                    \n                \n            \n            \n                \ngetCounts()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:130\n                \n            \n\n\n            \n                \n                    Gets a mapping from the boundary to the count of events\nwithin the corresponding boundary.\nThe meaning of the count is implementation specific.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketToCountMap.html":{"url":"interfaces/BucketToCountMap.html","title":"interface - BucketToCountMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketToCountMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for serialized bucket counts.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [bucket: number]:        number\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:137\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Buckets.html":{"url":"classes/Buckets.html","title":"class - Buckets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Buckets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n            \n                Description\n            \n            \n                Contains boundaries used to mark one end of a value range.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                boundaries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                exponential\n                            \n                            \n                                    Static\n                                linear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:88\n                            \n                        \n\n                \n                    \n                            Creates an instance of Buckets.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            boundaries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:97\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            exponential\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exponential(initial: number, factor: number, count: number, precision: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:67\n                \n            \n\n\n            \n                \n                    Creates a new Buckets object with exponentially distributed values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    initial\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    factor\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10000\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            linear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    linear(start: number, bucketWidth: number, count: number, precision: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:43\n                \n            \n\n\n            \n                \n                    Creates a new Buckets object with linear-distributed values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    bucketWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    precision\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10000\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        measurement\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                    \n                                \n                                \n                                    \n                                        measurement:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Graphite / carbon client module.\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst graphite = require('graphite')\n\n/**\n * Extending standard options with `host` and `log` properties.\n *\n * @export\n * @interface CarbonMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The graphite / carbon host.\n   *\n   * @type {string}\n   * @memberof CarbonMetricReporterOptions\n   */\n  readonly host: string\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof CarbonMetricReporterOptions\n   */\n  log: Logger\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n  /**\n   * Document that is getting sent to the carbon / graphite server.\n   *\n   * @type {*}\n   * @memberof CarbonData\n   */\n  measurement: any\n  /**\n   * Combined tags for the metric.\n   *\n   * @type {Tags}\n   * @memberof CarbonData\n   */\n  tags: Tags\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Graphite / carbon client instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private client: any;\n\n  /**\n   * Creates an instance of CarbonMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CarbonMetricReporter\n   */\n  public constructor ({\n    host,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CarbonMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof CarbonMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof CarbonMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(\n        this.createOverallReportContext(),\n        null,\n        event.getTime(),\n        'gauge',\n        [{\n          metric: event,\n          result\n        }]\n      )\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Uses the scheduler function to trigger periodical reporting.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async start (): Promise {\n    this.client = graphite.createClient(this.options.host)\n    return await super.start()\n  }\n\n  /**\n   * Stops the timer reference returned by the scheduler function.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async stop (): Promise {\n    await super.stop()\n    if (this.client) {\n      await this.client.end()\n    }\n    return this\n  }\n\n  /**\n   * Uses the client instance to report the given metric results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} timestamp\n   * @param {MetricType} type\n   * @param {ReportingResult[]} results\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    timestamp: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    await Promise.all(results\n      .map((result) => result.result)\n      .map(async (carbonData) => await new Promise((resolve, reject) => {\n        // can happen during serialization\n        if (!(timestamp instanceof Date)) {\n          timestamp = new Date(timestamp)\n        }\n        this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n          if (err != null) {\n            if (this.options.log) {\n              this.options.log.error(err, this.logMetadata)\n            }\n            reject(err)\n            return\n          }\n          resolve()\n        })\n      }).catch((err) => {\n        if (this.options.log) {\n          this.options.log.error(err, this.logMetadata)\n        }\n      })))\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): CarbonData {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, counter)\n    tags.group = counter.getGroup()\n    tags.name = counter.getName()\n\n    const prefix = this.getMetricName(counter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = counter.getCount() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, gauge)\n    tags.group = gauge.getGroup()\n    tags.name = gauge.getName()\n\n    const prefix = this.getMetricName(gauge)\n    const measurement: any = {}\n    measurement[`${prefix}.value`] = gauge.getValue() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const tags = this.buildTags(ctx.registry, histogram)\n    tags.group = histogram.getGroup()\n    tags.name = histogram.getName()\n\n    const prefix = this.getMetricName(histogram)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = histogram.getCount() || 0\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): CarbonData {\n    const value = meter.getCount()\n    if (value === undefined || value === null || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, meter)\n    tags.group = meter.getGroup()\n    tags.name = meter.getName()\n\n    const prefix = this.getMetricName(meter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = meter.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, meter)\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): CarbonData {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const tags = this.buildTags(ctx.registry, timer)\n    tags.group = timer.getGroup()\n    tags.name = timer.getName()\n\n    const prefix = this.getMetricName(timer)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = timer.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, timer)\n    }\n  }\n\n  /**\n   * Builds a name for the metric.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof CarbonMetricReporter\n   */\n  protected getMetricName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${metric.getName()}`\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Extending standard options with host and log properties.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        host\n                                \n                                \n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Graphite / carbon client module.\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst graphite = require('graphite')\n\n/**\n * Extending standard options with `host` and `log` properties.\n *\n * @export\n * @interface CarbonMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The graphite / carbon host.\n   *\n   * @type {string}\n   * @memberof CarbonMetricReporterOptions\n   */\n  readonly host: string\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof CarbonMetricReporterOptions\n   */\n  log: Logger\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n  /**\n   * Document that is getting sent to the carbon / graphite server.\n   *\n   * @type {*}\n   * @memberof CarbonData\n   */\n  measurement: any\n  /**\n   * Combined tags for the metric.\n   *\n   * @type {Tags}\n   * @memberof CarbonData\n   */\n  tags: Tags\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Graphite / carbon client instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof CarbonMetricReporter\n   */\n  private client: any;\n\n  /**\n   * Creates an instance of CarbonMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CarbonMetricReporter\n   */\n  public constructor ({\n    host,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CarbonMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof CarbonMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof CarbonMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(\n        this.createOverallReportContext(),\n        null,\n        event.getTime(),\n        'gauge',\n        [{\n          metric: event,\n          result\n        }]\n      )\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Uses the scheduler function to trigger periodical reporting.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async start (): Promise {\n    this.client = graphite.createClient(this.options.host)\n    return await super.start()\n  }\n\n  /**\n   * Stops the timer reference returned by the scheduler function.\n   *\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  public async stop (): Promise {\n    await super.stop()\n    if (this.client) {\n      await this.client.end()\n    }\n    return this\n  }\n\n  /**\n   * Uses the client instance to report the given metric results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} timestamp\n   * @param {MetricType} type\n   * @param {ReportingResult[]} results\n   * @returns {Promise}\n   * @memberof CarbonMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    timestamp: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    await Promise.all(results\n      .map((result) => result.result)\n      .map(async (carbonData) => await new Promise((resolve, reject) => {\n        // can happen during serialization\n        if (!(timestamp instanceof Date)) {\n          timestamp = new Date(timestamp)\n        }\n        this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n          if (err != null) {\n            if (this.options.log) {\n              this.options.log.error(err, this.logMetadata)\n            }\n            reject(err)\n            return\n          }\n          resolve()\n        })\n      }).catch((err) => {\n        if (this.options.log) {\n          this.options.log.error(err, this.logMetadata)\n        }\n      })))\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): CarbonData {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, counter)\n    tags.group = counter.getGroup()\n    tags.name = counter.getName()\n\n    const prefix = this.getMetricName(counter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = counter.getCount() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, gauge)\n    tags.group = gauge.getGroup()\n    tags.name = gauge.getName()\n\n    const prefix = this.getMetricName(gauge)\n    const measurement: any = {}\n    measurement[`${prefix}.value`] = gauge.getValue() || 0\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const tags = this.buildTags(ctx.registry, histogram)\n    tags.group = histogram.getGroup()\n    tags.name = histogram.getName()\n\n    const prefix = this.getMetricName(histogram)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = histogram.getCount() || 0\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): CarbonData {\n    const value = meter.getCount()\n    if (value === undefined || value === null || isNaN(value)) {\n      return null\n    }\n    const tags = this.buildTags(ctx.registry, meter)\n    tags.group = meter.getGroup()\n    tags.name = meter.getName()\n\n    const prefix = this.getMetricName(meter)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = meter.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, meter)\n    }\n  }\n\n  /**\n   * Builds the {@link CarbonData} for the specified {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {CarbonData}\n   * @memberof CarbonMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): CarbonData {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const tags = this.buildTags(ctx.registry, timer)\n    tags.group = timer.getGroup()\n    tags.name = timer.getName()\n\n    const prefix = this.getMetricName(timer)\n    const measurement: any = {}\n    measurement[`${prefix}.count`] = timer.getCount() || 0\n    measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax())\n    measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean())\n    measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate())\n    measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin())\n    measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian())\n    measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile())\n    measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile())\n    measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile())\n    measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile())\n    measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile())\n    measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      measurement,\n      tags: this.buildTags(ctx.registry, timer)\n    }\n  }\n\n  /**\n   * Builds a name for the metric.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof CarbonMetricReporter\n   */\n  protected getMetricName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${metric.getName()}`\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            time\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    time()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/clock.ts:48\n                \n            \n\n\n            \n                \n                    Gets the current point in time according to the logic of the clock implementation.\n\n\n                    \n                    \n                    \n                        Returns :         Time\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time(): Time;\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClusterOptions.html":{"url":"interfaces/ClusterOptions.html","title":"interface - ClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n            \n                Description\n            \n            \n                Common metrics options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enabled\n                                \n                                \n                                        eventReceiver\n                                \n                                \n                                        sendMetricsToMaster\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getWorkers\n                                \n                                \n                                    sendToMaster\n                                \n                                \n                                    sendToWorker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWorkers\n                        \n                        \n                    \n                \n            \n            \n                \ngetWorkers()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:61\n                \n            \n\n\n            \n                \n                    Gets a list of all workers.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToMaster\n                        \n                        \n                    \n                \n            \n            \n                \nsendToMaster(message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:45\n                \n            \n\n\n            \n                \n                    Function to send messages to the master-process.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToWorker\n                        \n                        \n                    \n                \n            \n            \n                \nsendToWorker(worker: Worker, message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:54\n                \n            \n\n\n            \n                \n                    Function for sending message to a worker instance.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    worker\n                                    \n                                            Worker\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if clustering-support is enabled or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventReceiver\n                                    \n                                \n                                \n                                    \n                                        eventReceiver:         ReportMessageReceiver\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReportMessageReceiver\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventReceiver to get messages from master on forked processes or from forked processes on master.\nCompatible with 'cluster'.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sendMetricsToMaster\n                                    \n                                \n                                \n                                    \n                                        sendMetricsToMaster:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if the #sendToMaster function should be used to send messages to the master process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = cluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!cluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => cluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCount\n                        \n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/counting.ts:20\n                \n            \n\n\n            \n                \n                    Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvFileWriter.html":{"url":"interfaces/CsvFileWriter.html","title":"interface - CsvFileWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvFileWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Delegation interface for writing the actual value to a file.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    writeRow\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(header: Row)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:88\n                \n            \n\n\n            \n                \n                    Called on every metrics-report run one time - behavior is implementation specific.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    header\n                                    \n                                                Row\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeRow\n                        \n                        \n                    \n                \n            \n            \n                \nwriteRow(metric: Metric | SerializableMetric, values: Row)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:98\n                \n            \n\n\n            \n                \n                    Called for each field of each metric and after init finished - behavior is implementation specific.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n                                    \n                                            Metric | SerializableMetric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                                Row\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvMetricReporterOptions.html":{"url":"interfaces/CsvMetricReporterOptions.html","title":"interface - CsvMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for CsvMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        columns\n                                \n                                \n                                            Optional\n                                        dateFormat\n                                \n                                \n                                            Optional\n                                        metadataColumnPrefix\n                                \n                                \n                                            Optional\n                                        metadataDelimiter\n                                \n                                \n                                            Optional\n                                        metadataExportMode\n                                \n                                \n                                            Optional\n                                        metadataFilter\n                                \n                                \n                                            Optional\n                                        tagColumnPrefix\n                                \n                                \n                                            Optional\n                                        tagDelimiter\n                                \n                                \n                                            Optional\n                                        tagExportMode\n                                \n                                \n                                            Optional\n                                        tagFilter\n                                \n                                \n                                            Optional\n                                        timezone\n                                \n                                \n                                            Optional\n                                        useSingleQuotes\n                                \n                                \n                                            Optional\n                                        writer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                    \n                                \n                                \n                                    \n                                        columns:         ColumnType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The columns to export.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateFormat\n                                    \n                                \n                                \n                                    \n                                        dateFormat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The format for the date column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataColumnPrefix\n                                    \n                                \n                                \n                                    \n                                        metadataColumnPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Prefix for metadata columns if exported separately.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataDelimiter\n                                    \n                                \n                                \n                                    \n                                        metadataDelimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Delimiter between the metadata if exported in one column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataExportMode\n                                    \n                                \n                                \n                                    \n                                        metadataExportMode:         ExportMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ExportMode for metadata.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataFilter\n                                    \n                                \n                                \n                                    \n                                        metadataFilter:         Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async filter function used to filter out unwanted metadata.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagColumnPrefix\n                                    \n                                \n                                \n                                    \n                                        tagColumnPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Prefix for tag columns if exported separately.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagDelimiter\n                                    \n                                \n                                \n                                    \n                                        tagDelimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Delimiter between the tags if exported in one column.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagExportMode\n                                    \n                                \n                                \n                                    \n                                        tagExportMode:         ExportMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExportMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ExportMode for tags.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagFilter\n                                    \n                                \n                                \n                                    \n                                        tagFilter:         Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async filter function used to filter out unwanted tags.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timezone\n                                    \n                                \n                                \n                                    \n                                        timezone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The timezone used to determine the date.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useSingleQuotes\n                                    \n                                \n                                \n                                    \n                                        useSingleQuotes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates that single quotes are used instead of double quotes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        writer\n                                    \n                                \n                                \n                                    \n                                        writer:         CsvFileWriter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CsvFileWriter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The writer used to store the rows.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultClusterOptions.html":{"url":"classes/DefaultClusterOptions.html","title":"class - DefaultClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n            \n                Description\n            \n            \n                Default cluster setting applicable for most metric-reporter implementations.\nEnables unidirectional message by sending metrics from forked processes to master process.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ClusterOptions\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            enabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:116\n                            \n                        \n\n                \n                    \n                        Set to true.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventReceiver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReportMessageReceiver\n\n                        \n                    \n                    \n                        \n                            Default value : cluster\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:123\n                            \n                        \n\n                \n                    \n                        Set to cluster module.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            getWorkers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:129\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendMetricsToMaster\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : !!cluster.worker\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:136\n                            \n                        \n\n                \n                    \n                        True for forked processes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendToMaster\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:148\n                            \n                        \n\n                \n                    \n                        Uses 'cluster.worker.send' to send messages.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendToWorker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:142\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = cluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!cluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => cluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultCsvFileWriter.html":{"url":"classes/DefaultCsvFileWriter.html","title":"class - DefaultCsvFileWriter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultCsvFileWriter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n        \n\n            \n                Description\n            \n            \n                Standard implementation for a csv file writer.\n\n            \n\n\n            \n                Implements\n            \n            \n                            CsvFileWriter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentDir\n                            \n                            \n                                    Private\n                                currentFilename\n                            \n                            \n                                    Private\n                                    Readonly\n                                options\n                            \n                            \n                                    Private\n                                    Readonly\n                                queue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Private\n                                    Async\n                                mkdir\n                            \n                            \n                                    Private\n                                    Async\n                                stat\n                            \n                            \n                                    Private\n                                    Async\n                                write\n                            \n                            \n                                    Public\n                                    Async\n                                writeRow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(undefined: DefaultCsvFileWriterOptions)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:109\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultCsvFileWriter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        DefaultCsvFileWriterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentDir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:101\n                            \n                        \n\n                \n                    \n                        Holds the current dir to check if dir has changed\nand a new one needs to be created as well as the file in it.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentFilename\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:92\n                            \n                        \n\n                \n                    \n                        Holds the current file name to check if the filename has changed\nand the headers needs to be written.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DefaultCsvFileWriterOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:83\n                            \n                        \n\n                \n                    \n                        The options for the file writer.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            queue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     async.AsyncQueue\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:109\n                            \n                        \n\n                \n                    \n                        Write queue to sync on file writes.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(header: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:148\n                \n            \n\n\n            \n                \n                    Called on each metrics-report run to ensure the dir & file exist\nand the headers are written accordingly at the top of the file\nwith respect to the given options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    header\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            mkdir\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mkdir(dir: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:239\n                \n            \n\n\n            \n                \n                    Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dir\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            stat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stat(filename: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:259\n                \n            \n\n\n            \n                \n                    Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            write\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    write(filename: string, data: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:214\n                \n            \n\n\n            \n                \n                    Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            writeRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    writeRow(metric: Metric | SerializableMetric, values: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts:194\n                \n            \n\n\n            \n                \n                    Schedules a new write command for the given row fields.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n                                    \n                                            Metric | SerializableMetric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as async from 'async'\nimport { appendFile, mkdir, stat, Stats } from 'fs'\nimport { join } from 'path'\n\nimport { Metric, SerializableMetric } from 'inspector-metrics'\nimport { CsvFileWriter } from './CsvMetricReporter'\nimport moment = require('moment');\n\n/**\n * Options for standard implementation for a csv file writer.\n *\n * @export\n * @interface DefaultCsvFileWriterOptions\n */\nexport interface DefaultCsvFileWriterOptions {\n\n  /**\n   * Determines if the column headers should be written at the top of each file.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly writeHeaders?: boolean\n  /**\n   * Determines if the dir for the metrics reporting should be created if it doesn't exist.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly createDir?: boolean\n  /**\n   * The delimiter between the fields.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly delimiter?: string\n  /**\n   * The encoding of the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly encoding?: string\n  /**\n   * The line endings in the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly lineEnding?: string\n  /**\n   * An async function determining the filename of the metrics.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly filename?: () => Promise\n  /**\n   * An async function determining the directory of the metricsfile.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly dir?: () => Promise\n}\n\n/**\n * Standard implementation for a csv file writer.\n *\n * @export\n * @class DefaultCsvFileWriter\n * @implements {CsvFileWriter}\n */\nexport class DefaultCsvFileWriter implements CsvFileWriter {\n  /**\n   * The options for the file writer.\n   *\n   * @private\n   * @type {DefaultCsvFileWriterOptions}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly options: DefaultCsvFileWriterOptions;\n  /**\n   * Holds the current file name to check if the filename has changed\n   * and the headers needs to be written.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentFilename: string;\n  /**\n   * Holds the current dir to check if dir has changed\n   * and a new one needs to be created as well as the file in it.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentDir: string;\n  /**\n   * Write queue to sync on file writes.\n   *\n   * @private\n   * @type {async.AsyncQueue}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly queue: async.AsyncQueue;\n\n  /**\n   * Creates an instance of DefaultCsvFileWriter.\n   *\n   * @param {DefaultCsvFileWriterOptions} options\n   * @memberof DefaultCsvFileWriter\n   */\n  public constructor ({\n    filename = async () => `${moment().format('YYYYMMDDHH00')}_metrics.csv`,\n    dir = async () => './metrics',\n    writeHeaders = true,\n    createDir = true,\n    delimiter = ',',\n    encoding = 'utf8',\n    lineEnding = '\\n'\n  }: DefaultCsvFileWriterOptions) {\n    this.options = {\n      createDir,\n      delimiter,\n      dir,\n      encoding,\n      filename,\n      lineEnding,\n      writeHeaders\n    }\n    this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n      task(callback)\n    }, 1)\n  }\n\n  /**\n   * Called on each metrics-report run to ensure the dir & file exist\n   * and the headers are written accordingly at the top of the file\n   * with respect to the given options.\n   *\n   * @param {string[]} header\n   * @memberof DefaultCsvFileWriter\n   */\n  public async init (header: string[]): Promise {\n    const dir = await this.options.dir()\n    const filename = await this.options.filename()\n\n    if (filename !== this.currentFilename || dir !== this.currentDir) {\n      let createDir = false\n      if (this.options.createDir) {\n        try {\n          const stats = await this.stat(dir)\n          createDir = !stats.isDirectory()\n        } catch (err) {\n          createDir = true\n        }\n      }\n      if (createDir) {\n        await this.mkdir(dir)\n      }\n\n      let writeHeader = false\n      const normalizedFilename = join(dir, filename)\n      if (this.options.writeHeaders) {\n        try {\n          const stats = await this.stat(normalizedFilename)\n          writeHeader = stats.size === 0\n        } catch (err) {\n          writeHeader = true\n        }\n      }\n      if (writeHeader) {\n        await this.write(\n          normalizedFilename,\n          header.join(this.options.delimiter) + this.options.lineEnding\n        )\n      }\n    }\n    this.currentDir = dir\n    this.currentFilename = filename\n  }\n\n  /**\n   * Schedules a new write command for the given row fields.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {string[]} values\n   * @memberof DefaultCsvFileWriter\n   */\n  public async writeRow (metric: Metric | SerializableMetric, values: string[]): Promise {\n    const normalizedFilename = join(this.currentDir, this.currentFilename)\n    this.queue.push(async (callback: () => void) => {\n      await this.write(\n        normalizedFilename,\n        values.join(this.options.delimiter) + this.options.lineEnding\n      )\n      callback()\n    })\n  }\n\n  /**\n   * Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @param {string} data\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async write (filename: string, data: string): Promise {\n    return await new Promise((resolve, reject) => {\n      appendFile(\n        filename,\n        data,\n        this.options.encoding,\n        (err) => {\n          if (err) {\n            reject(err)\n            return\n          }\n          resolve()\n        }\n      )\n    })\n  }\n\n  /**\n   * Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} dir\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async mkdir (dir: string): Promise {\n    return await new Promise((resolve, reject) => {\n      mkdir(dir, (err) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async stat (filename: string): Promise {\n    return await new Promise((resolve, reject) => {\n      stat(filename, (err, stats) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(stats)\n      })\n    })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DefaultCsvFileWriterOptions.html":{"url":"interfaces/DefaultCsvFileWriterOptions.html","title":"interface - DefaultCsvFileWriterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DefaultCsvFileWriterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n        \n\n            \n                Description\n            \n            \n                Options for standard implementation for a csv file writer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        createDir\n                                \n                                \n                                            Optional\n                                        delimiter\n                                \n                                \n                                            Optional\n                                        dir\n                                \n                                \n                                            Optional\n                                        encoding\n                                \n                                \n                                            Optional\n                                        filename\n                                \n                                \n                                            Optional\n                                        lineEnding\n                                \n                                \n                                            Optional\n                                        writeHeaders\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createDir\n                                    \n                                \n                                \n                                    \n                                        createDir:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Determines if the dir for the metrics reporting should be created if it doesn't exist.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delimiter\n                                    \n                                \n                                \n                                    \n                                        delimiter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The delimiter between the fields.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dir\n                                    \n                                \n                                \n                                    \n                                        dir:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async function determining the directory of the metricsfile.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The encoding of the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                    \n                                \n                                \n                                    \n                                        filename:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An async function determining the filename of the metrics.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineEnding\n                                    \n                                \n                                \n                                    \n                                        lineEnding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The line endings in the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        writeHeaders\n                                    \n                                \n                                \n                                    \n                                        writeHeaders:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Determines if the column headers should be written at the top of each file.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as async from 'async'\nimport { appendFile, mkdir, stat, Stats } from 'fs'\nimport { join } from 'path'\n\nimport { Metric, SerializableMetric } from 'inspector-metrics'\nimport { CsvFileWriter } from './CsvMetricReporter'\nimport moment = require('moment');\n\n/**\n * Options for standard implementation for a csv file writer.\n *\n * @export\n * @interface DefaultCsvFileWriterOptions\n */\nexport interface DefaultCsvFileWriterOptions {\n\n  /**\n   * Determines if the column headers should be written at the top of each file.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly writeHeaders?: boolean\n  /**\n   * Determines if the dir for the metrics reporting should be created if it doesn't exist.\n   *\n   * @type {boolean}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly createDir?: boolean\n  /**\n   * The delimiter between the fields.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly delimiter?: string\n  /**\n   * The encoding of the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly encoding?: string\n  /**\n   * The line endings in the file.\n   *\n   * @type {string}\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly lineEnding?: string\n  /**\n   * An async function determining the filename of the metrics.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly filename?: () => Promise\n  /**\n   * An async function determining the directory of the metricsfile.\n   *\n   * @memberof DefaultCsvFileWriterOptions\n   */\n  readonly dir?: () => Promise\n}\n\n/**\n * Standard implementation for a csv file writer.\n *\n * @export\n * @class DefaultCsvFileWriter\n * @implements {CsvFileWriter}\n */\nexport class DefaultCsvFileWriter implements CsvFileWriter {\n  /**\n   * The options for the file writer.\n   *\n   * @private\n   * @type {DefaultCsvFileWriterOptions}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly options: DefaultCsvFileWriterOptions;\n  /**\n   * Holds the current file name to check if the filename has changed\n   * and the headers needs to be written.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentFilename: string;\n  /**\n   * Holds the current dir to check if dir has changed\n   * and a new one needs to be created as well as the file in it.\n   *\n   * @private\n   * @type {string}\n   * @memberof DefaultCsvFileWriter\n   */\n  private currentDir: string;\n  /**\n   * Write queue to sync on file writes.\n   *\n   * @private\n   * @type {async.AsyncQueue}\n   * @memberof DefaultCsvFileWriter\n   */\n  private readonly queue: async.AsyncQueue;\n\n  /**\n   * Creates an instance of DefaultCsvFileWriter.\n   *\n   * @param {DefaultCsvFileWriterOptions} options\n   * @memberof DefaultCsvFileWriter\n   */\n  public constructor ({\n    filename = async () => `${moment().format('YYYYMMDDHH00')}_metrics.csv`,\n    dir = async () => './metrics',\n    writeHeaders = true,\n    createDir = true,\n    delimiter = ',',\n    encoding = 'utf8',\n    lineEnding = '\\n'\n  }: DefaultCsvFileWriterOptions) {\n    this.options = {\n      createDir,\n      delimiter,\n      dir,\n      encoding,\n      filename,\n      lineEnding,\n      writeHeaders\n    }\n    this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n      task(callback)\n    }, 1)\n  }\n\n  /**\n   * Called on each metrics-report run to ensure the dir & file exist\n   * and the headers are written accordingly at the top of the file\n   * with respect to the given options.\n   *\n   * @param {string[]} header\n   * @memberof DefaultCsvFileWriter\n   */\n  public async init (header: string[]): Promise {\n    const dir = await this.options.dir()\n    const filename = await this.options.filename()\n\n    if (filename !== this.currentFilename || dir !== this.currentDir) {\n      let createDir = false\n      if (this.options.createDir) {\n        try {\n          const stats = await this.stat(dir)\n          createDir = !stats.isDirectory()\n        } catch (err) {\n          createDir = true\n        }\n      }\n      if (createDir) {\n        await this.mkdir(dir)\n      }\n\n      let writeHeader = false\n      const normalizedFilename = join(dir, filename)\n      if (this.options.writeHeaders) {\n        try {\n          const stats = await this.stat(normalizedFilename)\n          writeHeader = stats.size === 0\n        } catch (err) {\n          writeHeader = true\n        }\n      }\n      if (writeHeader) {\n        await this.write(\n          normalizedFilename,\n          header.join(this.options.delimiter) + this.options.lineEnding\n        )\n      }\n    }\n    this.currentDir = dir\n    this.currentFilename = filename\n  }\n\n  /**\n   * Schedules a new write command for the given row fields.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {string[]} values\n   * @memberof DefaultCsvFileWriter\n   */\n  public async writeRow (metric: Metric | SerializableMetric, values: string[]): Promise {\n    const normalizedFilename = join(this.currentDir, this.currentFilename)\n    this.queue.push(async (callback: () => void) => {\n      await this.write(\n        normalizedFilename,\n        values.join(this.options.delimiter) + this.options.lineEnding\n      )\n      callback()\n    })\n  }\n\n  /**\n   * Wraps a write command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @param {string} data\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async write (filename: string, data: string): Promise {\n    return await new Promise((resolve, reject) => {\n      appendFile(\n        filename,\n        data,\n        this.options.encoding,\n        (err) => {\n          if (err) {\n            reject(err)\n            return\n          }\n          resolve()\n        }\n      )\n    })\n  }\n\n  /**\n   * Wraps a mkdir command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} dir\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async mkdir (dir: string): Promise {\n    return await new Promise((resolve, reject) => {\n      mkdir(dir, (err) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Wraps a stat command with old-fashion promise to keep compatibility to node js 6.\n   *\n   * @private\n   * @param {string} filename\n   * @returns {Promise}\n   * @memberof DefaultCsvFileWriter\n   */\n  private async stat (filename: string): Promise {\n    return await new Promise((resolve, reject) => {\n      stat(filename, (err, stats) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(stats)\n      })\n    })\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultPrometheusClusterOptions.html":{"url":"classes/DefaultPrometheusClusterOptions.html","title":"class - DefaultPrometheusClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultPrometheusClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n        \n\n            \n                Description\n            \n            \n                Default configuration for clustering support for the PrometheusMetricReporter.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PrometheusClusterOptions\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                workerResponseTimeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Async\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Async\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:43\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            enabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:29\n                            \n                        \n\n                \n                    \n                        Set to true.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventReceiver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReportMessageReceiver\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:36\n                            \n                        \n\n                \n                    \n                        Set to cluster module.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendMetricsToMaster\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : cluster.isWorker\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:43\n                            \n                        \n\n                \n                    \n                        True for forked processes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            workerResponseTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 500\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:22\n                            \n                        \n\n                \n                    \n                        Sets the timeout in which a forked process can respond to metric report requests.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getWorkers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getWorkers()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:75\n                \n            \n\n\n            \n                \n                    Returns the values of 'cluster.workers'.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendToMaster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToMaster(message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:90\n                \n            \n\n\n            \n                \n                    Uses 'process.send' to send messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendToWorker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToWorker(worker: cluster.Worker, message: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts:64\n                \n            \n\n\n            \n                \n                    Uses 'worker.send' to send the specified message to the specified worker.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    worker\n                                    \n                                            cluster.Worker\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\n\nimport { ReportMessageReceiver } from 'inspector-metrics'\nimport { PrometheusClusterOptions } from './PrometheusClusterOptions'\n\n/**\n * Default configuration for clustering support for the {@link PrometheusMetricReporter}.\n *\n * @export\n * @class DefaultPrometheusClusterOptions\n * @implements {PrometheusClusterOptions}\n */\nexport class DefaultPrometheusClusterOptions implements PrometheusClusterOptions {\n  /**\n   * Sets the timeout in which a forked process can respond to metric report requests.\n   *\n   * @type {number}\n   * @memberof DefaultPrometheusClusterOptions\n   */\n  public readonly workerResponseTimeout: number = 500;\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = cluster.isWorker;\n\n  public constructor () {\n    if (cluster.isWorker) {\n      this.eventReceiver = {\n        on: (\n          messageType: any,\n          callback: (worker: cluster.Worker, message: any, handle: any) => void) => {\n          process.on(messageType, (message) => callback(null, message, null))\n        }\n      }\n    } else {\n      this.eventReceiver = cluster\n    }\n  }\n\n  /**\n   * Uses 'worker.send' to send the specified message to the specified worker.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async sendToWorker (worker: cluster.Worker, message: any): Promise {\n    if (worker) {\n      worker.send(message)\n    }\n  }\n\n  /**\n   * Returns the values of 'cluster.workers'.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async getWorkers (): Promise {\n    const workers: cluster.Worker[] = []\n    if (cluster.workers) {\n      for (const key of Object.keys(cluster.workers)) {\n        workers.push(cluster.workers[key])\n      }\n    }\n    return workers\n  }\n\n  /**\n   * Uses 'process.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public async sendToMaster (message: any): Promise {\n    process.send(message)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:66\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:66\n                            \n                        \n\n                \n                    \n                        The capacity of this reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:58\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            size\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:84\n                \n            \n\n\n            \n                \n                    Gets the actual number of value, but at max the specified maximum.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            snapshot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    snapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:113\n                \n            \n\n\n            \n                \n                    Creates a new snapshot instance.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:97\n                \n            \n\n\n            \n                \n                    Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                db\n                            \n                            \n                                    Private\n                                    Readonly\n                                precision\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                isReady\n                            \n                            \n                                    Public\n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig, precision: TimePrecision)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        TimePrecision\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                will be passed to write-options\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:29\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            db\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:21\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            precision\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimePrecision\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:45\n                            \n                        \n\n                \n                    \n                        Defines the precision for the write operations.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:37\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:65\n                \n            \n\n\n            \n                \n                    Ensures that a database is existing before sending data.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            isReady\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isReady()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:83\n                \n            \n\n\n            \n                \n                    Gets the ready state.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(points: IPoint[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/DefaultSender.ts:93\n                \n            \n\n\n            \n                \n                    Sends the specified data points to the DB.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                            IPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { IClusterConfig, InfluxDB, IPoint, TimePrecision } from 'influx'\nimport { Sender } from './InfluxMetricReporter'\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n  /**\n   * The influxdb client instance.\n   *\n   * @private\n   * @type {InfluxDB}\n   * @memberof DefaultSender\n   */\n  private readonly db: InfluxDB;\n  /**\n   * Influx client configuration object.\n   *\n   * @private\n   * @type {IClusterConfig}\n   * @memberof DefaultSender\n   */\n  private readonly config: IClusterConfig;\n  /**\n   * Indicates if he sender is ready to report metrics.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof DefaultSender\n   */\n  private ready: boolean = false;\n  /**\n   * Defines the precision for the write operations.\n   *\n   * @private\n   * @type {TimePrecision}\n   * @memberof DefaultSender\n   */\n  private readonly precision: TimePrecision;\n\n  /**\n   * Creates an instance of DefaultSender.\n   *\n   * @param {IClusterConfig} config\n   * @param {TimePrecision} [precision=\"s\"] will be passed to write-options\n   * @memberof DefaultSender\n   */\n  public constructor (config: IClusterConfig, precision: TimePrecision = 's') {\n    this.config = config\n    this.precision = precision\n    this.db = new InfluxDB(config)\n  }\n\n  /**\n   * Ensures that a database is existing before sending data.\n   *\n   * @memberof DefaultSender\n   */\n  public async init (): Promise {\n    const database = this.config.database\n    const databases = await this.db.getDatabaseNames()\n    if ((databases instanceof String && databases.localeCompare(database) !== 0) ||\n      (databases instanceof Array &&\n        !databases.find((value: string, index: number, arr: string[]) =>\n          value.localeCompare(database) === 0))) {\n      await this.db.createDatabase(database)\n    }\n    this.ready = true\n  }\n\n  /**\n   * Gets the ready state.\n   *\n   * @returns {Promise}\n   * @memberof DefaultSender\n   */\n  public async isReady (): Promise {\n    return this.ready\n  }\n\n  /**\n   * Sends the specified data points to the DB.\n   *\n   * @param {IPoint[]} points\n   * @memberof DefaultSender\n   */\n  public async send (points: IPoint[]): Promise {\n    await this.db.writePoints(points, { precision: this.precision })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisabledClusterOptions.html":{"url":"classes/DisabledClusterOptions.html","title":"class - DisabledClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisabledClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n            \n                Description\n            \n            \n                Disables clustering.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ClusterOptions\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                enabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventReceiver\n                            \n                            \n                                    Public\n                                    Readonly\n                                getWorkers\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendMetricsToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToMaster\n                            \n                            \n                                    Public\n                                    Readonly\n                                sendToWorker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            enabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:165\n                            \n                        \n\n                \n                    \n                        Set to false.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventReceiver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReportMessageReceiver\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:172\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            getWorkers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:178\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendMetricsToMaster\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:185\n                            \n                        \n\n                \n                    \n                        Set to false.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendToMaster\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:197\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            sendToWorker\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts:191\n                            \n                        \n\n                \n                    \n                        Set to null.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = cluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!cluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => cluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticsearchMetricReporterOption.html":{"url":"interfaces/ElasticsearchMetricReporterOption.html","title":"interface - ElasticsearchMetricReporterOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ElasticsearchMetricReporterOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for ElasticsearchMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientOptions\n                                \n                                \n                                            Optional\n                                        indexnameDeterminator\n                                \n                                \n                                            Optional\n                                        log\n                                \n                                \n                                            Optional\n                                        metricDocumentBuilder\n                                \n                                \n                                            Optional\n                                        typeDeterminator\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientOptions\n                                    \n                                \n                                \n                                    \n                                        clientOptions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Elasticsearch client options.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexnameDeterminator\n                                    \n                                \n                                \n                                    \n                                        indexnameDeterminator:         MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricInfoDeterminator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to get the name of the index.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metricDocumentBuilder\n                                    \n                                \n                                \n                                    \n                                        metricDocumentBuilder:         MetricDocumentBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricDocumentBuilder\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to build the document for a metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeDeterminator\n                                    \n                                \n                                \n                                    \n                                        typeDeterminator:         MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricInfoDeterminator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Used to get the type of the metric instance.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Client } from '@elastic/elasticsearch'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Tags,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Interface for getting a certain information using the specified metric metadata -\n * e.g. name of the index, metric type, etc.\n */\nexport type MetricInfoDeterminator =\n  (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => string;\n\n/**\n * Interface for building a document for a metric.\n */\nexport type MetricDocumentBuilder = (\n  registry: MetricRegistry,\n  metric: Metric,\n  type: MetricType,\n  date: Date,\n  tags: Tags) => {};\n\n/**\n * Options for {@link ElasticsearchMetricReporter}.\n *\n * @export\n * @interface ElasticsearchMetricReporterOption\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface ElasticsearchMetricReporterOption extends ScheduledMetricReporterOptions {\n  /**\n   * Elasticsearch client options.\n   *\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly clientOptions: {}\n  /**\n   * Logger instance used to report errors.\n   *\n   * @type {Logger}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  log?: Logger\n  /**\n   * Used to get the name of the index.\n   *\n   * @type {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly indexnameDeterminator?: MetricInfoDeterminator\n  /**\n   * Used to get the type of the metric instance.\n   *\n   * @type {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly typeDeterminator?: MetricInfoDeterminator\n  /**\n   * Used to build the document for a metric.\n   *\n   * @type {MetricDocumentBuilder}\n   * @memberof ElasticsearchMetricReporterOption\n   */\n  readonly metricDocumentBuilder?: MetricDocumentBuilder\n}\n\n/**\n * A MetricReporter extension used to publish metric values to elasticsearch.\n *\n * @export\n * @class ElasticsearchMetricReporter\n * @extends {MetricReporter}\n */\nexport class ElasticsearchMetricReporter extends ScheduledMetricReporter> {\n  /**\n   * Returns a {@link MetricInfoDeterminator} that returns 'metric' as type.\n   *\n   * @static\n   * @returns {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static defaultTypeDeterminator (): MetricInfoDeterminator {\n    return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => 'metric'\n  }\n\n  /**\n   * Returns a {@link MetricInfoDeterminator} that returns an indexname like '-yyyy-mm-dd'.\n   *\n   * @static\n   * @param {string} baseName The\n   * @returns {MetricInfoDeterminator}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static dailyIndex (baseName: string): MetricInfoDeterminator {\n    return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => {\n      const day = date.getDate()\n      const dayPrefix: string = (day >= 10) ? '' : '0'\n      const month = date.getMonth() + 1\n      const monthPrefix: string = (month >= 10) ? '' : '0'\n      return `${baseName}-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`\n    }\n  }\n\n  /**\n   * Returns a {@link MetricDocumentBuilder} that builds an object for a metric like this:\n   *\n   * {\n   *\n   *  name: ..., // name of metric\n   *\n   *  group: ..., // group of metric\n   *\n   *  timestamp: ..., // timestamp from parameter\n   *\n   *  tags: ..., // combined tags from this reporter and the metric\n   *\n   *  values..., // metric specific values\n   *\n   *  type..., // metric type\n   *\n   * }\n   *\n   * @static\n   * @returns {MetricDocumentBuilder}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static defaultDocumentBuilder (): MetricDocumentBuilder {\n    return (\n      registry: MetricRegistry,\n      metric: Metric,\n      type: MetricType,\n      timestamp: Date,\n      tags: Tags) => {\n      let values = null\n\n      if (metric instanceof MonotoneCounter) {\n        values = ElasticsearchMetricReporter.getMonotoneCounterValues(metric)\n      } else if (metric instanceof Counter) {\n        values = ElasticsearchMetricReporter.getCounterValues(metric)\n      } else if (metric instanceof Histogram) {\n        values = ElasticsearchMetricReporter.getHistogramValues(metric)\n      } else if (metric instanceof Meter) {\n        values = ElasticsearchMetricReporter.getMeterValues(metric)\n      } else if (metric instanceof Timer) {\n        values = ElasticsearchMetricReporter.getTimerValues(metric)\n      } else {\n        values = ElasticsearchMetricReporter.getGaugeValue(metric as Gauge)\n      }\n\n      if (values === null) {\n        return null\n      }\n\n      const name = metric.getName()\n      const group = metric.getGroup()\n      return { name, group, tags, timestamp, values, type }\n    }\n  }\n\n  /**\n   * Gets the values for the specified monotone counter metric.\n   *\n   * @static\n   * @param {MonotoneCounter} counter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getMonotoneCounterValues (counter: MonotoneCounter): {} {\n    const count = counter.getCount()\n    if (!count || isNaN(count)) {\n      return null\n    }\n    return { count }\n  }\n\n  /**\n   * Gets the values for the specified counter metric.\n   *\n   * @static\n   * @param {Counter} counter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getCounterValues (counter: Counter): {} {\n    const count = counter.getCount()\n    if (!count || isNaN(count)) {\n      return null\n    }\n    return { count }\n  }\n\n  /**\n   * Gets the values for the specified {Gauge} metric.\n   *\n   * @static\n   * @param {Gauge} gauge\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getGaugeValue (gauge: Gauge): {} {\n    const value = gauge.getValue()\n    if ((!value && value !== 0) || Number.isNaN(value)) {\n      return null\n    }\n    if (typeof value === 'object') {\n      return value\n    }\n    return { value }\n  }\n\n  /**\n   * Gets the values for the specified {Histogram} metric.\n   *\n   * @static\n   * @param {Histogram} histogram\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getHistogramValues (histogram: Histogram): {} {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const values: any = {}\n\n    values.count = value\n    values.max = this.getNumber(snapshot.getMax())\n    values.mean = this.getNumber(snapshot.getMean())\n    values.min = this.getNumber(snapshot.getMin())\n    values.p50 = this.getNumber(snapshot.getMedian())\n    values.p75 = this.getNumber(snapshot.get75thPercentile())\n    values.p95 = this.getNumber(snapshot.get95thPercentile())\n    values.p98 = this.getNumber(snapshot.get98thPercentile())\n    values.p99 = this.getNumber(snapshot.get99thPercentile())\n    values.p999 = this.getNumber(snapshot.get999thPercentile())\n    values.stddev = this.getNumber(snapshot.getStdDev())\n\n    return values\n  }\n\n  /**\n   * Gets the values for the specified {Meter} metric.\n   *\n   * @static\n   * @param {Meter} meter\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getMeterValues (meter: Meter): {} {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const values: any = {}\n\n    values.count = value\n    values.m15_rate = this.getNumber(meter.get15MinuteRate())\n    values.m1_rate = this.getNumber(meter.get1MinuteRate())\n    values.m5_rate = this.getNumber(meter.get5MinuteRate())\n    values.mean_rate = this.getNumber(meter.getMeanRate())\n\n    return values\n  }\n\n  /**\n   * Gets the values for the specified {Timer} metric.\n   *\n   * @static\n   * @param {Timer} timer\n   * @returns {{}}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public static getTimerValues (timer: Timer): {} {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const values: any = {}\n\n    values.count = value\n    values.m15_rate = this.getNumber(timer.get15MinuteRate())\n    values.m1_rate = this.getNumber(timer.get1MinuteRate())\n    values.m5_rate = this.getNumber(timer.get5MinuteRate())\n    values.max = this.getNumber(snapshot.getMax())\n    values.mean = this.getNumber(snapshot.getMean())\n    values.mean_rate = this.getNumber(timer.getMeanRate())\n    values.min = this.getNumber(snapshot.getMin())\n    values.p50 = this.getNumber(snapshot.getMedian())\n    values.p75 = this.getNumber(snapshot.get75thPercentile())\n    values.p95 = this.getNumber(snapshot.get95thPercentile())\n    values.p98 = this.getNumber(snapshot.get98thPercentile())\n    values.p99 = this.getNumber(snapshot.get99thPercentile())\n    values.p999 = this.getNumber(snapshot.get999thPercentile())\n    values.stddev = this.getNumber(snapshot.getStdDev())\n\n    return values\n  }\n\n  /**\n   * Either gets 0 or the specified value.\n   *\n   * @private\n   * @param {number} value\n   * @returns {number}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private static getNumber (value: number): number {\n    if (isNaN(value)) {\n      return 0\n    }\n    return value\n  }\n\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private readonly logMetadata: any;\n  /**\n   * Elasticsearch client used to do reporting.\n   *\n   * @private\n   * @type {Client}\n   * @memberof ElasticsearchMetricReporter\n   */\n  private readonly client: Client;\n\n  /**\n   * Creates an instance of ElasticsearchMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   */\n  public constructor (\n    {\n      clientOptions,\n      metricDocumentBuilder = ElasticsearchMetricReporter.defaultDocumentBuilder(),\n      indexnameDeterminator = ElasticsearchMetricReporter.dailyIndex('metric'),\n      typeDeterminator = ElasticsearchMetricReporter.defaultTypeDeterminator(),\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions()\n    }: ElasticsearchMetricReporterOption,\n    reporterType?: string) {\n    super({\n      clientOptions,\n      clock,\n      clusterOptions,\n      indexnameDeterminator,\n      log,\n      metricDocumentBuilder,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tags,\n      typeDeterminator,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n\n    this.client = new Client(clientOptions)\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {Logger} log\n   * @memberof ElasticsearchMetricReporter\n   */\n  public setLog (log: Logger): void {\n    this.options.log = log\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      await this.handleResults(null, null, event.getTime(), 'gauge', [{\n        metric: event,\n        result\n      }])\n    }\n\n    return event\n  }\n\n  /**\n   * Does nothing\n   *\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Send the combinations of index and document to the elasticsearch cluster\n   * using the bulk method of the elasticsearch client.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const body = results\n      .map((result) => result.result)\n      .reduce((p, c) => p.concat(c), [])\n\n    if (!body || body.length === 0) {\n      return await Promise.resolve()\n    }\n\n    try {\n      const response = await this.client.bulk({ body })\n      if (this.options.log) {\n        const warnings = response.warnings\n        this.options.log.debug(\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          `wrote ${type} metrics - warnings ${warnings}`,\n          this.logMetadata\n        )\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Generalized reporting method of all types of metric instances.\n   * Builds the index configuration document and the metric document.\n   *\n   * @protected\n   * @param {Metric} metric\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportMetric (\n    metric: Metric, ctx: MetricSetReportContext): Array {\n    const document = this.options.metricDocumentBuilder(\n      ctx.registry, metric, ctx.type, ctx.date, this.buildTags(ctx.registry, metric))\n    if (document) {\n      const _index = this.options.indexnameDeterminator(ctx.registry, metric, ctx.type, ctx.date)\n      const _type = this.options.typeDeterminator(ctx.registry, metric, ctx.type, ctx.date)\n      return [\n        { index: { _index, _type } },\n        document\n      ]\n    }\n    return []\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(counter, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Array {\n    return this.reportMetric(gauge, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(histogram, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(meter, ctx)\n  }\n\n  /**\n   * Calls {@link #reportMetric} with the specified arguments.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Array}\n   * @memberof ElasticsearchMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Array {\n    return this.reportMetric(timer, ctx)\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                            MovingAverage\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:113\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                        TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            alpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:73\n                            \n                        \n\n                \n                    \n                        Alpha component (weight) of the moving average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            avg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : -1.0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:97\n                            \n                        \n\n                \n                    \n                        The current average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:81\n                            \n                        \n\n                \n                    \n                        The sampling interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:89\n                            \n                        \n\n                \n                    \n                        The sum of all values passed to the update function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeUnitInNanoseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:105\n                            \n                        \n\n                \n                    \n                        Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:113\n                            \n                        \n\n                \n                    \n                        The time unit of the sampling rate.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAlpha\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAlpha()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:136\n                \n            \n\n\n            \n                \n                    Gets the alpha value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAverage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAverage(unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:157\n                \n            \n\n\n            \n                \n                    Gets the average in the specified time unit.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUnit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:146\n                \n            \n\n\n            \n                \n                    Gets the time unit.\n\n\n                    \n                    \n                    \n                        Returns :         TimeUnit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            tick\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    tick()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:187\n                \n            \n\n\n            \n                \n                    Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:171\n                \n            \n\n\n            \n                \n                    Adds the value to the current sum.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAlpha(): number;\n\n  /**\n   * Gets the average for the specified time unit -\n   * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAverage(unit: TimeUnit): number;\n\n  /**\n   * Adds the given value to the logic of the implementation.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  update(value: number): this;\n\n  /**\n   * Triggers the actual average to be updated.\n   * A tick represents an update event.\n   *\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n  public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n  public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n  public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n  public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n  public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n  public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n  /**\n   * Alpha component (weight) of the moving average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private alpha: number;\n  /**\n   * The sampling interval.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private interval: number;\n  /**\n   * The sum of all values passed to the update function.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private sum: number = 0;\n  /**\n   * The current average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private avg: number = -1.0;\n  /**\n   * Multiplier of the time unit specified in the constructor in nanoseconds.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private timeUnitInNanoseconds: number;\n  /**\n   * The time unit of the sampling rate.\n   *\n   * @private\n   * @type {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private unit: TimeUnit;\n\n  /**\n   * Creates an instance of ExponentiallyWeightedMovingAverage.\n   *\n   * @param {number} alpha\n   * @param {number} interval\n   * @param {TimeUnit} unit\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public constructor(alpha: number, interval: number, unit: TimeUnit) {\n    this.alpha = alpha;\n    this.interval = interval;\n    this.unit = unit;\n    this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n  }\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  /**\n   * Gets the time unit.\n   *\n   * @returns {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getUnit(): TimeUnit {\n    return this.unit;\n  }\n\n  /**\n   * Gets the average in the specified time unit.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAverage(unit: TimeUnit): number {\n    if (this.avg === -1.0) {\n      return 0;\n    }\n    return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n  }\n\n  /**\n   * Adds the value to the current sum.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public update(value: number): this {\n    this.sum += value;\n    return this;\n  }\n\n  /**\n   * Updates the current average by multiplying the alpha value with the difference\n   * of the last average and the current average.\n   *\n   * Averages are calculated by dividing the sum through the sampling interval.\n   *\n   * If the alpha value is high the last average has more weight and vice versa.\n   *\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public tick(): this {\n    const sum = this.sum;\n    const avg = sum / this.interval;\n    this.sum -= sum;\n\n    if (this.avg === -1.0) {\n      this.avg = avg;\n    } else {\n      this.avg += this.alpha * (avg - this.avg);\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for Fields.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [field: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-csv/lib/metrics/CsvMetricReporter.ts:58\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  Histogram,\n  InterprocessReportMessage,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  SerializableMetric,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport * as moment from 'moment-timezone'\n\n/**\n * Lists all possible column types.\n */\nexport type ColumnType = 'date' | 'name' | 'field' | 'group' | 'description' | 'value' | 'tags' | 'type' | 'metadata';\n\n/**\n * Shortcut type for a row.\n */\nexport type Row = string[];\n\n/**\n * Shortcut type for many rows.\n */\nexport type Rows = Row[];\n\n/**\n * Type for a tag or metadata filter.\n */\nexport type Filter = (metric: Metric, key: string, value: string) => Promise;\n\n/**\n * Helper interface for Fields.\n *\n * @interface Fields\n */\ninterface Fields {\n  [field: string]: string\n}\n\n/**\n * Tags and metadata can be exported in one row or in separate rows.\n *\n * @export\n * @enum {number}\n */\nexport enum ExportMode {\n  ALL_IN_ONE_COLUMN,\n  EACH_IN_OWN_COLUMN,\n}\n\n/**\n * Delegation interface for writing the actual value to a file.\n *\n * @export\n * @interface CsvFileWriter\n */\nexport interface CsvFileWriter {\n\n  /**\n   * Called on every metrics-report run one time - behavior is implementation specific.\n   *\n   * @param {Row} header\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  init(header: Row): Promise\n\n  /**\n   * Called for each field of each metric and after init finished - behavior is implementation specific.\n   *\n   * @param {Metric | SerializableMetric} metric\n   * @param {Row} values\n   * @returns {Promise}\n   * @memberof CsvFileWriter\n   */\n  writeRow(metric: Metric | SerializableMetric, values: Row): Promise\n}\n\n/**\n * Options for {@link CsvMetricReporter}.\n *\n * @export\n * @interface CsvMetricReporterOptions\n */\nexport interface CsvMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The writer used to store the rows.\n   *\n   * @type {CsvFileWriter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly writer?: CsvFileWriter\n  /**\n   * Indicates that single quotes are used instead of double quotes.\n   *\n   * @type {boolean}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly useSingleQuotes?: boolean\n  /**\n   * ExportMode for tags.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagExportMode?: ExportMode\n  /**\n   * ExportMode for metadata.\n   *\n   * @type {ExportMode}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataExportMode?: ExportMode\n  /**\n   * Prefix for tag columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagColumnPrefix?: string\n  /**\n   * Delimiter between the tags if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagDelimiter?: string\n  /**\n   * Prefix for metadata columns if exported separately.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataColumnPrefix?: string\n  /**\n   * Delimiter between the metadata if exported in one column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataDelimiter?: string\n  /**\n   * The columns to export.\n   *\n   * @type {ColumnType[]}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly columns?: ColumnType[]\n  /**\n   * The format for the date column.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly dateFormat?: string\n  /**\n   * The timezone used to determine the date.\n   *\n   * @type {string}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly timezone?: string\n  /**\n   * An async filter function used to filter out unwanted tags.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly tagFilter?: Filter\n  /**\n   * An async filter function used to filter out unwanted metadata.\n   *\n   * @type {Filter}\n   * @memberof CsvMetricReporterOptions\n   */\n  readonly metadataFilter?: Filter\n}\n\n/**\n * Metric reporter for csv files.\n *\n * @export\n * @class CsvMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class CsvMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Header row.\n   *\n   * @private\n   * @type {Row}\n   * @memberof CsvMetricReporter\n   */\n  private header: Row;\n  /**\n   * All metadata names\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly metadataNames: string[] = [];\n  /**\n   * All tags names.\n   *\n   * @private\n   * @type {string[]}\n   * @memberof CsvMetricReporter\n   */\n  private readonly tagsNames: string[] = [];\n\n  /**\n   * Creates an instance of CsvMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof CsvMetricReporter\n   */\n  public constructor ({\n    writer,\n    useSingleQuotes = false,\n    tagExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    metadataExportMode = ExportMode.ALL_IN_ONE_COLUMN,\n    tagColumnPrefix = 'tag_',\n    tagDelimiter = ';',\n    metadataColumnPrefix = 'meta_',\n    metadataDelimiter = ';',\n    columns = [],\n    dateFormat = 'YYYYMMDDHHmmss.SSSZ',\n    timezone = 'UTC',\n    tagFilter = async () => true,\n    metadataFilter = async () => true,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    clusterOptions = new DefaultClusterOptions()\n  }: CsvMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      columns,\n      dateFormat,\n      metadataColumnPrefix,\n      metadataDelimiter,\n      metadataExportMode,\n      metadataFilter,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      tagColumnPrefix,\n      tagDelimiter,\n      tagExportMode,\n      tagFilter,\n      tags,\n      timezone,\n      unit,\n      useSingleQuotes,\n      writer\n    }, reporterType)\n  }\n\n  /**\n   * Builds all headers and starts scheduling reporting runs.\n   * When call this method all metadata and tags in each metric\n   * in the application need to be set / known, otherwise it cannot be\n   * reported.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async start (): Promise {\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      // rebuild header on every call to start\n      this.header = await this.buildHeaders()\n      // only call init on master process\n      if (this.shouldCallInit()) {\n        await this.options.writer.init(this.header)\n      }\n      await super.start()\n    }\n    return this\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!this.header) {\n      this.header = await this.buildHeaders()\n    }\n\n    const result = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: null,\n      registry: null,\n      type: 'gauge'\n    })\n\n    if (result) {\n      if (this.options.clusterOptions &&\n        this.options.clusterOptions.enabled &&\n        this.options.clusterOptions.sendMetricsToMaster) {\n        const message: InterprocessReportMessage = {\n          ctx: {},\n          date: event.getTime(),\n          metrics: {\n            counters: [],\n            gauges: [{\n              metric: event,\n              result\n            }],\n            histograms: [],\n            meters: [],\n            monotoneCounters: [],\n            timers: []\n          },\n          tags: this.buildTags(null, null),\n          targetReporterType: this.reporterType,\n          type: CsvMetricReporter.MESSAGE_TYPE\n        }\n        await this.options.clusterOptions.sendToMaster(message)\n      } else {\n        await this.options.writer.init(this.header)\n        await this.handleResults(null, null, event.getTime(), 'gauge', [{\n          metric: event,\n          result\n        }])\n      }\n    }\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Indicates if the init method of the writer instance should be called.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof CsvMetricReporter\n   */\n  protected shouldCallInit (): boolean {\n    return !this.options.clusterOptions ||\n      !this.options.clusterOptions.enabled ||\n      (this.options.clusterOptions.enabled && !this.options.clusterOptions.sendMetricsToMaster)\n  }\n\n  /**\n   * Makes sure the csv headers are built, written to the file to then\n   * call the parent class's implementation of this method.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof CsvMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n    if (this.canHandleMessage(message)) {\n      if (!this.header) {\n        this.header = await this.buildHeaders()\n      }\n      await this.options.writer.init(this.header)\n      await super.handleReportMessage(worker, message, handle)\n    }\n  }\n\n  /**\n   * Calls the init method of the writer instance if\n   * the metrics are not send to the master process\n   * (so probably only called by master-process if clustering is enabled).\n   *\n   * @protected\n   * @memberof CsvMetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    if (this.shouldCallInit()) {\n      await this.options.writer.init(this.header)\n    }\n  }\n\n  /**\n   * Writes the reporting results to the writer instance.\n   *\n   * @protected\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof CsvMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const dateStr = moment.tz(date, this.options.timezone).format(this.options.dateFormat)\n    for (const result of results) {\n      const fields = result.result\n      const metric = result.metric\n      if (fields) {\n        const rows: Rows = []\n        for (const field of Object.keys(fields)) {\n          const row = this.buildRow(registry, dateStr, metric, type, field, fields[field])\n          rows.push(row)\n        }\n        if (rows.length > 0) {\n          await this.writeRows(metric, rows, type)\n        }\n      }\n    }\n  }\n\n  /**\n   * Gathers the fields for a counter metric.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(ReportingContext)} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${counter.getCount()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a gauge metric.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {ReportingContext>} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): Fields {\n    return {\n      value: `${gauge.getValue()}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a histogram metric.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): Fields {\n    const snapshot = histogram.getSnapshot()\n    const bucketFields: Fields = {}\n    histogram\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(histogram.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${this.getNumber(histogram.getCount())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: histogram.getSum().toString()\n    }\n  }\n\n  /**\n   * Gathers the fields for a meter metric.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): Fields {\n    return {\n      count: `${this.getNumber(meter.getCount())}`,\n      m15_rate: `${this.getNumber(meter.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(meter.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(meter.get5MinuteRate())}`,\n      mean_rate: `${this.getNumber(meter.getMeanRate())}`\n    }\n  }\n\n  /**\n   * Gathers the fields for a timer metric.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {ReportingContext} ctx\n   * @returns {Fields}\n   * @memberof CsvMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): Fields {\n    const snapshot = timer.getSnapshot()\n    const bucketFields: Fields = {}\n    timer\n      .getCounts()\n      .forEach((value, bucket): void => {\n        bucketFields[`bucket_${bucket}`] = `${value}`\n      })\n    bucketFields.bucket_inf = `${this.getNumber(timer.getCount())}`\n    return {\n      ...bucketFields,\n      count: `${timer.getCount() || 0}`,\n      m15_rate: `${this.getNumber(timer.get15MinuteRate())}`,\n      m1_rate: `${this.getNumber(timer.get1MinuteRate())}`,\n      m5_rate: `${this.getNumber(timer.get5MinuteRate())}`,\n      max: `${this.getNumber(snapshot.getMax())}`,\n      mean: `${this.getNumber(snapshot.getMean())}`,\n      mean_rate: `${this.getNumber(timer.getMeanRate())}`,\n      min: `${this.getNumber(snapshot.getMin())}`,\n      p50: `${this.getNumber(snapshot.getMedian())}`,\n      p75: `${this.getNumber(snapshot.get75thPercentile())}`,\n      p95: `${this.getNumber(snapshot.get95thPercentile())}`,\n      p98: `${this.getNumber(snapshot.get98thPercentile())}`,\n      p99: `${this.getNumber(snapshot.get99thPercentile())}`,\n      p999: `${this.getNumber(snapshot.get999thPercentile())}`,\n      stddev: `${this.getNumber(snapshot.getStdDev())}`,\n      sum: timer.getSum().toString()\n    }\n  }\n\n  /**\n   * Builds a row / string array with all headers. Also updated the internal data of the reporter.\n   *\n   * @private\n   * @returns {Promise}\n   * @memberof CsvMetricReporter\n   */\n  private async buildHeaders (): Promise {\n    const headers: Row = []\n\n    for (const columnType of this.options.columns) {\n      if (columnType === 'metadata' && this.options.metadataExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const metadataNames = this.getAllMetadataKeys()\n        const filteredNames = await this.filterKeys(metadataNames, this.options.metadataFilter)\n        filteredNames.forEach((metadataName) => {\n          headers.push(`${this.options.metadataColumnPrefix}${metadataName}`)\n          this.metadataNames.push(metadataName)\n        })\n      } else if (columnType === 'tags' && this.options.tagExportMode === ExportMode.EACH_IN_OWN_COLUMN) {\n        const tagNames = this.getAllTagKeys()\n        const filteredTags = await this.filterKeys(tagNames, this.options.tagFilter)\n        filteredTags.forEach((tag) => {\n          headers.push(`${this.options.tagColumnPrefix}${tag}`)\n          this.tagsNames.push(tag)\n        })\n      } else {\n        headers.push(columnType)\n      }\n    }\n\n    return headers\n  }\n\n  /**\n   * Filters the given set of strings using the given filter and returns the filtered set.\n   *\n   * @private\n   * @param {Set} keys\n   * @param {Filter} filter\n   * @returns {Promise>}\n   * @memberof CsvMetricReporter\n   */\n  private async filterKeys (keys: Set, filter: Filter): Promise> {\n    const filteredKeys = new Set()\n    const tasks: Array> = []\n    keys.forEach((key) => {\n      tasks.push((async () => {\n        if (!filter || await filter(null, key, null)) {\n          filteredKeys.add(key)\n        }\n      })())\n    })\n    await Promise.all(tasks)\n    return filteredKeys\n  }\n\n  /**\n   * Gets all metadata keys - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllMetadataKeys (): Set {\n    const metadataNames = new Set()\n    this.metricRegistries\n      .map((registry) => registry.getMetricList())\n      .map((metrics) => metrics.map((metric) => metric.getMetadataMap()))\n      .forEach((metadataMapArray) => {\n        metadataMapArray.forEach((metadataMap) => {\n          for (const metadataName of metadataMap.keys()) {\n            metadataNames.add(metadataName)\n          }\n        })\n      })\n    return metadataNames\n  }\n\n  /**\n   * Gets all tag names - no filtering.\n   *\n   * @private\n   * @returns {Set}\n   * @memberof CsvMetricReporter\n   */\n  private getAllTagKeys (): Set {\n    const tags = new Set()\n    this.options.tags.forEach((value, tag) => tags.add(tag))\n    this.metricRegistries\n      .map((registry) => ({\n        metrics: registry.getMetricList(),\n        registry\n      }))\n      .map((result) => result.metrics.map((metric) => this.buildTags(result.registry, metric)))\n      .forEach((metricTagsArray) => {\n        metricTagsArray.forEach((metricTags) => {\n          Object.keys(metricTags).forEach((tag) => tags.add(tag))\n        })\n      })\n    return tags\n  }\n\n  /**\n   * Builds the row of a single metric.\n   *\n   * @private\n   * @template T\n   * @param {MetricRegistry | null} registry\n   * @param {string} dateStr\n   * @param {T} metric\n   * @param {MetricType} type\n   * @param {string} field\n   * @param {string} value\n   * @returns {Row}\n   * @memberof CsvMetricReporter\n   */\n  private buildRow(\n    registry: MetricRegistry | null,\n    dateStr: string,\n    metric: T,\n    type: MetricType,\n    field: string,\n    value: string): Row {\n    const quote = this.options.useSingleQuotes ? \"'\" : '\"'\n    const row: Row = []\n    const tags = this.buildTags(registry, metric)\n\n    let metadataStr = ''\n    if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      const metadata: Metadata = getMetricMetadata(metric)\n      Object.keys(metadata).forEach((metadataName) => {\n        const metadataValue = metadata[metadataName]\n        metadataStr += `${metadataName}=${quote}${metadataValue}${quote}${this.options.metadataDelimiter}`\n      })\n      metadataStr = metadataStr.slice(0, -1)\n    }\n\n    let tagStr = ''\n    if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n      tagStr = Object.keys(tags)\n        .map((tag) => `${tag}=${quote}${tags[tag]}${quote}`)\n        .join(this.options.tagDelimiter)\n    }\n\n    for (const columnType of this.options.columns) {\n      let tmpStr = ''\n      switch (columnType) {\n        case 'date':\n          row.push(dateStr)\n          break\n        case 'description':\n          tmpStr = encodeURIComponent(getMetricDescription(metric) || '')\n          if (quote === \"'\") {\n            tmpStr = tmpStr.replace(/'/g, \"\\\\'\")\n          }\n          row.push(`${quote}${tmpStr}${quote}`)\n          break\n        case 'field':\n          row.push(`${quote}${field || ''}${quote}`)\n          break\n        case 'group':\n          row.push(`${quote}${getMetricGroup(metric) || ''}${quote}`)\n          break\n        case 'metadata':\n          if (this.options.metadataExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(metadataStr)\n          } else {\n            const metadata: Metadata = getMetricMetadata(metric)\n            for (const metadataName of this.metadataNames) {\n              row.push(`${quote}${metadata[metadataName] || ''}${quote}`)\n            }\n          }\n          break\n        case 'name':\n          row.push(`${quote}${getMetricName(metric) || ''}${quote}`)\n          break\n        case 'tags':\n          if (this.options.tagExportMode === ExportMode.ALL_IN_ONE_COLUMN) {\n            row.push(tagStr)\n          } else {\n            for (const tag of this.tagsNames) {\n              row.push(`${quote}${tags[tag] || ''}${quote}`)\n            }\n          }\n          break\n        case 'type':\n          row.push(`${quote}${type || ''}${quote}`)\n          break\n        case 'value':\n          row.push(value || '')\n          break\n        default:\n      }\n    }\n\n    return row\n  }\n\n  /**\n   * Writes the rows by calling the corresponding {@link CsvFileWriter}.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {Rows} rows\n   * @param {MetricType} type\n   * @memberof CsvMetricReporter\n   */\n  private async writeRows(\n    metric: T,\n    rows: Rows,\n    type: MetricType\n  ): Promise {\n    for (const row of rows) {\n      await this.options.writer.writeRow(metric, row)\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:22\n                \n            \n\n\n            \n                \n                    Gets the current value of the gauge.\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { BaseMetric, Metric, SerializableMetric } from './model/metric'\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @extends {SerializableMetric}\n * @template T\n */\nexport interface Gauge extends Metric, SerializableMetric {\n\n  /**\n   * Gets the current value of the gauge.\n   *\n   * @returns {T}\n   * @memberof Gauge\n   */\n  getValue(): T\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n  /**\n   * The value - initially set to 0.\n   *\n   * @private\n   * @type {number}\n   * @memberof SimpleGauge\n   */\n  private value: number = 0;\n\n  /**\n   * Creates an instance of SimpleGauge with an optional name.\n   *\n   * @param {string} [name] optional metric name.\n   * @param {string} [description] optional metric description.\n   * @memberof SimpleGauge\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Gets the current value.\n   *\n   * @returns {number}\n   * @memberof SimpleGauge\n   */\n  public getValue (): number {\n    return this.value\n  }\n\n  /**\n   * Sets the current value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof SimpleGauge\n   */\n  public setValue (value: number): this {\n    this.value = value\n    return this\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SimpleGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.value\n    return json\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/groupable.ts\n        \n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getGroup\n                                \n                                \n                                    setGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getGroup\n                        \n                        \n                    \n                \n            \n            \n                \ngetGroup()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/groupable.ts:18\n                \n            \n\n\n            \n                \n                    Gets the group name.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setGroup\n                        \n                        \n                    \n                \n            \n            \n                \nsetGroup(group: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/groupable.ts:27\n                \n            \n\n\n            \n                \n                    Sets the group name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new group name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n  /**\n   * Gets the group name.\n   *\n   * @returns {string}\n   * @memberof Groupable\n   */\n  getGroup(): string;\n\n  /**\n   * Sets the group name.\n   *\n   * @param {string} group the new group name\n   * @returns {this}\n   * @memberof Groupable\n   */\n  setGroup(group: string): this;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HdrSnapshot.html":{"url":"classes/HdrSnapshot.html","title":"class - HdrSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HdrSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n        \n\n            \n                Description\n            \n            \n                Snapshot implementation for a HdrHistogram reference.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Snapshot\n                            SerializedSnapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    values\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reference: any)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of HdrSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reference\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get75thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:42\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 75th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get95thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:53\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 95th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get98thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:64\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 98th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get999thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:75\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99.9th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get99thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:86\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMax\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:108\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the max value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:160\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the mean value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMedian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:97\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 50th percentile.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:119\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the min value - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStdDev\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:171\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the standard deviation - if NaN returns 0.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:182\n                \n            \n\n\n            \n                \n                    Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the given percentile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:139\n                \n            \n\n\n            \n                \n                    Always returns an empty array.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            size\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:149\n                \n            \n\n\n            \n                \n                    Returns the count of all values recorded.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        values\n                    \n                \n\n                \n                    \n                        getvalues()\n                    \n                \n                            \n                                \n                                    Defined in packages/inspector-metrics/lib/metrics/hdr-histogram.ts:129\n                                \n                            \n                    \n                        \n                                Always returns an empty array.\n\n\n                                \n                                \n                                \n                                    Returns :     number[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Histogram } from './histogram'\nimport { BucketCounting, Buckets, Counting } from './model/counting'\nimport { Metric } from './model/metric'\nimport { Sampling } from './model/sampling'\nimport { SerializedSnapshot, Snapshot } from './model/snapshot'\nimport { Summarizing } from './model/summarizing'\n\n/**\n * The 'native-hdr-histogram' module (optional).\n */\nlet NativeHistogram: any = null\ntry {\n  NativeHistogram = require('native-hdr-histogram')\n} catch (e) {\n}\n\n/**\n * Snapshot implementation for a {@link HdrHistogram} reference.\n *\n * @export\n * @class HdrSnapshot\n * @implements {Snapshot}\n */\nexport class HdrSnapshot implements Snapshot, SerializedSnapshot {\n  /**\n   * Creates an instance of HdrSnapshot.\n   * @param {*} reference\n   * @memberof HdrSnapshot\n   */\n  public constructor (private readonly reference: any) {\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 75th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get75thPercentile (): number {\n    return this.reference.histogram.percentile(75)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 95th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get95thPercentile (): number {\n    return this.reference.histogram.percentile(95)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 98th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get98thPercentile (): number {\n    return this.reference.histogram.percentile(98)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 99.9th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get999thPercentile (): number {\n    return this.reference.histogram.percentile(99.9)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 99th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public get99thPercentile (): number {\n    return this.reference.histogram.percentile(99)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the 50th percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMedian (): number {\n    return this.reference.histogram.percentile(50)\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the max value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMax (): number {\n    return this.reference.histogram.max() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the min value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMin (): number {\n    return this.reference.histogram.min() || 0\n  }\n\n  /**\n   * Always returns an empty array.\n   *\n   * @returns {number[]}\n   * @memberof HdrSnapshot\n   */\n  public get values (): number[] {\n    return []\n  }\n\n  /**\n   * Always returns an empty array.\n   *\n   * @returns {number[]}\n   * @memberof HdrSnapshot\n   */\n  public getValues (): number[] {\n    return []\n  }\n\n  /**\n   * Returns the count of all values recorded.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public size (): number {\n    return this.reference.getCount()\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getMean (): number {\n    return this.reference.histogram.mean() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getStdDev (): number {\n    return this.reference.histogram.stddev() || 0\n  }\n\n  /**\n   * Calls the native hrd-histogram implementation of the\n   * referenced {@link HdrHistogram} for the given percentile.\n   *\n   * @returns {number}\n   * @memberof HdrSnapshot\n   */\n  public getValue (quantile: number): number {\n    return this.reference.histogram.percentile(quantile * 100.0)\n  }\n}\n\n/**\n * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n *\n * @export\n * @class HdrHistogram\n * @extends {Histogram}\n * @implements {BucketCounting}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n * @implements {Summarizing}\n */\nexport class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {\n  /**\n   * histogram instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof HdrHistogram\n   */\n  private readonly histogram: any;\n  /**\n   * Snapshot instance.\n   *\n   * @private\n   * @type {HdrSnapshot}\n   * @memberof HdrHistogram\n   */\n  private readonly hdrSnapshot: HdrSnapshot;\n\n  /**\n   * Creates an instance of HdrHistogram.\n   * Throws an error if the 'native-hdr-histogram' module is not installed.\n   *\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [name]\n   * @param {string} [description]\n   * @param {Buckets} [buckets=new Buckets()]\n   * @memberof HdrHistogram\n   */\n  public constructor (\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    name?: string,\n    description?: string,\n    buckets: Buckets = new Buckets()) {\n    super(null, name, description, buckets)\n\n    if (!NativeHistogram) {\n      throw new Error(\"Module 'native-hdr-histogram' not found. \" +\n                            \"Please install the optional dependencies of 'inspector-metrics' module.\")\n    }\n\n    this.histogram = new NativeHistogram(lowest, max, figures)\n    this.hdrSnapshot = new HdrSnapshot(this)\n  }\n\n  /**\n   * Returns the internal instance of {@link HdrSnapshot}.\n   *\n   * @readonly\n   * @type {SerializedSnapshot}\n   * @memberof HdrHistogram\n   */\n  public get snapshot (): SerializedSnapshot {\n    return this.hdrSnapshot\n  }\n\n  /**\n   * Gets the snapshot instance.\n   *\n   * @returns {Snapshot}\n   * @memberof HdrHistogram\n   */\n  public getSnapshot (): Snapshot {\n    return this.hdrSnapshot\n  }\n\n  /**\n   * Updates the histogram, all counters and th overall sum with the given value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof HdrHistogram\n   */\n  public update (value: number): this {\n    this.count++\n    this.sumInternal.add(value)\n    for (const boundary of this.bucketsInternal.boundaries) {\n      if (value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMetricReporter.html":{"url":"interfaces/IMetricReporter.html","title":"interface - IMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Interface for metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addMetricRegistry\n                                \n                                \n                                    flushEvents\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeMetricRegistry\n                                \n                                \n                                    reportEvent\n                                \n                                \n                                    setTags\n                                \n                                \n                                    start\n                                \n                                \n                                    stop\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addMetricRegistry\n                        \n                        \n                    \n                \n            \n            \n                \naddMetricRegistry(metricRegistry: MetricRegistry)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:71\n                \n            \n\n\n            \n                \n                    Adds a new MetricRegistry to be reported.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metricRegistry\n                                    \n                                                MetricRegistry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            flushEvents\n                        \n                        \n                    \n                \n            \n            \n                \nflushEvents()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:106\n                \n            \n\n\n            \n                \n                    Sends events remaining in the queue (if a queue is used in the implementation).\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \ngetTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:35\n                \n            \n\n\n            \n                \n                    Gets the reporter tags.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeMetricRegistry\n                        \n                        \n                    \n                \n            \n            \n                \nremoveMetricRegistry(metricRegistry: MetricRegistry)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:80\n                \n            \n\n\n            \n                \n                    Removes the given MetricRegistry if it was previously added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metricRegistry\n                                    \n                                                MetricRegistry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reportEvent\n                        \n                        \n                    \n                \n            \n            \n                \nreportEvent(event: TEvent)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:98\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TEventData\n                        TEvent\n                    \n                \n            \n\n            \n                \n                    Reports an Event.\nImplementations can choose how to process ad-hoc events, wether it's\nqueuing the events to the next call to report or sending events\nimmediately.\nAlso the usual reporting process of calling #beforeReport, do the reporting\nand call #afterReport may not be applied for ad-hoc events.\nThis implementation does nothing and always resolved the specified event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                TEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTags\n                        \n                        \n                    \n                \n            \n            \n                \nsetTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:44\n                \n            \n\n\n            \n                \n                    Sets the reporter tags.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:53\n                \n            \n\n\n            \n                \n                    Implementations start reporting metrics when called.\n\n\n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:62\n                \n            \n\n\n            \n                \n                    Implementations stop reporting metrics when called.\n\n\n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { getMetricTags, Metric } from \"../model/metric\";\nimport { Taggable, Tags, tagsToMap } from \"../model/taggable\";\nimport { MILLISECOND, MINUTE } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { InterprocessMessage, InterprocessReportMessage } from \"./interprocess-message\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof IMetricReporter\n   */\n  getTags(): Map;\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  reportEvent>(event: TEvent): Promise;\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  flushEvents(): Promise;\n}\n\n/**\n * Pseudo-{@link MetricRegistry} used to provide an interface for registry tags.\n *\n * @class TagsOnlyMetricRegistry\n */\nclass TagsOnlyMetricRegistry {\n\n  /**\n   * private tags map.\n   *\n   * @private\n   * @type {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  private tags: Map;\n\n  /**\n   * Creates an instance of TagsOnlyMetricRegistry.\n   *\n   * @param {Tags} tags\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public constructor(tags: Tags) {\n      this.tags = tagsToMap(tags);\n  }\n\n  /**\n   * Gets the tags map.\n   *\n   * @returns {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public getTags(): Map {\n      return this.tags;\n  }\n\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-messages\n   * from reporter of forked processes.\n   *\n   * @static\n   * @memberof MetricReporter\n   */\n  public static readonly MESSAGE_TYPE = \"inspector-metrics:metric-reporter:report\";\n\n  /**\n   * {@link MetricRegistry} instances.\n   *\n   * @protected\n   * @readonly\n   * @type {MetricRegistry[]}\n   * @memberof MetricReporter\n   */\n  protected readonly metricRegistries: MetricRegistry[] = [];\n  /**\n   * options for this reporter instance.\n   *\n   * @protected\n   * @readonly\n   * @type {O}\n   * @memberof MetricReporter\n   */\n  protected readonly options: O;\n  /**\n   * Keeps track of the reporting states for each metric.\n   *\n   * @protected\n   * @readonly\n   * @type {Map}\n   * @memberof MetricReporter\n   */\n  protected readonly metricStates: Map = new Map();\n  /**\n   * The type of the reporter implementation - for internal use.\n   *\n   * @protected\n   * @readonly\n   * @type {string}\n   * @memberof MetricReporter\n   */\n  protected readonly reporterType: string;\n\n  /**\n   * Creates an instance of MetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof MetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n      this.options = options;\n      this.reporterType = reporterType || this.constructor.name;\n      const clusterOptions = this.options.clusterOptions;\n      if (clusterOptions &&\n          clusterOptions.enabled &&\n          !clusterOptions.sendMetricsToMaster) {\n          clusterOptions.eventReceiver.on(\"message\", (worker, message, handle) =>\n              this.handleReportMessage(worker, message, handle));\n      }\n  }\n\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof MetricReporter\n   */\n  public getTags(): Map {\n      return this.options.tags;\n  }\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public setTags(tags: Map): this {\n      this.options.tags = tags;\n      return this;\n  }\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public addMetricRegistry(metricRegistry: MetricRegistry): this {\n      this.metricRegistries.push(metricRegistry);\n      return this;\n  }\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n      const index: number = this.metricRegistries.indexOf(metricRegistry);\n      if (index > -1) {\n          this.metricRegistries.splice(index, 1);\n      }\n      return this;\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      return event;\n  }\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async flushEvents(): Promise {\n  }\n\n  /**\n   * Checks if the specified message can be handle by this metric-reporter and is of the desired type.\n   *\n   * @protected\n   * @param {InterprocessMessage} message\n   * @param {string} [targetType=MetricReporter.MESSAGE_TYPE]\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected canHandleMessage(\n      message: InterprocessMessage,\n      targetType: string = MetricReporter.MESSAGE_TYPE): boolean {\n      return message &&\n          message.type && message.type === targetType &&\n          message.targetReporterType && message.targetReporterType === this.reporterType;\n  }\n\n  /**\n   * Handles messages from forked processes.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof MetricReporter\n   */\n  protected async handleReportMessage(worker: cluster.Worker, message: any, handle: any) {\n      if (this.canHandleMessage(message)) {\n          const report: InterprocessReportMessage = message;\n          const reg: MetricRegistry = (new TagsOnlyMetricRegistry(report.tags) as any) as MetricRegistry;\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.monotoneCounters);\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.counters);\n          await this.handleResults(report.ctx, reg, report.date, \"gauge\", report.metrics.gauges);\n          await this.handleResults(report.ctx, reg, report.date, \"histogram\", report.metrics.histograms);\n          await this.handleResults(report.ctx, reg, report.date, \"meter\", report.metrics.meters);\n          await this.handleResults(report.ctx, reg, report.date, \"timer\", report.metrics.timers);\n      }\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Called after each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async afterReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Run the reporting procedures. Calls {@link #beforeReport} before each\n   * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n   * afterwards.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async report(): Promise {\n      if (this.metricRegistries && this.metricRegistries.length > 0) {\n          const ctx = this.createOverallReportContext();\n          await this.beforeReport(ctx);\n          for (const registry of this.metricRegistries) {\n              await this.reportMetricRegistry(ctx, registry);\n          }\n          await this.afterReport(ctx);\n          return ctx;\n      }\n      return {};\n  }\n\n  /**\n   * Reporting function for a single {@link MetricRegistry}.\n   * Calls {@link #createReportingContext} for each metric type.\n   * Afterwards calls {@link #reportMetrics} for each of the\n   * registry's metrics - grouped by type.\n   * And finally calls {@link #handleResults} for each of the results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @memberof MetricReporter\n   */\n  protected async reportMetricRegistry(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null) {\n\n      const date: Date = new Date(this.options.clock.time().milliseconds);\n      const counterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"counter\");\n      const gaugeCtx: MetricSetReportContext> = this\n          .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n      const histogramCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n      const meterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"meter\");\n      const timerCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n      counterCtx.metrics = registry.getMonotoneCounterList();\n      const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n          (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n          (counter: MonotoneCounter) => counter.getCount());\n\n      counterCtx.metrics = registry.getCounterList();\n      const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n          (counter: Counter) => this.reportCounter(counter, counterCtx),\n          (counter: Counter) => counter.getCount());\n\n      gaugeCtx.metrics = registry.getGaugeList();\n      const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n          (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n          (gauge: Gauge) => gauge.getValue());\n\n      histogramCtx.metrics = registry.getHistogramList();\n      const histogramResults = this.reportMetrics(ctx, histogramCtx,\n          (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n          (histogram: Histogram) => histogram.getCount());\n\n      meterCtx.metrics = registry.getMeterList();\n      const meterResults = this.reportMetrics(ctx, meterCtx,\n          (meter: Meter) => this.reportMeter(meter, meterCtx),\n          (meter: Meter) => meter.getCount());\n\n      timerCtx.metrics = registry.getTimerList();\n      const timerResults = this.reportMetrics(ctx, timerCtx,\n          (timer: Timer) => this.reportTimer(timer, timerCtx),\n          (timer: Timer) => timer.getCount());\n\n      if (this.sendMetricsToMaster()) {\n          const message: InterprocessReportMessage = {\n              ctx,\n              date,\n              metrics: {\n                  counters: counterResults,\n                  gauges: gaugeResults,\n                  histograms: histogramResults,\n                  meters: meterResults,\n                  monotoneCounters: monotoneCounterResults,\n                  timers: timerResults,\n              },\n              tags: this.buildTags(registry, null),\n              targetReporterType: this.reporterType,\n              type: MetricReporter.MESSAGE_TYPE,\n          };\n          this.options.clusterOptions.sendToMaster(message);\n      } else {\n          await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n          await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n          await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n          await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n          await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n          await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n      }\n  }\n\n  /**\n   * Called in {@link #reportMetricRegistry} to determine to send a reporting-message to the master process.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected sendMetricsToMaster(): boolean {\n      return  this.options.clusterOptions &&\n              this.options.clusterOptions.enabled &&\n              this.options.clusterOptions.sendMetricsToMaster;\n  }\n\n  /**\n   * Creates an OverallReportContext.\n   *\n   * @protected\n   * @returns {OverallReportContext}\n   * @memberof MetricReporter\n   */\n  protected createOverallReportContext(): OverallReportContext {\n      return {\n      };\n  }\n\n  /**\n   * Creates a MetricSetReportContext with the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {MetricSetReportContext}\n   * @memberof MetricReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType): MetricSetReportContext {\n      return {\n          date,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Filters out each metric that does not necessarily need to be reported\n   * and calls the specified reporting function for the remaining.\n   *\n   * @protected\n   * @template M type of the metric\n   * @template C typed ReportingContext\n   * @param {C} ctx\n   * @param {(metric: M, ctx: C) => T} reportFunction\n   * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n   * @returns {Array>}\n   * @memberof MetricReporter\n   */\n  protected reportMetrics>(\n      overallCtx: OverallReportContext,\n      ctx: C,\n      reportFunction: (metric: M, ctx: C) => T,\n      lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n      return ctx.metrics\n          .filter((metric) => {\n              const metricId = (metric as any).id;\n              return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n          })\n          .map((metric) => ({\n              metric,\n              result: reportFunction(metric, ctx),\n          }))\n          .filter((result) => !!result.result);\n  }\n\n  /**\n   * Handles the reporting result for a group of metric instances.\n   *\n   * @protected\n   * @abstract\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  protected abstract handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>): Promise;\n\n  /**\n   * Does the reporting for a counter or monotone counter.\n   *\n   * @protected\n   * @abstract\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportCounter(\n      counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a gauge.\n   *\n   * @protected\n   * @abstract\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n  /**\n   * Does the reporting for a histogram.\n   *\n   * @protected\n   * @abstract\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a meter.\n   *\n   * @protected\n   * @abstract\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a timer.\n   *\n   * @protected\n   * @abstract\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n  /**\n   * Determines if a metric instance has changed it's value since the last check.\n   * This is always true if the minimal-reporting timeout was reached.\n   *\n   * @private\n   * @param {number} metricId\n   * @param {number} lastValue\n   * @param {number} date\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n      let changed = true;\n      let metricEntry = {\n          lastReport: 0,\n          lastValue,\n      };\n      if (this.metricStates.has(metricId)) {\n          metricEntry = this.metricStates.get(metricId);\n          changed = metricEntry.lastValue !== lastValue;\n          if (!changed) {\n              const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n              changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n      }\n      if (registry && registry.getTags()) {\n          registry.getTags().forEach((tag, key) => tags[key] = tag);\n      }\n      if (taggable) {\n          const customTags = getMetricTags(taggable);\n          Object.keys(customTags).forEach((key) => tags[key] = customTags[key]);\n      }\n      return tags;\n  }\n\n  /**\n   * Checks the number and gives it back or zero (0) if it's not a number.\n   *\n   * @protected\n   * @param {number} value\n   * @returns {number}\n   * @memberof MetricReporter\n   */\n  protected getNumber(value: number): number {\n      if (isNaN(value)) {\n          return 0;\n      }\n      return value;\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfluxMetricReporterOptions.html":{"url":"interfaces/InfluxMetricReporterOptions.html","title":"interface - InfluxMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InfluxMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for InfluxMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        log\n                                \n                                \n                                        sender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:         Sender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Sender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sender implementation used to send metrics to influx DB server.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { IPoint } from 'influx'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n   * Indicates if the sender is ready to send data.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  isReady(): Promise\n\n  /**\n   * Triggers the initialization process.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  init(): Promise\n\n  /**\n   * Sends the given data points to influxdb.\n   *\n   * @param {IPoint[]} points\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  send(points: IPoint[]): Promise\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * A logger instance used to report errors.\n   *\n   * @type {(Logger | null)}\n   * @memberof InfluxMetricReporterOptions\n   */\n  log: Logger | null\n  /**\n   * A sender implementation used to send metrics to influx DB server.\n   *\n   * @type {Sender}\n   * @memberof InfluxMetricReporterOptions\n   */\n  readonly sender: Sender\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof InfluxMetricReporter\n   */\n  private readonly logMetadata: any;\n\n  /**\n   * Creates an instance of InfluxMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof InfluxMetricReporter\n   */\n  public constructor ({\n    sender,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    clusterOptions = new DefaultClusterOptions(),\n    tags = new Map()\n  }: InfluxMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      sender,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof InfluxMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {(Logger | null)} log\n   * @memberof InfluxMetricReporter\n   */\n  public setLog (log: Logger | null): void {\n    this.options.log = log\n  }\n\n  /**\n   * Starts the sender and calls the super method to start scheduling.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start (): Promise {\n    await this.options.sender.init()\n    return await super.start()\n  }\n\n  /**\n   * Sends an event directly to influxdb.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!(await this.options.sender.isReady())) {\n      throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\")\n    }\n\n    const value = event.getValue()\n    if (!value) {\n      return await Promise.reject(new Error('Invalid event value'))\n    }\n\n    const point = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: {},\n      registry: null,\n      type: 'gauge'\n    })\n    point.timestamp = event.getTime()\n\n    try {\n      await this.handleResults({}, null, null, 'gauge', [{\n        metric: event,\n        result: point\n      }])\n\n      if (this.options.log) {\n        this.options.log.debug('wrote event', this.logMetadata)\n      }\n      return event\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing event - reason: ${message}`, reason, this.logMetadata)\n      }\n      throw reason\n    }\n  }\n\n  /**\n   * Reports the data points for each registered {@link MetricRegistry}.\n   *\n   * @protected\n   * @memberof InfluxMetricReporter\n   */\n  protected async report (): Promise {\n    const senderReady = await this.options.sender.isReady()\n    if (senderReady) {\n      return await super.report()\n    }\n    return {}\n  }\n\n  /**\n   * Uses the sender to report the given data points.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const points = results.map((result) => result.result)\n    if (points.length === 0) {\n      return\n    }\n\n    try {\n      points.forEach((point) => {\n        if (!(point.timestamp instanceof Date)) {\n          point.timestamp = new Date(point.timestamp)\n        }\n      })\n\n      await this.options.sender.send(points)\n      if (this.options.log) {\n        this.options.log.debug(`wrote ${type} metrics`, this.logMetadata)\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): IPoint {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(counter)\n    const measurement = this.getMeasurementName(counter)\n\n    fields[`${fieldNamePrefix}count`] = counter.getCount() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, counter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(gauge)\n    const measurement = this.getMeasurementName(gauge)\n\n    fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(histogram)\n    const measurement = this.getMeasurementName(histogram)\n\n    fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, histogram),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): IPoint {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(meter)\n    const measurement = this.getMeasurementName(meter)\n\n    fields[`${fieldNamePrefix}count`] = meter.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, meter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): IPoint {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(timer)\n    const measurement = this.getMeasurementName(timer)\n\n    fields[`${fieldNamePrefix}count`] = timer.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, timer),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds the prefix for a field name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getFieldNamePrefix (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getName()}.`\n    }\n    return ''\n  }\n\n  /**\n   * Builds the prefix for the metric name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getMeasurementName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return metric.getGroup()\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/int64.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            num\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:21\n                            \n                        \n\n                \n                    \n                        int64_t value instance.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:40\n                \n            \n\n\n            \n                \n                    Adds the specified value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toNumber()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:51\n                \n            \n\n\n            \n                \n                    Gets the 64bit value as javascript 32bit signed integer.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/int64.ts:61\n                \n            \n\n\n            \n                \n                    Converts the 64bit integer to it's string representation.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n  /**\n   * int64_t value instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof Int64Wrapper\n   */\n  private num: any;\n\n  /**\n   * Creates an instance of Int64Wrapper.\n   *\n   * @param {number} [initial=0]\n   * @memberof Int64Wrapper\n   */\n  public constructor(initial: number = 0) {\n    this.num = new Int64(initial);\n  }\n\n  /**\n   * Adds the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Int64Wrapper\n   */\n  public add(value: number): this {\n    this.num = this.num.add(value);\n    return this;\n  }\n\n  /**\n   * Gets the 64bit value as javascript 32bit signed integer.\n   *\n   * @returns {number}\n   * @memberof Int64Wrapper\n   */\n  public toNumber(): number {\n    return this.num.toNumber();\n  }\n\n  /**\n   * Converts the 64bit integer to it's string representation.\n   *\n   * @returns {string}\n   * @memberof Int64Wrapper\n   */\n  public toString(): string {\n    return this.num.toString();\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessMessage.html":{"url":"interfaces/InterprocessMessage.html","title":"interface - InterprocessMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InterprocessMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n        \n\n            \n                Description\n            \n            \n                Interface for common inter-process messages.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        targetReporterType\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targetReporterType\n                                    \n                                \n                                \n                                    \n                                        targetReporterType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the reported which sent the metrics to the master process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type property of the message sent to the master process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializableMetric } from \"../model/metric\";\nimport { Tags } from \"../model/taggable\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for common inter-process messages.\n *\n * @export\n * @interface InterprocessMessage\n */\nexport interface InterprocessMessage {\n  /**\n   * Type of the reported which sent the metrics to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  targetReporterType: string;\n  /**\n   * The type property of the message sent to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  type: string;\n}\n\n/**\n * Interface for reports from reporters in forked processes.\n *\n * @export\n * @interface InterprocessReportMessage\n * @template T\n */\nexport interface InterprocessReportMessage extends InterprocessMessage {\n  /**\n   * Reporting context from forked process.\n   *\n   * @type {OverallReportContext}\n   * @memberof InterprocessReportMessage\n   */\n  ctx: OverallReportContext;\n  /**\n   * Date from report function in forked process.\n   *\n   * @type {Date}\n   * @memberof InterprocessReportMessage\n   */\n  date: Date;\n  /**\n   * Tags from originating {@link MetricRegistry}.\n   *\n   * @type {Tags}\n   * @memberof InterprocessReportMessage\n   */\n  tags: Tags;\n  /**\n   * Collection of metric reporting results from forked process.\n   *\n   * @type {{\n   *         counters: Array>;\n   *         gauges: Array>;\n   *         histograms: Array>;\n   *         meters: Array>;\n   *         monotoneCounters: Array>;\n   *         timers: Array>;\n   *     }}\n   * @memberof InterprocessReportMessage\n   */\n  metrics: {\n      counters: Array>;\n      gauges: Array>;\n      histograms: Array>;\n      meters: Array>;\n      monotoneCounters: Array>;\n      timers: Array>;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportMessage.html":{"url":"interfaces/InterprocessReportMessage.html","title":"interface - InterprocessReportMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InterprocessReportMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n        \n\n            \n                Description\n            \n            \n                Interface for reports from reporters in forked processes.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctx\n                                \n                                \n                                        date\n                                \n                                \n                                        metrics\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctx\n                                    \n                                \n                                \n                                    \n                                        ctx:         OverallReportContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverallReportContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Reporting context from forked process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date from report function in forked process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metrics\n                                    \n                                \n                                \n                                    \n                                        metrics:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Collection of metric reporting results from forked process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tags from originating MetricRegistry.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializableMetric } from \"../model/metric\";\nimport { Tags } from \"../model/taggable\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for common inter-process messages.\n *\n * @export\n * @interface InterprocessMessage\n */\nexport interface InterprocessMessage {\n  /**\n   * Type of the reported which sent the metrics to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  targetReporterType: string;\n  /**\n   * The type property of the message sent to the master process.\n   *\n   * @type {string}\n   * @memberof InterprocessReportMessage\n   */\n  type: string;\n}\n\n/**\n * Interface for reports from reporters in forked processes.\n *\n * @export\n * @interface InterprocessReportMessage\n * @template T\n */\nexport interface InterprocessReportMessage extends InterprocessMessage {\n  /**\n   * Reporting context from forked process.\n   *\n   * @type {OverallReportContext}\n   * @memberof InterprocessReportMessage\n   */\n  ctx: OverallReportContext;\n  /**\n   * Date from report function in forked process.\n   *\n   * @type {Date}\n   * @memberof InterprocessReportMessage\n   */\n  date: Date;\n  /**\n   * Tags from originating {@link MetricRegistry}.\n   *\n   * @type {Tags}\n   * @memberof InterprocessReportMessage\n   */\n  tags: Tags;\n  /**\n   * Collection of metric reporting results from forked process.\n   *\n   * @type {{\n   *         counters: Array>;\n   *         gauges: Array>;\n   *         histograms: Array>;\n   *         meters: Array>;\n   *         monotoneCounters: Array>;\n   *         timers: Array>;\n   *     }}\n   * @memberof InterprocessReportMessage\n   */\n  metrics: {\n      counters: Array>;\n      gauges: Array>;\n      histograms: Array>;\n      meters: Array>;\n      monotoneCounters: Array>;\n      timers: Array>;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportRequest.html":{"url":"interfaces/InterprocessReportRequest.html","title":"interface - InterprocessReportRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InterprocessReportRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/InterprocessReportRequest.ts\n        \n\n            \n                Description\n            \n            \n                A message send from master process to forked processes in order\nto get a response message with a metrics-string.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A unique id used to identify responses send back from forked processes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { InterprocessMessage } from 'inspector-metrics'\n\n/**\n * A message send from master process to forked processes in order\n * to get a response message with a metrics-string.\n *\n * @export\n * @interface InterprocessReportRequest\n * @extends {InterprocessMessage}\n */\nexport interface InterprocessReportRequest extends InterprocessMessage {\n  /**\n   * A unique id used to identify responses send back from forked processes.\n   *\n   * @type {string}\n   * @memberof InterprocessReportRequest\n   */\n  readonly id: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InterprocessReportResponse.html":{"url":"interfaces/InterprocessReportResponse.html","title":"interface - InterprocessReportResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InterprocessReportResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/InterprocessReportResponse.ts\n        \n\n            \n                Description\n            \n            \n                A message send from forked processes to the master process as response\nto a metric-request-message.\n\n            \n\n            \n                Extends\n            \n            \n                        InterprocessMessage\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        metricsStr\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Copy of the id from the request message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metricsStr\n                                    \n                                \n                                \n                                    \n                                        metricsStr:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The rendered metrics-string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { InterprocessMessage } from 'inspector-metrics'\n\n/**\n * A message send from forked processes to the master process as response\n * to a metric-request-message.\n *\n * @export\n * @interface InterprocessReportResponse\n * @extends {InterprocessMessage}\n */\nexport interface InterprocessReportResponse extends InterprocessMessage {\n  /**\n   * Copy of the id from the request message.\n   *\n   * @type {string}\n   * @memberof InterprocessReportResponse\n   */\n  readonly id: string\n  /**\n   * The rendered metrics-string.\n   *\n   * @type {string}\n   * @memberof InterprocessReportResponse\n   */\n  readonly metricsStr: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor;\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            length\n                        \n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/size-gauge.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor;\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogLine.html":{"url":"interfaces/LogLine.html","title":"interface - LogLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface to abstract a log-line.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        metadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message string passed to the logger instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata passed to the logger instance as second parameter.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger.ts\n        \n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        error\n                                \n                                \n                                        info\n                                \n                                \n                                        trace\n                                \n                                \n                                        warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"debug\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\navailable since node 8\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"error\" level:\n\nthe first argument passed is usually the log message\nusually logs to stderr stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"info\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                    \n                                \n                                \n                                    \n                                        trace:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"trace\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                    \n                                \n                                \n                                    \n                                        warn:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logs at \"warn\" level:\n\nthe first argument passed is usually the log message\nusually logs to stdout stream\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n  /**\n   * Logs at \"error\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stderr stream\n   */\n  error: (...args: any[]) => any;\n  /**\n   * Logs at \"warn\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  warn: (...args: any[]) => any;\n  /**\n   * Logs at \"info\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  info: (...args: any[]) => any;\n  /**\n   * Logs at \"debug\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   * - available since node 8\n   */\n  debug: (...args: any[]) => any;\n  /**\n   * Logs at \"trace\" level:\n   * - the first argument passed is usually the log message\n   * - usually logs to stdout stream\n   */\n  trace: (...args: any[]) => any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReporterOptions.html":{"url":"interfaces/LoggerReporterOptions.html","title":"interface - LoggerReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for LoggerReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The logger instance used to report metrics.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerReportingContext.html":{"url":"interfaces/LoggerReportingContext.html","title":"interface - LoggerReportingContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerReportingContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for the reporting context.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricSetReportContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        logMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        logMetadata\n                                    \n                                \n                                \n                                    \n                                        logMetadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Common log metadata to extend.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { StdClock } from \"../clock\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MILLISECOND } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { Logger } from \"./logger\";\nimport { DefaultClusterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\nimport { ScheduledMetricReporter, ScheduledMetricReporterOptions } from \"./scheduled-reporter\";\n\n/**\n * Helper interface to abstract a log-line.\n *\n * @interface LogLine\n */\ninterface LogLine {\n  /**\n   * Message string passed to the logger instance.\n   *\n   * @type {string}\n   * @memberof LogLine\n   */\n  message: string;\n  /**\n   * Metadata passed to the logger instance as second parameter.\n   *\n   * @type {*}\n   * @memberof LogLine\n   */\n  metadata: any;\n}\n\n/**\n * Helper interface for the reporting context.\n *\n * @interface LoggerReportingContext\n * @extends {MetricSetReportContext}\n * @template M\n */\ninterface LoggerReportingContext extends MetricSetReportContext {\n  /**\n   * Common log metadata to extend.\n   *\n   * @type {*}\n   * @memberof LoggerReportingContext\n   */\n  readonly logMetadata: any;\n}\n\n/**\n * Options for {@link LoggerReporter}.\n *\n * @export\n * @class LoggerReporterOptions\n * @implements {ScheduledMetricReporterOptions}\n */\nexport interface LoggerReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The logger instance used to report metrics.\n   *\n   * @type {Logger}\n   * @memberof LoggerReporterOptions\n   */\n  log?: Logger;\n}\n\n/**\n * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.\n *\n * @export\n * @class LoggerReporter\n * @extends {MetricReporter}\n */\nexport class LoggerReporter extends ScheduledMetricReporter {\n\n  /**\n   * The metadata object passed to the {@link Logger} instance.\n   *\n   * @private\n   * @type {*}\n   * @memberof LoggerReporter\n   */\n  private logMetadata: any;\n\n  /**\n   * Creates an instance of LoggerReporter.\n   *\n   * @memberof LoggerReporter\n   */\n  public constructor({\n      log = console,\n      reportInterval = 1000,\n      unit = MILLISECOND,\n      clock = new StdClock(),\n      scheduler = setInterval,\n      minReportingTimeout = 1,\n      tags = new Map(),\n      clusterOptions = new DefaultClusterOptions(),\n  }: LoggerReporterOptions,\n                     reporterType?: string) {\n      super({\n          clock,\n          clusterOptions,\n          log,\n          minReportingTimeout,\n          reportInterval,\n          scheduler,\n          tags,\n          unit,\n      }, reporterType);\n      this.logMetadata = {\n          reportInterval,\n          tags,\n          unit,\n      };\n  }\n\n  /**\n   * Gets the {@link Logger} instance.\n   *\n   * @returns {Logger}\n   * @memberof LoggerReporter\n   */\n  public getLog(): Logger {\n      return this.options.log;\n  }\n\n  /**\n   * Sets the {@link Logger} instance.\n   *\n   * @param {Logger} log\n   * @returns {this}\n   * @memberof LoggerReporter\n   */\n  public setLog(log: Logger): this {\n      this.options.log = log;\n      return this;\n  }\n\n  /**\n   * Prints the specified event immediately to the logger at 'info' level.\n   *\n   * @template TEventData\n   * @template TEvent\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof LoggerReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      const ctx: LoggerReportingContext = this\n          .createMetricSetReportContext({}, null, event.getTime(), \"gauge\");\n      const logLine: LogLine = this.reportGauge(event, ctx);\n      if (logLine) {\n          this.options.log.info(logLine.message, logLine.metadata);\n      }\n      return event;\n  }\n\n  /**\n   * Creates a new {@link LoggerReportingContext} using the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {LoggerReportingContext}\n   * @memberof LoggerReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry,\n      date: Date,\n      type: MetricType): LoggerReportingContext {\n      const logMetadata = Object.assign({}, this.logMetadata, {\n          measurement: \"\",\n          measurement_type: type,\n          timestamp: date,\n      });\n      return {\n          date,\n          logMetadata,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Logs each result at 'info' level using the logger instance specified in the options.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @memberof LoggerReporter\n   */\n  protected async handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>) {\n      for (const logLine of results) {\n          this.options.log.info(logLine.result.message, logLine.result.metadata);\n      }\n  }\n\n  /**\n   * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of\n   * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(LoggerReportingContext)} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportCounter(\n      counter: MonotoneCounter | Counter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(counter.getCount())) {\n          const name = counter.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = counter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, counter);\n          return {\n              message: `${ctx.date} - counter ${name}: ${counter.getCount()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Gauge} if the gauge's\n   * value is a valid number.\n   *\n   * Reported fields:\n   * - value\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {LoggerReportingContext>} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportGauge(gauge: Gauge, ctx: LoggerReportingContext>): LogLine {\n      if (!Number.isNaN(gauge.getValue())) {\n          const name = gauge.getName();\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = gauge.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, gauge);\n          return {\n              message: `${ctx.date} - gauge ${name}: ${gauge.getValue()}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Histogram} if the value of\n   * {@link Histogram#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(histogram.getCount())) {\n          const name = histogram.getName();\n          const snapshot = histogram.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = histogram.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, histogram);\n          return {\n              message: `${ctx.date} - histogram ${name}\\\n                          \\n\\tcount: ${histogram.getCount()}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Meter} if the value of\n   * {@link Meter#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportMeter(meter: Meter, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(meter.getCount())) {\n          const name = meter.getName();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = meter.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, meter);\n          return {\n              message: `${ctx.date} - meter ${name}\\\n                          \\n\\tcount: ${meter.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(meter.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(meter.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(meter.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(meter.getMeanRate())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n  /**\n   * Builds the log message for the given {@link Timer} if the value of\n   * {@link Timer#getCount()} is a valid number.\n   *\n   * Reported fields:\n   * - count\n   * - max (max value)\n   * - mean (mean value)\n   * - min (min value)\n   * - p50 (value of the 50% boundary)\n   * - p75 (value of the 75% boundary)\n   * - p95 (value of the 95% boundary)\n   * - p98 (value of the 98% boundary)\n   * - p99 (value of the 99% boundary)\n   * - p999 (value of the 99.9% boundary)\n   * - stddev (average deviation among the values)\n   * - m15_rate (15 min rate)\n   * - m5_rate (5 min rate)\n   * - m1_rate (1 min rate)\n   * - mean_rate\n   *\n   * Also the metadata (tags, metric group, metric name) and the date is included.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {LoggerReportingContext} ctx\n   * @returns {LogLine}\n   * @memberof LoggerReporter\n   */\n  protected reportTimer(timer: Timer, ctx: LoggerReportingContext): LogLine {\n      if (!isNaN(timer.getCount())) {\n          const name = timer.getName();\n          const snapshot = timer.getSnapshot();\n\n          ctx.logMetadata.measurement = name;\n          ctx.logMetadata.group = timer.getGroup();\n          ctx.logMetadata.tags = this.buildTags(ctx.registry, timer);\n          return {\n              message: `${ctx.date} - timer ${name}\\\n                          \\n\\tcount: ${timer.getCount()}\\\n                          \\n\\tm15_rate: ${this.getNumber(timer.get15MinuteRate())}\\\n                          \\n\\tm5_rate: ${this.getNumber(timer.get5MinuteRate())}\\\n                          \\n\\tm1_rate: ${this.getNumber(timer.get1MinuteRate())}\\\n                          \\n\\tmean_rate: ${this.getNumber(timer.getMeanRate())}\\\n                          \\n\\tmax: ${this.getNumber(snapshot.getMax())}\\\n                          \\n\\tmean: ${this.getNumber(snapshot.getMean())}\\\n                          \\n\\tmin: ${this.getNumber(snapshot.getMin())}\\\n                          \\n\\tp50: ${this.getNumber(snapshot.getMedian())}\\\n                          \\n\\tp75: ${this.getNumber(snapshot.get75thPercentile())}\\\n                          \\n\\tp95: ${this.getNumber(snapshot.get95thPercentile())}\\\n                          \\n\\tp98: ${this.getNumber(snapshot.get98thPercentile())}\\\n                          \\n\\tp99: ${this.getNumber(snapshot.get99thPercentile())}\\\n                          \\n\\tp999: ${this.getNumber(snapshot.get999thPercentile())}\\\n                          \\n\\tstddev: ${this.getNumber(snapshot.getStdDev())}`,\n              metadata: Object.assign({}, ctx.logMetadata),\n          };\n      }\n      return null;\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metadata.html":{"url":"interfaces/Metadata.html","title":"interface - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for handling metadata.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:56\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n  /**\n   * Gets all the metadata associated with an instance.\n   * Future changes to the metadata of this instance may\n   * not be reflected in the map returned here.\n   *\n   * @returns {Map}\n   * @memberof MetadataContainer\n   */\n  getMetadataMap(): Map;\n\n  /**\n   * Gets the metadata associated with the specified name.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  getMetadata(name: string): T;\n\n  /**\n   * Removes the metadata associated with the specified name and returns it finally.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  removeMetadata(name: string): T;\n\n  /**\n   * Sets the metadata object to the name.\n   *\n   * @template T\n   * @param {string} name The key of the metadata\n   * @param {T} value any value\n   * @returns {this}\n   * @memberof MetadataContainer\n   */\n  setMetadata(name: string, value: T): this;\n}\n\n/**\n * Helper interface for handling metadata.\n */\nexport interface Metadata {\n  [key: string]: any;\n}\n\n/**\n * Transforms the {@link Metadata} object into a {@link Map} object.\n *\n * @export\n * @param {Metadata} metadata\n * @returns {Map}\n */\nexport function metadataToMap(metadata: Metadata): Map {\n  const metadataMap: Map = new Map();\n  if (metadata) {\n    Object.keys(metadata).forEach((key) => metadataMap.set(key, metadata[key]));\n  }\n  return metadataMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Metadata} object.\n *\n * @export\n * @param {Map} metadataMap\n * @returns {Metadata}\n */\nexport function mapToMetadata(metadataMap: Map): Metadata {\n  const metadata: Metadata = {};\n  if (metadataMap) {\n    metadataMap.forEach((value, name) => metadata[name] = value);\n  }\n  return metadata;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataContainer.html":{"url":"interfaces/MetadataContainer.html","title":"interface - MetadataContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetadataContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n        \n\n            \n                Description\n            \n            \n                Interface for all classes that can associate metadata with instances.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetadata\n                                \n                                \n                                    getMetadataMap\n                                \n                                \n                                    removeMetadata\n                                \n                                \n                                    setMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Gets the metadata associated with the specified name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The metadata key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetadataMap\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetadataMap()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:19\n                \n            \n\n\n            \n                \n                    Gets all the metadata associated with an instance.\nFuture changes to the metadata of this instance may\nnot be reflected in the map returned here.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeMetadata\n                        \n                        \n                    \n                \n            \n            \n                \nremoveMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Removes the metadata associated with the specified name and returns it finally.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The metadata key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \nsetMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metadata-container.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Sets the metadata object to the name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key of the metadata\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        any value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n  /**\n   * Gets all the metadata associated with an instance.\n   * Future changes to the metadata of this instance may\n   * not be reflected in the map returned here.\n   *\n   * @returns {Map}\n   * @memberof MetadataContainer\n   */\n  getMetadataMap(): Map;\n\n  /**\n   * Gets the metadata associated with the specified name.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  getMetadata(name: string): T;\n\n  /**\n   * Removes the metadata associated with the specified name and returns it finally.\n   *\n   * @template T\n   * @param {string} name The metadata key\n   * @returns {T}\n   * @memberof MetadataContainer\n   */\n  removeMetadata(name: string): T;\n\n  /**\n   * Sets the metadata object to the name.\n   *\n   * @template T\n   * @param {string} name The key of the metadata\n   * @param {T} value any value\n   * @returns {this}\n   * @memberof MetadataContainer\n   */\n  setMetadata(name: string, value: T): this;\n}\n\n/**\n * Helper interface for handling metadata.\n */\nexport interface Metadata {\n  [key: string]: any;\n}\n\n/**\n * Transforms the {@link Metadata} object into a {@link Map} object.\n *\n * @export\n * @param {Metadata} metadata\n * @returns {Map}\n */\nexport function metadataToMap(metadata: Metadata): Map {\n  const metadataMap: Map = new Map();\n  if (metadata) {\n    Object.keys(metadata).forEach((key) => metadataMap.set(key, metadata[key]));\n  }\n  return metadataMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Metadata} object.\n *\n * @export\n * @param {Map} metadataMap\n * @returns {Metadata}\n */\nexport function mapToMetadata(metadataMap: Map): Metadata {\n  const metadata: Metadata = {};\n  if (metadataMap) {\n    metadataMap.forEach((value, name) => metadata[name] = value);\n  }\n  return metadata;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get15MinuteRate\n                                \n                                \n                                    get1MinuteRate\n                                \n                                \n                                    get5MinuteRate\n                                \n                                \n                                    getCount\n                                \n                                \n                                    getMeanRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get15MinuteRate\n                        \n                        \n                    \n                \n            \n            \n                \nget15MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:28\n                \n            \n\n\n            \n                \n                    Gets the rate of the last 15 minutes.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get1MinuteRate\n                        \n                        \n                    \n                \n            \n            \n                \nget1MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:44\n                \n            \n\n\n            \n                \n                    Gets the rate of the last minute.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get5MinuteRate\n                        \n                        \n                    \n                \n            \n            \n                \nget5MinuteRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:36\n                \n            \n\n\n            \n                \n                    Gets the rate of the last 5 minutes.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCount\n                        \n                        \n                    \n                \n            \n            \n                \ngetCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:20\n                \n            \n\n\n            \n                \n                    Gets the total number of events.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMeanRate\n                        \n                        \n                    \n                \n            \n            \n                \ngetMeanRate()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:52\n                \n            \n\n\n            \n                \n                    Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MeteredRates.html":{"url":"interfaces/MeteredRates.html","title":"interface - MeteredRates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MeteredRates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for serialized Meter metrics - represents a snapshot of the rates of a Meter.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [rate: number]:        number\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/metered.ts:62\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n            \n                Description\n            \n            \n                Representation of a metric.\n\n            \n\n            \n                Extends\n            \n            \n                        Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getDescription\n                                \n                                \n                                    getName\n                                \n                                \n                                    setDescription\n                                \n                                \n                                    setName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDescription\n                        \n                        \n                    \n                \n            \n            \n                \ngetDescription()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:135\n                \n            \n\n\n            \n                \n                    Gets the description of the metric.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:118\n                \n            \n\n\n            \n                \n                    Gets the name of the metric.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDescription\n                        \n                        \n                    \n                \n            \n            \n                \nsetDescription(description: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:144\n                \n            \n\n\n            \n                \n                    Sets the description of the metric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setName\n                        \n                        \n                    \n                \n            \n            \n                \nsetName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/metric.ts:127\n                \n            \n\n\n            \n                \n                    Sets the name of the metric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n        \n\n            \n                Description\n            \n            \n                Utility interface to track report-timestamps and -values of metric instances.\nThis is directly linked to the minimum-reporting timeout of the BaseReporter,\nwhich ensures that a certain value gets reported at least in a certain amount of time\ne.g. every minute without the value having changed. And on the other hand\nto not report / include values that haven't changed.\nAn example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\nwhich you normally want to report every minute for your graphs but should not\nnecessarily be included in every reporting run with the same value.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of the latest report.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    value that got reported as latest.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout of the {@link BaseReporter},\n * which ensures that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value having changed. And on the other hand\n * to not report / include values that haven't changed.\n *\n * An example for this is the health status of an application (a gauge: 1 means healthy, 0 means unhealthy)\n * which you normally want to report every minute for your graphs but should not\n * necessarily be included in every reporting run with the same value.\n *\n * @interface MetricEntry\n */\nexport interface MetricEntry {\n  /**\n   * timestamp of the latest report.\n   *\n   * @type {number}\n   * @memberof MetricEntry\n   */\n  lastReport: number;\n  /**\n   * value that got reported as latest.\n   *\n   * @type {number}\n   * @memberof MetricEntry\n   */\n  lastValue: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            metricRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:61\n                            \n                        \n\n                \n                    \n                        The metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:68\n                            \n                        \n\n                \n                    \n                        The name the metric is registered with.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, StdClock } from './clock'\nimport { Counter, MonotoneCounter } from './counter'\nimport { Gauge } from './gauge'\nimport { HdrHistogram } from './hdr-histogram'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { MetricRegistryListener } from './metric-registry-listener'\nimport { MetricSet } from './metric-set'\nimport { Buckets } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\nimport { Reservoir, SlidingWindowReservoir } from './model/reservoir'\nimport { Timer } from './timer'\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n  /**\n   * Creates an instance of MetricRegistryListenerRegistration.\n   *\n   * @param {MetricRegistryListener} listener\n   * @param {MetricRegistry} registry\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public constructor (private readonly listener: MetricRegistryListener, private readonly registry: MetricRegistry) {}\n\n  /**\n   * Removes the managed listener from the metric registry.\n   *\n   * @returns {this}\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public remove (): this {\n    this.registry.removeListener(this.listener)\n    return this\n  }\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n  /**\n   * The metric instance.\n   *\n   * @type {T}\n   * @memberof MetricRegistration\n   */\n  public metricRef: T;\n  /**\n   * The name the metric is registered with.\n   *\n   * @type {string}\n   * @memberof MetricRegistration\n   */\n  public name: string;\n\n  /**\n   * Creates an instance of MetricRegistration.\n   *\n   * @param {T} metricRef\n   * @memberof MetricRegistration\n   */\n  public constructor (metricRef: T) {\n    this.metricRef = metricRef\n    this.name = metricRef.getName()\n  }\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n  /**\n   * Determines if the specified object is a {@link Counter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Counter}\n   * @memberof MetricRegistry\n   */\n  public static isCounter (instance: any): instance is Counter {\n    return instance instanceof Counter || instance.metricRef instanceof Counter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isPureMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance)\n  }\n\n  /**\n   * Determines if the specified object is a {@link Histogram} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Histogram}\n   * @memberof MetricRegistry\n   */\n  public static isHistogram (instance: any): instance is Histogram {\n    return instance instanceof Histogram || instance.metricRef instanceof Histogram\n  }\n\n  /**\n   * Determines if the specified object is a {@link Meter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Meter}\n   * @memberof MetricRegistry\n   */\n  public static isMeter (instance: any): instance is Meter {\n    return instance instanceof Meter || instance.metricRef instanceof Meter\n  }\n\n  /**\n   * Determines if the specified object is a {@link Timer} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Timer}\n   * @memberof MetricRegistry\n   */\n  public static isTimer (instance: any): instance is Timer {\n    return instance instanceof Timer || instance.metricRef instanceof Timer\n  }\n\n  /**\n   * Determines if the specified object is a {@link Gauge} or references one.\n   *\n   * @static\n   * @template T\n   * @param {*} instance\n   * @returns {instance is Gauge}\n   * @memberof MetricRegistry\n   */\n  public static isGauge (instance: any): instance is Gauge {\n    const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function\n    const gaugeRegistration = !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function\n    return directGauge || gaugeRegistration\n  }\n\n  /**\n   * Determines if the specified object is a {@link MetricSet}.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MetricSet}\n   * @memberof MetricRegistry\n   */\n  public static isMetricSet (instance: any): instance is MetricSet {\n    return !!instance.getMetrics && instance.getMetrics instanceof Function\n  }\n\n  /**\n   * Standard function to generate the name for a metric.\n   *\n   * @private\n   * @static\n   * @param {string} baseName\n   * @param {string} metricName\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private static defaultNameFactory (baseName: string, metricName: string, metric: Metric): string {\n    return baseName + '.' + metricName\n  }\n\n  /**\n   * Default clock instance if no clock instance if provided.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof MetricRegistry\n   */\n  private defaultClock: Clock = new StdClock();\n  /**\n   * A collection metric references.\n   *\n   * @private\n   * @type {Array>}\n   * @memberof MetricRegistry\n   */\n  private readonly metrics: Array> = [];\n  /**\n   * The name factory to build metric names.\n   *\n   * @private\n   * @type {NameFactory}\n   * @memberof MetricRegistry\n   */\n  private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n  /**\n   * A collection of metric listeners.\n   *\n   * @private\n   * @type {MetricRegistryListener[]}\n   * @memberof MetricRegistry\n   */\n  private readonly listeners: MetricRegistryListener[] = [];\n\n  /**\n   * Adds the specified listener and returns the corresponding\n   * registration object.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {MetricRegistryListenerRegistration}\n   * @memberof MetricRegistry\n   */\n  public addListener (listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n    this.listeners.push(listener)\n    return new MetricRegistryListenerRegistration(listener, this)\n  }\n\n  /**\n   * Removes a listener manually.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeListener (listener: MetricRegistryListener): this {\n    const index = this.listeners.indexOf(listener)\n    if (index > -1) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.listeners[index]\n    }\n    return this\n  }\n\n  /**\n   * Sets the default name factory for metric instances.\n   *\n   * @param {NameFactory} nameFactory\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setNameFactory (nameFactory: NameFactory): this {\n    this.nameFactory = nameFactory\n    return this\n  }\n\n  /**\n   * Gets the default clock.\n   *\n   * @returns {Clock}\n   * @memberof MetricRegistry\n   */\n  public getDefaultClock (): Clock {\n    return this.defaultClock\n  }\n\n  /**\n   * Sets the default clock.\n   *\n   * @param {Clock} defaultClock\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setDefaultClock (defaultClock: Clock): this {\n    this.defaultClock = defaultClock\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCounterList} instead\n   */\n  public getCounters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isCounter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Counter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugeList} instead\n   */\n  public getGauges (): Map> {\n    const map: Map> = new Map()\n    this.metrics\n      .filter(MetricRegistry.isGauge)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramList} instead\n   */\n  public getHistograms (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMeterList} instead\n   */\n  public getMeters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isMeter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Meter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimerList} instead\n   */\n  public getTimers (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isTimer)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Timer))\n    return map\n  }\n\n  /**\n   * Gets the list of all managed counter instances.\n   *\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCounterList (): Counter[] {\n    return this.metrics\n      .filter(MetricRegistry.isCounter)\n      .map((registration) => registration.metricRef as Counter)\n  }\n\n  /**\n   * Gets the list of all managed monotone counter instances.\n   *\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCounterList (): MonotoneCounter[] {\n    return this.metrics\n      .filter(MetricRegistry.isPureMonotoneCounter)\n      .map((registration) => registration.metricRef as MonotoneCounter)\n  }\n\n  /**\n   * Gets the list of all managed gauge instances.\n   *\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugeList (): Array> {\n    return this.metrics\n      .filter(MetricRegistry.isGauge)\n      .map((registration) => registration.metricRef as Gauge)\n  }\n\n  /**\n   * Gets the list of all managed histogram instances.\n   *\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramList (): Histogram[] {\n    return this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .map((registration) => registration.metricRef as Histogram)\n  }\n\n  /**\n   * Gets the list of all managed meter instances.\n   *\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMeterList (): Meter[] {\n    return this.metrics\n      .filter(MetricRegistry.isMeter)\n      .map((registration) => registration.metricRef as Meter)\n  }\n\n  /**\n   * Gets the list of all managed timer instances.\n   *\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimerList (): Timer[] {\n    return this.metrics\n      .filter(MetricRegistry.isTimer)\n      .map((registration) => registration.metricRef as Timer)\n  }\n\n  /**\n   * Gets a mapping of all managed metric instances regardless of the type.\n   *\n   * @returns {Map}\n   * @memberof MetricRegistry\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .forEach((registration) => map.set(registration.name, registration.metricRef))\n    return map\n  }\n\n  /**\n   * Gets a list of all managed metric instances regardless of the type.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics.map((metric) => metric.metricRef)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n   */\n  public getMetric (name: string): Metric {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCountersByName} instead\n   */\n  public getCounter (name: string): Counter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n   */\n  public getGauge (name: string): Gauge {\n    return this.getFirstByName>(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n   */\n  public getHistogram (name: string): Histogram {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetersByName} instead\n   */\n  public getMeter (name: string): Meter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimersByName} instead\n   */\n  public getTimer (name: string): Timer {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * Gets all managed metric instance by name.\n   *\n   * @param {string} name\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricsByName (name: string): Metric[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed counter instances by name.\n   *\n   * @param {string} name\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCountersByName (name: string): Counter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed monotone counter instances by name.\n   *\n   * @param {string} name\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCountersByName (name: string): MonotoneCounter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed gauge instances by name.\n   *\n   * @param {string} name\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugesByName (name: string): Array> {\n    return this.getByName>(name)\n  }\n\n  /**\n   * Gets all managed histogram instances by name.\n   *\n   * @param {string} name\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramsByName (name: string): Histogram[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed meter instances by name.\n   *\n   * @param {string} name\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMetersByName (name: string): Meter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed timer instances by name.\n   *\n   * @param {string} name\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimersByName (name: string): Timer[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMetric (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    if (metrics.length > 0) {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metrics[0], 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metrics[0])\n    }\n    return this\n  }\n\n  /**\n   * Removes all managed metric instances by name regardless of the type.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeMetrics (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    metrics.forEach((metric) => {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metric, 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metric)\n    })\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeCounter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeGauge (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeHistogram (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMeter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeTimer (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * Builds a new counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {Counter}\n   * @memberof MetricRegistry\n   */\n  public newCounter (name: string, group: string = null, description: string = null): Counter {\n    const counter = new Counter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new monotone counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public newMonotoneCounter (name: string, group: string = null, description: string = null): MonotoneCounter {\n    const counter = new MonotoneCounter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new meter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {number} [sampleRate=1]\n   * @param {string} [description=null]\n   * @returns {Meter}\n   * @memberof MetricRegistry\n   */\n  public newMeter (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    sampleRate: number = 1,\n    description: string = null): Meter {\n    const meter = new Meter(clock, sampleRate, name, description)\n    this.registerMetric(meter, group, description)\n    return meter\n  }\n\n  /**\n   * Builds a new hdr-histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {HdrHistogram}\n   * @memberof MetricRegistry\n   */\n  public newHdrHistogram (\n    name: string,\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    group: string = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): HdrHistogram {\n    const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Histogram}\n   * @memberof MetricRegistry\n   */\n  public newHistogram (\n    name: string,\n    group: string = null,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Histogram {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const histogram = new Histogram(reservoir, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new timer with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Timer}\n   * @memberof MetricRegistry\n   */\n  public newTimer (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Timer {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const timer = new Timer(clock, reservoir, name, description, buckets)\n    this.registerMetric(timer, group, description)\n    return timer\n  }\n\n  /**\n   * Registers the given metric under it's name in this registry.\n   *\n   * If the metric is a metric-set the child-metrics are\n   * registered using their names the name of the metric-set is set as group.\n   *\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public registerMetric (metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(metric.getName(), metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetricList().forEach((m: Metric) => {\n        m.setGroup(metric.getName())\n        this.registerMetric(m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Registers a metric by name\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @deprecated since version 1.5 - use {@link registerMetric} instead\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public register (name: string, metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    metric.setName(this.generateName(name, metric))\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(name, metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetrics().forEach((m: Metric) => {\n        const metricName = this.nameFactory(name, m.getName(), m)\n        this.register(metricName, m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Finds the first metric instance by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T}\n   * @memberof MetricRegistry\n   */\n  private getFirstByName (name: string): T {\n    const arr: Metric[] = this.getByName(name)\n    if (arr.length === 0) {\n      return null\n    }\n    return arr[0] as T\n  }\n\n  /**\n   * Gets all metric instances by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T[]}\n   * @memberof MetricRegistry\n   */\n  private getByName (name: string): T[] {\n    return this.metrics\n      .filter((metric) => metric.name === name)\n      .map((metric) => metric.metricRef) as T[]\n  }\n\n  /**\n   * Builds the name of the metric.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private generateName (name: string, metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${name}`\n    }\n    return name\n  }\n\n  /**\n   * Invokes all metric listeners when a new metric was added.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricAdded (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricAdded(name, metric))\n  }\n\n  /**\n   * Invokes all metric listeners when a metric was removed.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricRemoved (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricRemoved(name, metric))\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry-listener.ts\n        \n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metricAdded\n                                \n                                \n                                    metricRemoved\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            metricAdded\n                        \n                        \n                    \n                \n            \n            \n                \nmetricAdded(name: string, metric: Metric)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry-listener.ts:19\n                \n            \n\n\n            \n                \n                    Called when a metric was added to a MetricRegistry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the metric\n\n                                    \n                                \n                                \n                                    metric\n                                    \n                                                Metric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        metric object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            metricRemoved\n                        \n                        \n                    \n                \n            \n            \n                \nmetricRemoved(name: string, metric: Metric)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry-listener.ts:28\n                \n            \n\n\n            \n                \n                    Called when a metric was removed from a MetricRegistry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metric\n                                    \n                                                Metric\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Metric } from './model/metric'\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n  /**\n   * Called when a metric was added to a {@link MetricRegistry}.\n   *\n   * @param {string} name name of the metric\n   * @param {Metric} metric metric object\n   * @memberof MetricRegistryListener\n   */\n  metricAdded(name: string, metric: Metric): void\n\n  /**\n   * Called when a metric was removed from a {@link MetricRegistry}.\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistryListener\n   */\n  metricRemoved(name: string, metric: Metric): void\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                        MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                        MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-registry.ts:41\n                \n            \n\n\n            \n                \n                    Removes the managed listener from the metric registry.\n\n\n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, StdClock } from './clock'\nimport { Counter, MonotoneCounter } from './counter'\nimport { Gauge } from './gauge'\nimport { HdrHistogram } from './hdr-histogram'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { MetricRegistryListener } from './metric-registry-listener'\nimport { MetricSet } from './metric-set'\nimport { Buckets } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\nimport { Reservoir, SlidingWindowReservoir } from './model/reservoir'\nimport { Timer } from './timer'\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n  /**\n   * Creates an instance of MetricRegistryListenerRegistration.\n   *\n   * @param {MetricRegistryListener} listener\n   * @param {MetricRegistry} registry\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public constructor (private readonly listener: MetricRegistryListener, private readonly registry: MetricRegistry) {}\n\n  /**\n   * Removes the managed listener from the metric registry.\n   *\n   * @returns {this}\n   * @memberof MetricRegistryListenerRegistration\n   */\n  public remove (): this {\n    this.registry.removeListener(this.listener)\n    return this\n  }\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n  /**\n   * The metric instance.\n   *\n   * @type {T}\n   * @memberof MetricRegistration\n   */\n  public metricRef: T;\n  /**\n   * The name the metric is registered with.\n   *\n   * @type {string}\n   * @memberof MetricRegistration\n   */\n  public name: string;\n\n  /**\n   * Creates an instance of MetricRegistration.\n   *\n   * @param {T} metricRef\n   * @memberof MetricRegistration\n   */\n  public constructor (metricRef: T) {\n    this.metricRef = metricRef\n    this.name = metricRef.getName()\n  }\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n  /**\n   * Determines if the specified object is a {@link Counter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Counter}\n   * @memberof MetricRegistry\n   */\n  public static isCounter (instance: any): instance is Counter {\n    return instance instanceof Counter || instance.metricRef instanceof Counter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter\n  }\n\n  /**\n   * Determines if the specified object is a {@link MonotoneCounter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public static isPureMonotoneCounter (instance: any): instance is MonotoneCounter {\n    return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance)\n  }\n\n  /**\n   * Determines if the specified object is a {@link Histogram} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Histogram}\n   * @memberof MetricRegistry\n   */\n  public static isHistogram (instance: any): instance is Histogram {\n    return instance instanceof Histogram || instance.metricRef instanceof Histogram\n  }\n\n  /**\n   * Determines if the specified object is a {@link Meter} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Meter}\n   * @memberof MetricRegistry\n   */\n  public static isMeter (instance: any): instance is Meter {\n    return instance instanceof Meter || instance.metricRef instanceof Meter\n  }\n\n  /**\n   * Determines if the specified object is a {@link Timer} or references one.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is Timer}\n   * @memberof MetricRegistry\n   */\n  public static isTimer (instance: any): instance is Timer {\n    return instance instanceof Timer || instance.metricRef instanceof Timer\n  }\n\n  /**\n   * Determines if the specified object is a {@link Gauge} or references one.\n   *\n   * @static\n   * @template T\n   * @param {*} instance\n   * @returns {instance is Gauge}\n   * @memberof MetricRegistry\n   */\n  public static isGauge (instance: any): instance is Gauge {\n    const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function\n    const gaugeRegistration = !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function\n    return directGauge || gaugeRegistration\n  }\n\n  /**\n   * Determines if the specified object is a {@link MetricSet}.\n   *\n   * @static\n   * @param {*} instance\n   * @returns {instance is MetricSet}\n   * @memberof MetricRegistry\n   */\n  public static isMetricSet (instance: any): instance is MetricSet {\n    return !!instance.getMetrics && instance.getMetrics instanceof Function\n  }\n\n  /**\n   * Standard function to generate the name for a metric.\n   *\n   * @private\n   * @static\n   * @param {string} baseName\n   * @param {string} metricName\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private static defaultNameFactory (baseName: string, metricName: string, metric: Metric): string {\n    return baseName + '.' + metricName\n  }\n\n  /**\n   * Default clock instance if no clock instance if provided.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof MetricRegistry\n   */\n  private defaultClock: Clock = new StdClock();\n  /**\n   * A collection metric references.\n   *\n   * @private\n   * @type {Array>}\n   * @memberof MetricRegistry\n   */\n  private readonly metrics: Array> = [];\n  /**\n   * The name factory to build metric names.\n   *\n   * @private\n   * @type {NameFactory}\n   * @memberof MetricRegistry\n   */\n  private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n  /**\n   * A collection of metric listeners.\n   *\n   * @private\n   * @type {MetricRegistryListener[]}\n   * @memberof MetricRegistry\n   */\n  private readonly listeners: MetricRegistryListener[] = [];\n\n  /**\n   * Adds the specified listener and returns the corresponding\n   * registration object.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {MetricRegistryListenerRegistration}\n   * @memberof MetricRegistry\n   */\n  public addListener (listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n    this.listeners.push(listener)\n    return new MetricRegistryListenerRegistration(listener, this)\n  }\n\n  /**\n   * Removes a listener manually.\n   *\n   * @param {MetricRegistryListener} listener\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeListener (listener: MetricRegistryListener): this {\n    const index = this.listeners.indexOf(listener)\n    if (index > -1) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.listeners[index]\n    }\n    return this\n  }\n\n  /**\n   * Sets the default name factory for metric instances.\n   *\n   * @param {NameFactory} nameFactory\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setNameFactory (nameFactory: NameFactory): this {\n    this.nameFactory = nameFactory\n    return this\n  }\n\n  /**\n   * Gets the default clock.\n   *\n   * @returns {Clock}\n   * @memberof MetricRegistry\n   */\n  public getDefaultClock (): Clock {\n    return this.defaultClock\n  }\n\n  /**\n   * Sets the default clock.\n   *\n   * @param {Clock} defaultClock\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public setDefaultClock (defaultClock: Clock): this {\n    this.defaultClock = defaultClock\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCounterList} instead\n   */\n  public getCounters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isCounter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Counter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugeList} instead\n   */\n  public getGauges (): Map> {\n    const map: Map> = new Map()\n    this.metrics\n      .filter(MetricRegistry.isGauge)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramList} instead\n   */\n  public getHistograms (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMeterList} instead\n   */\n  public getMeters (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isMeter)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Meter))\n    return map\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimerList} instead\n   */\n  public getTimers (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .filter(MetricRegistry.isTimer)\n      .forEach((registration) => map.set(registration.name, registration.metricRef as Timer))\n    return map\n  }\n\n  /**\n   * Gets the list of all managed counter instances.\n   *\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCounterList (): Counter[] {\n    return this.metrics\n      .filter(MetricRegistry.isCounter)\n      .map((registration) => registration.metricRef as Counter)\n  }\n\n  /**\n   * Gets the list of all managed monotone counter instances.\n   *\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCounterList (): MonotoneCounter[] {\n    return this.metrics\n      .filter(MetricRegistry.isPureMonotoneCounter)\n      .map((registration) => registration.metricRef as MonotoneCounter)\n  }\n\n  /**\n   * Gets the list of all managed gauge instances.\n   *\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugeList (): Array> {\n    return this.metrics\n      .filter(MetricRegistry.isGauge)\n      .map((registration) => registration.metricRef as Gauge)\n  }\n\n  /**\n   * Gets the list of all managed histogram instances.\n   *\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramList (): Histogram[] {\n    return this.metrics\n      .filter(MetricRegistry.isHistogram)\n      .map((registration) => registration.metricRef as Histogram)\n  }\n\n  /**\n   * Gets the list of all managed meter instances.\n   *\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMeterList (): Meter[] {\n    return this.metrics\n      .filter(MetricRegistry.isMeter)\n      .map((registration) => registration.metricRef as Meter)\n  }\n\n  /**\n   * Gets the list of all managed timer instances.\n   *\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimerList (): Timer[] {\n    return this.metrics\n      .filter(MetricRegistry.isTimer)\n      .map((registration) => registration.metricRef as Timer)\n  }\n\n  /**\n   * Gets a mapping of all managed metric instances regardless of the type.\n   *\n   * @returns {Map}\n   * @memberof MetricRegistry\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics\n      .forEach((registration) => map.set(registration.name, registration.metricRef))\n    return map\n  }\n\n  /**\n   * Gets a list of all managed metric instances regardless of the type.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics.map((metric) => metric.metricRef)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n   */\n  public getMetric (name: string): Metric {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getCountersByName} instead\n   */\n  public getCounter (name: string): Counter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n   */\n  public getGauge (name: string): Gauge {\n    return this.getFirstByName>(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n   */\n  public getHistogram (name: string): Histogram {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getMetersByName} instead\n   */\n  public getMeter (name: string): Meter {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link getTimersByName} instead\n   */\n  public getTimer (name: string): Timer {\n    return this.getFirstByName(name)\n  }\n\n  /**\n   * Gets all managed metric instance by name.\n   *\n   * @param {string} name\n   * @returns {Metric[]}\n   * @memberof MetricRegistry\n   */\n  public getMetricsByName (name: string): Metric[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed counter instances by name.\n   *\n   * @param {string} name\n   * @returns {Counter[]}\n   * @memberof MetricRegistry\n   */\n  public getCountersByName (name: string): Counter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed monotone counter instances by name.\n   *\n   * @param {string} name\n   * @returns {MonotoneCounter[]}\n   * @memberof MetricRegistry\n   */\n  public getMonotoneCountersByName (name: string): MonotoneCounter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed gauge instances by name.\n   *\n   * @param {string} name\n   * @returns {Array>}\n   * @memberof MetricRegistry\n   */\n  public getGaugesByName (name: string): Array> {\n    return this.getByName>(name)\n  }\n\n  /**\n   * Gets all managed histogram instances by name.\n   *\n   * @param {string} name\n   * @returns {Histogram[]}\n   * @memberof MetricRegistry\n   */\n  public getHistogramsByName (name: string): Histogram[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed meter instances by name.\n   *\n   * @param {string} name\n   * @returns {Meter[]}\n   * @memberof MetricRegistry\n   */\n  public getMetersByName (name: string): Meter[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * Gets all managed timer instances by name.\n   *\n   * @param {string} name\n   * @returns {Timer[]}\n   * @memberof MetricRegistry\n   */\n  public getTimersByName (name: string): Timer[] {\n    return this.getByName(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMetric (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    if (metrics.length > 0) {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metrics[0], 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metrics[0])\n    }\n    return this\n  }\n\n  /**\n   * Removes all managed metric instances by name regardless of the type.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public removeMetrics (name: string): this {\n    const metrics: Metric[] = this.getByName(name)\n\n    metrics.forEach((metric) => {\n      const index = this.metrics\n        .map((m) => m.metricRef)\n        .indexOf(metric, 0)\n      if (index > -1) {\n        this.metrics.splice(index, 1)\n      }\n      this.fireMetricRemoved(name, metric)\n    })\n    return this\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeCounter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeGauge (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeHistogram (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeMeter (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * @deprecated since version 1.3 - use {@link removeMetrics} instead\n   */\n  public removeTimer (name: string): this {\n    return this.removeMetric(name)\n  }\n\n  /**\n   * Builds a new counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {Counter}\n   * @memberof MetricRegistry\n   */\n  public newCounter (name: string, group: string = null, description: string = null): Counter {\n    const counter = new Counter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new monotone counter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @returns {MonotoneCounter}\n   * @memberof MetricRegistry\n   */\n  public newMonotoneCounter (name: string, group: string = null, description: string = null): MonotoneCounter {\n    const counter = new MonotoneCounter(name, description)\n    this.registerMetric(counter, group, description)\n    return counter\n  }\n\n  /**\n   * Builds a new meter with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {number} [sampleRate=1]\n   * @param {string} [description=null]\n   * @returns {Meter}\n   * @memberof MetricRegistry\n   */\n  public newMeter (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    sampleRate: number = 1,\n    description: string = null): Meter {\n    const meter = new Meter(clock, sampleRate, name, description)\n    this.registerMetric(meter, group, description)\n    return meter\n  }\n\n  /**\n   * Builds a new hdr-histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {number} [lowest=1] is the lowest possible number that can be recorded\n   * @param {number} [max=100] is the maximum number that can be recorded\n   * @param {number} [figures=3]\n   *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {HdrHistogram}\n   * @memberof MetricRegistry\n   */\n  public newHdrHistogram (\n    name: string,\n    lowest: number = 1,\n    max: number = 100,\n    figures: number = 3,\n    group: string = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): HdrHistogram {\n    const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new histogram with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Histogram}\n   * @memberof MetricRegistry\n   */\n  public newHistogram (\n    name: string,\n    group: string = null,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Histogram {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const histogram = new Histogram(reservoir, name, description, buckets)\n    this.registerMetric(histogram, group, description)\n    return histogram\n  }\n\n  /**\n   * Builds a new timer with the given name and adds it\n   * to the registry.\n   *\n   * @param {string} name\n   * @param {string} [group=null]\n   * @param {string} [description=null]\n   * @param {Clock} [clock=this.defaultClock]\n   * @param {Reservoir} [reservoir=null]\n   * @returns {Timer}\n   * @memberof MetricRegistry\n   */\n  public newTimer (\n    name: string,\n    group: string = null,\n    clock: Clock = this.defaultClock,\n    reservoir: Reservoir = null,\n    description: string = null,\n    buckets: Buckets = new Buckets()): Timer {\n    if (!reservoir) {\n      reservoir = new SlidingWindowReservoir(1024)\n    }\n    const timer = new Timer(clock, reservoir, name, description, buckets)\n    this.registerMetric(timer, group, description)\n    return timer\n  }\n\n  /**\n   * Registers the given metric under it's name in this registry.\n   *\n   * If the metric is a metric-set the child-metrics are\n   * registered using their names the name of the metric-set is set as group.\n   *\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public registerMetric (metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(metric.getName(), metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetricList().forEach((m: Metric) => {\n        m.setGroup(metric.getName())\n        this.registerMetric(m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Registers a metric by name\n   *\n   * @param {string} name\n   * @param {Metric} metric\n   * @param {string} [group=null]\n   * @deprecated since version 1.5 - use {@link registerMetric} instead\n   * @returns {this}\n   * @memberof MetricRegistry\n   */\n  public register (name: string, metric: Metric, group: string = null, description: string = null): this {\n    if (group) {\n      metric.setGroup(group)\n    }\n    if (description) {\n      metric.setDescription(description)\n    }\n\n    metric.setName(this.generateName(name, metric))\n\n    if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n      this.metrics.push(new MetricRegistration(metric))\n      this.fireMetricAdded(name, metric)\n    } else if (MetricRegistry.isMetricSet(metric)) {\n      metric.getMetrics().forEach((m: Metric) => {\n        const metricName = this.nameFactory(name, m.getName(), m)\n        this.register(metricName, m)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Finds the first metric instance by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T}\n   * @memberof MetricRegistry\n   */\n  private getFirstByName (name: string): T {\n    const arr: Metric[] = this.getByName(name)\n    if (arr.length === 0) {\n      return null\n    }\n    return arr[0] as T\n  }\n\n  /**\n   * Gets all metric instances by name.\n   *\n   * @private\n   * @template T\n   * @param {string} name\n   * @returns {T[]}\n   * @memberof MetricRegistry\n   */\n  private getByName (name: string): T[] {\n    return this.metrics\n      .filter((metric) => metric.name === name)\n      .map((metric) => metric.metricRef) as T[]\n  }\n\n  /**\n   * Builds the name of the metric.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof MetricRegistry\n   */\n  private generateName (name: string, metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getGroup()}.${name}`\n    }\n    return name\n  }\n\n  /**\n   * Invokes all metric listeners when a new metric was added.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricAdded (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricAdded(name, metric))\n  }\n\n  /**\n   * Invokes all metric listeners when a metric was removed.\n   *\n   * @private\n   * @param {string} name\n   * @param {Metric} metric\n   * @memberof MetricRegistry\n   */\n  private fireMetricRemoved (name: string, metric: Metric): void {\n    this.listeners.forEach((listener) => listener.metricRemoved(name, metric))\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricReporterOptions.html":{"url":"interfaces/MetricReporterOptions.html","title":"interface - MetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n        \n\n            \n                Description\n            \n            \n                Options for the MetricReporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clock\n                                \n                                \n                                            Optional\n                                        clusterOptions\n                                \n                                \n                                            Optional\n                                        minReportingTimeout\n                                \n                                \n                                            Optional\n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clock\n                                    \n                                \n                                \n                                    \n                                        clock:         Clock\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Clock\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clusterOptions\n                                    \n                                \n                                \n                                    \n                                        clusterOptions:         ClusterOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ClusterOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Options for clustering support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minReportingTimeout\n                                    \n                                \n                                \n                                    \n                                        minReportingTimeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Timeout in minutes a metric need to be included in the report without having changed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Map\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\n\nimport { Clock } from \"../clock\";\nimport { ReportMessageReceiver } from \"./report-message-receiver\";\n\n/**\n * Common metrics options.\n *\n * @export\n * @interface ClusterOptions\n * @template Worker worker type placeholder\n */\nexport interface ClusterOptions {\n  /**\n   * Indicates if clustering-support is enabled or not.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly enabled: boolean;\n  /**\n   * Indicates if the {@link #sendToMaster} function should be used to send messages to the master process.\n   *\n   * @type {boolean}\n   * @memberof ClusterOptions\n   */\n  readonly sendMetricsToMaster: boolean;\n  /**\n   * EventReceiver to get messages from master on forked processes or from forked processes on master.\n   * Compatible with 'cluster'.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof ClusterOptions\n   */\n  readonly eventReceiver: ReportMessageReceiver;\n  /**\n   * Function to send messages to the master-process.\n   *\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToMaster(message: any): Promise;\n  /**\n   * Function for sending message to a worker instance.\n   *\n   * @param {Worker} worker\n   * @param {*} message\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  sendToWorker(worker: Worker, message: any): Promise;\n  /**\n   * Gets a list of all workers.\n   *\n   * @returns {Promise}\n   * @memberof ClusterOptions\n   */\n  getWorkers(): Promise;\n}\n\n/**\n * Options for the {@link MetricReporter}.\n *\n * @export\n * @interface MetricReporterOptions\n */\nexport interface MetricReporterOptions {\n  /**\n   * Clock used to determine the date for the reporting as well as the minimum-reporting timeout feature.\n   *\n   * @type {Clock}\n   * @memberof MetricReporterOptions\n   */\n  readonly clock?: Clock;\n  /**\n   * Timeout in minutes a metric need to be included in the report without having changed.\n   *\n   * @type {number}\n   * @memberof MetricReporterOptions\n   */\n  minReportingTimeout?: number;\n  /**\n   * Options for clustering support.\n   *\n   * @type {ClusterOptions}\n   * @memberof MetricReporterOptions\n   */\n  clusterOptions?: ClusterOptions;\n  /**\n   * Tags for this reporter instance - to be combined with the tags of each metric while reporting.\n   *\n   * @type {Map}\n   * @memberof MetricReporterOptions\n   */\n  tags?: Map;\n}\n\n/**\n * Default cluster setting applicable for most metric-reporter implementations.\n * Enables unidirectional message by sending metrics from forked processes to master process.\n *\n * @export\n * @class DefaultClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DefaultClusterOptions implements ClusterOptions {\n  /**\n   * Set to true.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly enabled: boolean = true;\n  /**\n   * Set to cluster module.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = cluster;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * True for forked processes.\n   *\n   * @type {boolean}\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = !!cluster.worker;\n  /**\n   * Set to null.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Uses 'cluster.worker.send' to send messages.\n   *\n   * @memberof DefaultClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = async (message: any) => cluster.worker.send(message);\n}\n\n/**\n * Disables clustering.\n *\n * @export\n * @class DisabledClusterOptions\n * @implements {ClusterOptions}\n */\nexport class DisabledClusterOptions implements ClusterOptions {\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly enabled: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @type {ReportMessageReceiver}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly eventReceiver: ReportMessageReceiver = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly getWorkers: () => Promise = null;\n  /**\n   * Set to false.\n   *\n   * @type {boolean}\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendMetricsToMaster: boolean = false;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToWorker: (worker: cluster.Worker, message: any) => Promise = null;\n  /**\n   * Set to null.\n   *\n   * @memberof DisabledClusterOptions\n   */\n  public readonly sendToMaster: (message: any) => Promise = null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/metric-set.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetricList\n                                \n                                \n                                    getMetrics\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricList\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricList()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-set.ts:29\n                \n            \n\n\n            \n                \n                    Gets a list of all Metric instances.\n\n\n                    \n                    \n                    \n                        Returns :         Metric[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetrics\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetrics()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/metric-set.ts:21\n                \n            \n\n\n            \n                \n                    Gets a mapping from names to metric instances.\n\n\n                    \n                    \n                    \n                        Returns :         Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Metric } from './model/metric'\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n  /**\n   * Gets a mapping from names to metric instances.\n   *\n   * @deprecated since version 1.3 - use {@link getMetricList} instead\n   * @returns {Map}\n   * @memberof MetricSet\n   */\n  getMetrics(): Map\n\n  /**\n   * Gets a list of all {@link Metric} instances.\n   *\n   * @returns {Metric[]}\n   * @memberof MetricSet\n   */\n  getMetricList(): Metric[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSetReportContext.html":{"url":"interfaces/MetricSetReportContext.html","title":"interface - MetricSetReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSetReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-set-report-context.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reporting runs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        metrics\n                                \n                                \n                                        overallCtx\n                                \n                                \n                                        registry\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current date.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metrics\n                                    \n                                \n                                \n                                    \n                                        metrics:     M[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The array of metric instance that is currently reported.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overallCtx\n                                    \n                                \n                                \n                                    \n                                        overallCtx:         OverallReportContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverallReportContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The OverallReportContext this context is running in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registry\n                                    \n                                \n                                \n                                    \n                                        registry:         MetricRegistry | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricRegistry | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The registry the metric are registered in.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         MetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetricType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the metrics in the #metrics array.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MetricRegistry } from \"../metric-registry\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\n\n/**\n * Helper interface for reporting runs.\n */\nexport interface MetricSetReportContext {\n  /**\n   * The OverallReportContext this context is running in.\n   *\n   * @type {OverallReportContext}\n   * @memberof ReportingContext\n   */\n  overallCtx: OverallReportContext;\n  /**\n   * The array of metric instance that is currently reported.\n   *\n   * @type {M[]}\n   * @memberof ReportingContext\n   */\n  metrics: M[];\n  /**\n   * The registry the metric are registered in.\n   *\n   * @type {MetricRegistry | null}\n   * @memberof ReportingContext\n   */\n  readonly registry: MetricRegistry | null;\n  /**\n   * The current date.\n   *\n   * @type {Date}\n   * @memberof ReportingContext\n   */\n  readonly date: Date;\n  /**\n   * The type of the metrics in the {@link #metrics} array.\n   *\n   * @type {MetricType}\n   * @memberof ReportingContext\n   */\n  readonly type: MetricType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MonotoneCounter.html":{"url":"classes/MonotoneCounter.html","title":"class - MonotoneCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MonotoneCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/counter.ts\n        \n\n            \n                Description\n            \n            \n                A monotonically increasing number.\nThe initial value is 0.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseMetric\n            \n\n            \n                Implements\n            \n            \n                            Counting\n                            Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/counter.ts:24\n                            \n                        \n\n                \n                    \n                            Creates an instance of MonotoneCounter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional name of the counter\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional description of the counter\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:24\n                            \n                        \n\n                \n                    \n                        Holds the current value.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:217\n\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:249\n\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:233\n\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:225\n\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadataMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:257\n\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:241\n\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tagMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:265\n\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCount()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:60\n                \n            \n\n\n            \n                \n                    Gets the current count.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            increment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    increment(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:46\n                \n            \n\n\n            \n                \n                    Increases the current count by the given value - a negative value is causing an error.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:70\n                \n            \n\n\n            \n                \n                    Sets the current count to 0.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/counter.ts:81\n                \n            \n\n\n            \n                \n                    Same as BaseMetric, also adding count property.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:339\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:303\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:312\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:279\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadataMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:275\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:325\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:321\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:283\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:344\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:349\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:307\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:316\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:289\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:329\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:334\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:367\n\n                \n            \n\n\n            \n                \n                    Generates a serialized version of this metric.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:354\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Counting } from './model/counting'\nimport { BaseMetric, Metric } from './model/metric'\n\n/**\n * A monotonically increasing number.\n * The initial value is 0.\n *\n * @export\n * @class MonotoneCounter\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n */\nexport class MonotoneCounter extends BaseMetric implements Counting, Metric {\n  /**\n   * Holds the current value.\n   *\n   * @private\n   * @type {number}\n   * @memberof MonotoneCounter\n   */\n  protected count: number = 0;\n\n  /**\n   * Creates an instance of MonotoneCounter.\n   *\n   * @param {string} [name] optional name of the counter\n   * @param {string} [description] optional description of the counter\n   * @memberof MonotoneCounter\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Increases the current count by the given value - a negative value is causing an error.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MonotoneCounter\n   */\n  public increment (value: number): this {\n    if (value \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAlpha\n                                \n                                \n                                    getAverage\n                                \n                                \n                                    tick\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAlpha\n                        \n                        \n                    \n                \n            \n            \n                \ngetAlpha()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:19\n                \n            \n\n\n            \n                \n                    Gets the alpha value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAverage\n                        \n                        \n                    \n                \n            \n            \n                \ngetAverage(unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:29\n                \n            \n\n\n            \n                \n                    Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tick\n                        \n                        \n                    \n                \n            \n            \n                \ntick()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:47\n                \n            \n\n\n            \n                \n                    Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/moving-average.ts:38\n                \n            \n\n\n            \n                \n                    Adds the given value to the logic of the implementation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAlpha(): number;\n\n  /**\n   * Gets the average for the specified time unit -\n   * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof MovingAverage\n   */\n  getAverage(unit: TimeUnit): number;\n\n  /**\n   * Adds the given value to the logic of the implementation.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  update(value: number): this;\n\n  /**\n   * Triggers the actual average to be updated.\n   * A tick represents an update event.\n   *\n   * @returns {this}\n   * @memberof MovingAverage\n   */\n  tick(): this;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n  public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n  public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n  public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n  public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n  public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n  public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n  /**\n   * Alpha component (weight) of the moving average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private alpha: number;\n  /**\n   * The sampling interval.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private interval: number;\n  /**\n   * The sum of all values passed to the update function.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private sum: number = 0;\n  /**\n   * The current average.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private avg: number = -1.0;\n  /**\n   * Multiplier of the time unit specified in the constructor in nanoseconds.\n   *\n   * @private\n   * @type {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private timeUnitInNanoseconds: number;\n  /**\n   * The time unit of the sampling rate.\n   *\n   * @private\n   * @type {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  private unit: TimeUnit;\n\n  /**\n   * Creates an instance of ExponentiallyWeightedMovingAverage.\n   *\n   * @param {number} alpha\n   * @param {number} interval\n   * @param {TimeUnit} unit\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public constructor(alpha: number, interval: number, unit: TimeUnit) {\n    this.alpha = alpha;\n    this.interval = interval;\n    this.unit = unit;\n    this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n  }\n\n  /**\n   * Gets the alpha value.\n   *\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAlpha(): number {\n    return this.alpha;\n  }\n\n  /**\n   * Gets the time unit.\n   *\n   * @returns {TimeUnit}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getUnit(): TimeUnit {\n    return this.unit;\n  }\n\n  /**\n   * Gets the average in the specified time unit.\n   *\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public getAverage(unit: TimeUnit): number {\n    if (this.avg === -1.0) {\n      return 0;\n    }\n    return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n  }\n\n  /**\n   * Adds the value to the current sum.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public update(value: number): this {\n    this.sum += value;\n    return this;\n  }\n\n  /**\n   * Updates the current average by multiplying the alpha value with the difference\n   * of the last average and the current average.\n   *\n   * Averages are calculated by dividing the sum through the sampling interval.\n   *\n   * If the alpha value is high the last average has more weight and vice versa.\n   *\n   * @returns {this}\n   * @memberof ExponentiallyWeightedMovingAverage\n   */\n  public tick(): this {\n    const sum = this.sum;\n    const avg = sum / this.interval;\n    this.sum -= sum;\n\n    if (this.avg === -1.0) {\n      this.avg = avg;\n    } else {\n      this.avg += this.alpha * (avg - this.avg);\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverallReportContext.html":{"url":"interfaces/OverallReportContext.html","title":"interface - OverallReportContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OverallReportContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for a reporting run.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for a reporting run.\n */\nexport interface OverallReportContext {\n  [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percentiles.html":{"url":"classes/Percentiles.html","title":"class - Percentiles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percentiles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/Percentiles.ts\n        \n\n            \n                Description\n            \n            \n                List of values between 0 and 1 representing the percent boundaries for reporting.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                boundaries\n                            \n                            \n                                    Static\n                                    Readonly\n                                METADATA_NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of Percentiles.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            boundaries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            METADATA_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'quantiles'\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-prometheus/lib/metrics/Percentiles.ts:16\n                            \n                        \n\n                \n                    \n                        Name constant for assigning an instance of this class as metadata to a metric instance.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support'\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n  /**\n   * Name constant for assigning an instance of this class as metadata to a metric instance.\n   *\n   * @static\n   * @memberof Percentiles\n   */\n  public static readonly METADATA_NAME = 'quantiles';\n  /**\n   * Creates an instance of Percentiles.\n   *\n   * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n   * @memberof Percentiles\n   */\n  constructor (public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]) {\n    boundaries.sort((a: number, b: number) => a - b)\n    boundaries.forEach((boundary) => {\n      if (boundary = 1.0) {\n        throw new Error('boundaries cannot be greater or equal to 1.0')\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusClusterOptions.html":{"url":"interfaces/PrometheusClusterOptions.html","title":"interface - PrometheusClusterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusClusterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusClusterOptions.ts\n        \n\n            \n                Description\n            \n            \n                Extends the standard ClusterOptions with a timeout for worker processes\nto response to metric report requests.\n\n            \n\n            \n                Extends\n            \n            \n                        ClusterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        workerResponseTimeout\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        workerResponseTimeout\n                                    \n                                \n                                \n                                    \n                                        workerResponseTimeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the timeout in which a forked process can respond to metric report requests.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { ClusterOptions } from 'inspector-metrics'\n\n/**\n * Extends the standard {@link ClusterOptions} with a timeout for worker processes\n * to response to metric report requests.\n *\n * @export\n * @interface PrometheusClusterOptions\n * @extends {ClusterOptions}\n * @template Worker\n */\nexport interface PrometheusClusterOptions extends ClusterOptions {\n  /**\n   * Sets the timeout in which a forked process can respond to metric report requests.\n   *\n   * @type {number}\n   * @memberof PrometheusClusterOptions\n   */\n  readonly workerResponseTimeout: number\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusFields.html":{"url":"interfaces/PrometheusFields.html","title":"interface - PrometheusFields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusFields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reported fields.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts:58\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport { randomBytes } from 'crypto'\nimport { EventEmitter } from 'events'\nimport {\n  BucketCounting,\n  Buckets,\n  BucketToCountMap,\n  Counter,\n  Event,\n  Gauge,\n  getMetricBuckets,\n  getMetricCounts,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  getMetricTags,\n  getSnapshot,\n  Histogram,\n  mapToTags,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricReporter,\n  MetricSetReportContext,\n  MetricType,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  Sampling,\n  SerializableBucketCounting,\n  SerializableMetric,\n  SerializableSampling,\n  StdClock,\n  Taggable,\n  Tags,\n  Timer\n} from 'inspector-metrics'\nimport { DefaultPrometheusClusterOptions } from './DefaultPrometheusClusterOptions'\nimport { InterprocessReportRequest } from './InterprocessReportRequest'\nimport { InterprocessReportResponse } from './InterprocessReportResponse'\nimport { Percentiles } from './Percentiles'\nimport { PrometheusReporterOptions } from './PrometheusReporterOptions'\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = 'counter' | 'gauge' | 'histogram' | 'summary' | 'untyped';\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n  /**\n   * Type of the metrics in fields property.\n   *\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricResult\n   */\n  readonly type: PrometheusMetricType\n  /**\n   * Contains field-name to value mapping of this metric-result.\n   *\n   * @type {PrometheusFields}\n   * @memberof PrometheusMetricResult\n   */\n  readonly fields: PrometheusFields\n  /**\n   * Indicates if this result can be handle by the reporter.\n   *\n   * @type {boolean}\n   * @memberof PrometheusMetricResult\n   */\n  readonly canBeReported: boolean\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-request-messages\n   * from master process.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_REQUEST = 'inspector-prometheus:metric-reporter:request-metrics';\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-response-messages\n   * from forked processes.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_RESPONSE = 'inspector-prometheus:metric-reporter:response-metrics';\n  /**\n   * Used to replace unsupported characters from label name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_]', 'g');\n\n  /**\n   * used to replace the first character of a label name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_START_EXCLUSION = ['_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Used to replace unsupported characters from metric name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_:]', 'g');\n\n  /**\n   * used to replace the first character of a metric name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_START_EXCLUSION = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Checks if a given string is empty.\n   *\n   * @private\n   * @static\n   * @param {string} value\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isEmpty (value: string): boolean {\n    return !value || value.trim() === ''\n  }\n\n  /**\n   * Checks if a given value is a number.\n   *\n   * @private\n   * @static\n   * @param {*} value\n   * @returns {value is number}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isNumber (value: any): value is number {\n    return typeof (value) === 'number'\n  }\n\n  /**\n   * The prometheus counter type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly counterType: PrometheusMetricType = 'counter';\n  /**\n   * The prometheus gauge type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly gaugeType: PrometheusMetricType = 'gauge';\n  /**\n   * The prometheus histogram type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly histogramType: PrometheusMetricType = 'histogram';\n  /**\n   * The prometheus summary type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly summaryType: PrometheusMetricType = 'summary';\n  /**\n   * Internal eventbus used to forward received messages from forked metric reporters.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly internalEventbus: EventEmitter;\n\n  /**\n   * Creates an instance of PrometheusMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PrometheusMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    emitComments = true,\n    includeTimestamp = false,\n    log = console,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    useUntyped = false,\n    clusterOptions = new DefaultPrometheusClusterOptions()\n  }: PrometheusReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      emitComments,\n      includeTimestamp,\n      log,\n      minReportingTimeout,\n      tags,\n      useUntyped\n    }, reporterType)\n    const co = this.options.clusterOptions\n    if (co?.enabled) {\n      this.internalEventbus = new EventEmitter()\n      if (co.sendMetricsToMaster) {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportRequest(message)\n        })\n      } else {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportResponse(message)\n        })\n      }\n    }\n  }\n\n  /**\n   * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n   *\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getMetricsString (): Promise {\n    const workerPromises: Array> = []\n    const clusterOptions = this.options.clusterOptions\n    if (this.canSendMessagesToWorkers()) {\n      const workers = await clusterOptions.getWorkers()\n      for (const worker of workers) {\n        const message: InterprocessReportRequest = {\n          id: this.generateRandomId(),\n          targetReporterType: this.reporterType,\n          type: PrometheusMetricReporter.MESSAGE_TYPE_REQUEST\n        }\n        const workerPromise: Promise = new Promise((resolve) => {\n          this.internalEventbus.once(message.id, (response: InterprocessReportResponse) => {\n            resolve(response.metricsStr)\n          })\n        })\n        const workerTimeout: Promise = new Promise((resolve) => setTimeout(() => {\n          resolve('')\n          this.internalEventbus.removeAllListeners(message.id)\n        }, clusterOptions.workerResponseTimeout))\n        clusterOptions\n          .sendToWorker(worker, message)\n          .catch((error) => console.log(error))\n        workerPromises.push(Promise.race([workerPromise, workerTimeout]))\n      }\n    }\n    const workerResponses = await Promise.all(workerPromises)\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      const ctx = await this.report()\n      return `${ctx.result}${workerResponses.join('\\n')}`\n    }\n    return workerResponses.join('\\n') + '\\n'\n  }\n\n  /**\n   * Builds the text representation of the event specified.\n   *\n   * @param {MetricRegistry} event\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getEventString>(event: TEvent): Promise {\n    const overallCtx: OverallReportContext = {\n      result: ''\n    }\n\n    const result = this.reportGauge(event, {\n      date: null,\n      metrics: [],\n      overallCtx,\n      registry: null,\n      type: 'gauge'\n    })\n\n    await this.handleResults(\n      overallCtx,\n      null,\n      event.getTime(),\n      'gauge',\n      [{\n        metric: event,\n        result\n      }]\n    )\n\n    return overallCtx.result\n  }\n\n  /**\n   * Use {@link #getEventString} instead.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async start (): Promise {\n    return this\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async stop (): Promise {\n    return this\n  }\n\n  /**\n   * Always returns false, since the Prometheus reporter implements it's own messaging mechanism.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected sendMetricsToMaster (): boolean {\n    return false\n  }\n\n  /**\n   * Checks if the clustering support is enabled and the 'getWorkers' and 'sendToWorker'\n   * method is not null.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected canSendMessagesToWorkers (): boolean {\n    const clusterOptions = this.options.clusterOptions\n    return clusterOptions.enabled &&\n      !!clusterOptions.getWorkers &&\n      !!clusterOptions.sendToWorker\n  }\n\n  /**\n   * Generates a randomId used to identify worker report responses.\n   *\n   * @protected\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  protected generateRandomId (): string {\n    return randomBytes(32).toString('hex')\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_REQUEST},\n   * generates a response using {@link #getMetricsString} and sends it back to the master process\n   * with the id given through the request.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportRequest (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_REQUEST)) {\n      const request: InterprocessReportRequest = message\n      const metricsStr = await this.getMetricsString()\n      const response: InterprocessReportResponse = {\n        id: request.id,\n        metricsStr,\n        targetReporterType: request.targetReporterType,\n        type: PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE\n      }\n      if (this.options.clusterOptions.sendToMaster) {\n        this.options.clusterOptions.sendToMaster(response)\n          .catch((cause) => this.options.log?.error(\n            'could not send metrics to master process',\n            cause\n          ))\n      }\n    }\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_RESPONSE}\n   * and forwards the message to the internal eventbus using the messages id as message and the message\n   * object as argument.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportResponse (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE)) {\n      const response: InterprocessReportResponse = message\n      this.internalEventbus.emit(response.id, response)\n    }\n  }\n\n  /**\n   * Ignores common report-messages.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    ctx.result = ''\n  }\n\n  protected async handleResults (\n    overallCtx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const lines: string[] = []\n    const registryTags = registry ? mapToTags(registry.getTags()) : null\n    for (const result of results) {\n      const metric = result.metric\n      const ctx = result.result\n      const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields, registryTags)\n      lines.push(line)\n    }\n    overallCtx.result = `${overallCtx.result}${lines.join('\\n')}`\n  }\n\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): PrometheusMetricResult {\n    if (counter instanceof Counter) {\n      return {\n        canBeReported: true,\n        fields: {\n          '': counter.getCount() || 0\n        },\n        type: this.gaugeType\n      }\n    }\n    return {\n      canBeReported: true,\n      fields: {\n        '': counter.getCount() || 0\n      },\n      type: this.counterType\n    }\n  }\n\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n    return {\n      canBeReported: true,\n      fields: {\n        '': gauge.getValue()\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(histogram.getCount()),\n      fields: {\n        count: histogram.getCount() || 0,\n        sum: histogram.getSum().toString() || 0\n      },\n      type: this.histogramType\n    }\n  }\n\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(meter.getCount()),\n      fields: {\n        '': meter.getCount() || 0\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(timer.getCount()),\n      fields: {\n        count: timer.getCount() || 0,\n        sum: timer.getSum().toString() || 0\n      },\n      type: this.summaryType\n    }\n  }\n\n  /**\n   * Gets the mapping of tags with normalized names and filtered for reserved tags.\n   *\n   * @protected\n   * @param {Taggable | SerializableMetric} taggable\n   * @param {string[]} exclude\n   * @param {Tags} [registryTags]\n   * @returns {Tags}\n   * @memberof PrometheusMetricReporter\n   */\n  protected buildPrometheusTags (\n    taggable: Taggable | SerializableMetric,\n    exclude: string[],\n    registryTags?: Tags\n  ): Tags {\n    exclude.sort((a: string, b: string) => a.localeCompare(b))\n\n    const tags: { [x: string]: string } = {}\n    this.options.tags.forEach((value, key) => {\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    if (registryTags) {\n      Object.keys(registryTags).forEach((key) => {\n        const value = registryTags[key]\n        const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n        if (!exclude.includes(normalizedKey) &&\n          !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n          tags[normalizedKey] = value\n        }\n      })\n    }\n    const customTags = getMetricTags(taggable)\n    Object.keys(customTags).forEach((key) => {\n      const value = customTags[key]\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    return tags\n  }\n\n  /**\n   * Builds the metric string based on the specified type of the metric instance.\n   * Returns an empty string if the metric can't be reported - determined with the\n   * specified function.\n   *\n   * @private\n   * @template T\n   * @param {Date} now\n   * @param {T} metric\n   * @param {PrometheusMetricType} metricType\n   * @param {boolean} canReport\n   * @param {PrometheusFields} fields\n   * @param {Tags} [registryTags]\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricString(\n    now: Date,\n    metric: T,\n    metricType: PrometheusMetricType,\n    canReport: boolean,\n    fields: PrometheusFields,\n    registryTags?: Tags\n  ): string {\n    if (!canReport) {\n      return ''\n    }\n\n    const metricName = this.getMetricName(metric)\n    const description = this.getDescription(metric, metricName)\n    const timestamp = this.getTimestamp(now)\n    const tags = this.buildPrometheusTags(metric, ['le', 'quantile'], registryTags)\n    const tagStr = Object\n      .keys(tags)\n      .map((tag) => `${tag}=\"${tags[tag]}\"`)\n      .join(',')\n    let additionalFields = ''\n\n    if (metricType === 'histogram') {\n      additionalFields = this.getBuckets(metric as any, metricName, fields.count as number, tagStr, timestamp)\n    } else if (metricType === 'summary') {\n      additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp)\n    }\n\n    if (this.options.useUntyped) {\n      metricType = 'untyped'\n    }\n\n    let comments = ''\n    if (this.options.emitComments) {\n      comments = `# HELP ${metricName} ${description}\\n` +\n        `# TYPE ${metricName} ${metricType}\\n`\n    }\n\n    return comments + additionalFields + Object\n      .keys(fields)\n      .map((field) => {\n        const fieldStr = PrometheusMetricReporter.isEmpty(field) ? '' : `_${field}`\n        const valueStr = this.getValue(fields[field])\n\n        return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`\n      })\n      .join('')\n  }\n\n  /**\n   * Builds the description for a metric instance based on the description property.\n   * If no description was specified this function returns ' description'.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getDescription(metric: T, metricName: string): string {\n    let description = getMetricDescription(metric)\n    if (PrometheusMetricReporter.isEmpty(description)) {\n      description = `${metricName} description`\n    }\n    return description\n  }\n\n  /**\n   * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n   *\n   * @private\n   * @param {*} value\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getValue (value: any): string {\n    let valueStr = `${value}`\n\n    if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n      if (value === -Infinity) {\n        valueStr = '-Inf'\n      } else if (value === Infinity) {\n        valueStr = '+Inf'\n      }\n    }\n\n    return valueStr\n  }\n\n  /**\n   * Gets the UTC timestamp.\n   *\n   * @private\n   * @param {Date} now\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getTimestamp (now: Date): string {\n    return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : ''\n  }\n\n  /**\n   * Builds the string for bucket data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {number} count\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getBuckets(\n    metric: T,\n    metricName: string,\n    count: number,\n    tagStr: string,\n    timestamp: string): string {\n    const buckets: Buckets = getMetricBuckets(metric)\n    if (buckets) {\n      const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n      const bucketStrings: string[] = []\n      const counts: BucketToCountMap = getMetricCounts(metric)\n\n      for (const boundary of Object.keys(counts)) {\n        const bucketCount: number = counts[boundary as any]\n        bucketStrings.push(\n          `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`\n        )\n      }\n\n      return bucketStrings.join('\\n') +\n        `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`\n    }\n\n    return ''\n  }\n\n  /**\n   * Builds the string for percentile data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getQuantiles(\n    metric: T,\n    metricName: string,\n    tagStr: string,\n    timestamp: string): string {\n    const metadata: Metadata = getMetricMetadata(metric)\n    let quantiles: Percentiles | null = metadata[Percentiles.METADATA_NAME]\n    if (!quantiles) {\n      quantiles = new Percentiles()\n    }\n    const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n    const snapshot = getSnapshot(metric)\n\n    return quantiles\n      .boundaries\n      .map((boundary) => {\n        const value = snapshot.getValue(boundary)\n        return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`\n      })\n      .join('\\n') + '\\n'\n  }\n\n  /**\n   * Gets the normalized metric name.\n   *\n   * @private\n   * @param {Metric | SerializableMetric} metric\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricName (metric: Metric | SerializableMetric): string {\n    let name = getMetricName(metric)\n    const group = getMetricGroup(metric)\n    if (group) {\n      name = `${group}:${name}`\n    }\n\n    name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, '_')\n    if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.includes(name.charAt(0))) {\n      name = '_' + name.slice(1)\n    }\n    return name\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusMetricResult.html":{"url":"interfaces/PrometheusMetricResult.html","title":"interface - PrometheusMetricResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusMetricResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for a report result.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        canBeReported\n                                \n                                \n                                        fields\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canBeReported\n                                    \n                                \n                                \n                                    \n                                        canBeReported:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates if this result can be handle by the reporter.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                    \n                                \n                                \n                                    \n                                        fields:         PrometheusFields\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusFields\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains field-name to value mapping of this metric-result.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         PrometheusMetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusMetricType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of the metrics in fields property.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as cluster from 'cluster'\nimport { randomBytes } from 'crypto'\nimport { EventEmitter } from 'events'\nimport {\n  BucketCounting,\n  Buckets,\n  BucketToCountMap,\n  Counter,\n  Event,\n  Gauge,\n  getMetricBuckets,\n  getMetricCounts,\n  getMetricDescription,\n  getMetricGroup,\n  getMetricMetadata,\n  getMetricName,\n  getMetricTags,\n  getSnapshot,\n  Histogram,\n  mapToTags,\n  Metadata,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricReporter,\n  MetricSetReportContext,\n  MetricType,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  Sampling,\n  SerializableBucketCounting,\n  SerializableMetric,\n  SerializableSampling,\n  StdClock,\n  Taggable,\n  Tags,\n  Timer\n} from 'inspector-metrics'\nimport { DefaultPrometheusClusterOptions } from './DefaultPrometheusClusterOptions'\nimport { InterprocessReportRequest } from './InterprocessReportRequest'\nimport { InterprocessReportResponse } from './InterprocessReportResponse'\nimport { Percentiles } from './Percentiles'\nimport { PrometheusReporterOptions } from './PrometheusReporterOptions'\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = 'counter' | 'gauge' | 'histogram' | 'summary' | 'untyped';\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n  /**\n   * Type of the metrics in fields property.\n   *\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricResult\n   */\n  readonly type: PrometheusMetricType\n  /**\n   * Contains field-name to value mapping of this metric-result.\n   *\n   * @type {PrometheusFields}\n   * @memberof PrometheusMetricResult\n   */\n  readonly fields: PrometheusFields\n  /**\n   * Indicates if this result can be handle by the reporter.\n   *\n   * @type {boolean}\n   * @memberof PrometheusMetricResult\n   */\n  readonly canBeReported: boolean\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-request-messages\n   * from master process.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_REQUEST = 'inspector-prometheus:metric-reporter:request-metrics';\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-response-messages\n   * from forked processes.\n   *\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  public static readonly MESSAGE_TYPE_RESPONSE = 'inspector-prometheus:metric-reporter:response-metrics';\n  /**\n   * Used to replace unsupported characters from label name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_]', 'g');\n\n  /**\n   * used to replace the first character of a label name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly LABEL_NAME_START_EXCLUSION = ['_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Used to replace unsupported characters from metric name.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp('[^a-zA-Z0-9_:]', 'g');\n\n  /**\n   * used to replace the first character of a metric name if needed.\n   *\n   * @private\n   * @static\n   * @memberof PrometheusMetricReporter\n   */\n  private static readonly METRIC_NAME_START_EXCLUSION = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].sort(\n    (a: string, b: string) => a.localeCompare(b)\n  );\n\n  /**\n   * Checks if a given string is empty.\n   *\n   * @private\n   * @static\n   * @param {string} value\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isEmpty (value: string): boolean {\n    return !value || value.trim() === ''\n  }\n\n  /**\n   * Checks if a given value is a number.\n   *\n   * @private\n   * @static\n   * @param {*} value\n   * @returns {value is number}\n   * @memberof PrometheusMetricReporter\n   */\n  private static isNumber (value: any): value is number {\n    return typeof (value) === 'number'\n  }\n\n  /**\n   * The prometheus counter type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly counterType: PrometheusMetricType = 'counter';\n  /**\n   * The prometheus gauge type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly gaugeType: PrometheusMetricType = 'gauge';\n  /**\n   * The prometheus histogram type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly histogramType: PrometheusMetricType = 'histogram';\n  /**\n   * The prometheus summary type string.\n   *\n   * @private\n   * @type {PrometheusMetricType}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly summaryType: PrometheusMetricType = 'summary';\n  /**\n   * Internal eventbus used to forward received messages from forked metric reporters.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof PrometheusMetricReporter\n   */\n  private readonly internalEventbus: EventEmitter;\n\n  /**\n   * Creates an instance of PrometheusMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PrometheusMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    emitComments = true,\n    includeTimestamp = false,\n    log = console,\n    minReportingTimeout = 1,\n    tags = new Map(),\n    useUntyped = false,\n    clusterOptions = new DefaultPrometheusClusterOptions()\n  }: PrometheusReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      emitComments,\n      includeTimestamp,\n      log,\n      minReportingTimeout,\n      tags,\n      useUntyped\n    }, reporterType)\n    const co = this.options.clusterOptions\n    if (co?.enabled) {\n      this.internalEventbus = new EventEmitter()\n      if (co.sendMetricsToMaster) {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportRequest(message)\n        })\n      } else {\n        co.eventReceiver.on('message', async (worker, message, handle) => {\n          await this.handleReportResponse(message)\n        })\n      }\n    }\n  }\n\n  /**\n   * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n   *\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getMetricsString (): Promise {\n    const workerPromises: Array> = []\n    const clusterOptions = this.options.clusterOptions\n    if (this.canSendMessagesToWorkers()) {\n      const workers = await clusterOptions.getWorkers()\n      for (const worker of workers) {\n        const message: InterprocessReportRequest = {\n          id: this.generateRandomId(),\n          targetReporterType: this.reporterType,\n          type: PrometheusMetricReporter.MESSAGE_TYPE_REQUEST\n        }\n        const workerPromise: Promise = new Promise((resolve) => {\n          this.internalEventbus.once(message.id, (response: InterprocessReportResponse) => {\n            resolve(response.metricsStr)\n          })\n        })\n        const workerTimeout: Promise = new Promise((resolve) => setTimeout(() => {\n          resolve('')\n          this.internalEventbus.removeAllListeners(message.id)\n        }, clusterOptions.workerResponseTimeout))\n        clusterOptions\n          .sendToWorker(worker, message)\n          .catch((error) => console.log(error))\n        workerPromises.push(Promise.race([workerPromise, workerTimeout]))\n      }\n    }\n    const workerResponses = await Promise.all(workerPromises)\n    if (this.metricRegistries && this.metricRegistries.length > 0) {\n      const ctx = await this.report()\n      return `${ctx.result}${workerResponses.join('\\n')}`\n    }\n    return workerResponses.join('\\n') + '\\n'\n  }\n\n  /**\n   * Builds the text representation of the event specified.\n   *\n   * @param {MetricRegistry} event\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  public async getEventString>(event: TEvent): Promise {\n    const overallCtx: OverallReportContext = {\n      result: ''\n    }\n\n    const result = this.reportGauge(event, {\n      date: null,\n      metrics: [],\n      overallCtx,\n      registry: null,\n      type: 'gauge'\n    })\n\n    await this.handleResults(\n      overallCtx,\n      null,\n      event.getTime(),\n      'gauge',\n      [{\n        metric: event,\n        result\n      }]\n    )\n\n    return overallCtx.result\n  }\n\n  /**\n   * Use {@link #getEventString} instead.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async start (): Promise {\n    return this\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @memberof PrometheusMetricReporter\n   */\n  public async stop (): Promise {\n    return this\n  }\n\n  /**\n   * Always returns false, since the Prometheus reporter implements it's own messaging mechanism.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected sendMetricsToMaster (): boolean {\n    return false\n  }\n\n  /**\n   * Checks if the clustering support is enabled and the 'getWorkers' and 'sendToWorker'\n   * method is not null.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof PrometheusMetricReporter\n   */\n  protected canSendMessagesToWorkers (): boolean {\n    const clusterOptions = this.options.clusterOptions\n    return clusterOptions.enabled &&\n      !!clusterOptions.getWorkers &&\n      !!clusterOptions.sendToWorker\n  }\n\n  /**\n   * Generates a randomId used to identify worker report responses.\n   *\n   * @protected\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  protected generateRandomId (): string {\n    return randomBytes(32).toString('hex')\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_REQUEST},\n   * generates a response using {@link #getMetricsString} and sends it back to the master process\n   * with the id given through the request.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportRequest (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_REQUEST)) {\n      const request: InterprocessReportRequest = message\n      const metricsStr = await this.getMetricsString()\n      const response: InterprocessReportResponse = {\n        id: request.id,\n        metricsStr,\n        targetReporterType: request.targetReporterType,\n        type: PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE\n      }\n      if (this.options.clusterOptions.sendToMaster) {\n        this.options.clusterOptions.sendToMaster(response)\n          .catch((cause) => this.options.log?.error(\n            'could not send metrics to master process',\n            cause\n          ))\n      }\n    }\n  }\n\n  /**\n   * Checks if the specified message is of type {@link PrometheusMetricReporter#MESSAGE_TYPE_RESPONSE}\n   * and forwards the message to the internal eventbus using the messages id as message and the message\n   * object as argument.\n   *\n   * @protected\n   * @param {*} message\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportResponse (message: any): Promise {\n    if (this.canHandleMessage(message, PrometheusMetricReporter.MESSAGE_TYPE_RESPONSE)) {\n      const response: InterprocessReportResponse = message\n      this.internalEventbus.emit(response.id, response)\n    }\n  }\n\n  /**\n   * Ignores common report-messages.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @returns {Promise}\n   * @memberof PrometheusMetricReporter\n   */\n  protected async handleReportMessage (worker: cluster.Worker, message: any, handle: any): Promise {\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport (ctx: OverallReportContext): Promise {\n    ctx.result = ''\n  }\n\n  protected async handleResults (\n    overallCtx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const lines: string[] = []\n    const registryTags = registry ? mapToTags(registry.getTags()) : null\n    for (const result of results) {\n      const metric = result.metric\n      const ctx = result.result\n      const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields, registryTags)\n      lines.push(line)\n    }\n    overallCtx.result = `${overallCtx.result}${lines.join('\\n')}`\n  }\n\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): PrometheusMetricResult {\n    if (counter instanceof Counter) {\n      return {\n        canBeReported: true,\n        fields: {\n          '': counter.getCount() || 0\n        },\n        type: this.gaugeType\n      }\n    }\n    return {\n      canBeReported: true,\n      fields: {\n        '': counter.getCount() || 0\n      },\n      type: this.counterType\n    }\n  }\n\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n    return {\n      canBeReported: true,\n      fields: {\n        '': gauge.getValue()\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(histogram.getCount()),\n      fields: {\n        count: histogram.getCount() || 0,\n        sum: histogram.getSum().toString() || 0\n      },\n      type: this.histogramType\n    }\n  }\n\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(meter.getCount()),\n      fields: {\n        '': meter.getCount() || 0\n      },\n      type: this.gaugeType\n    }\n  }\n\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n    return {\n      canBeReported: !isNaN(timer.getCount()),\n      fields: {\n        count: timer.getCount() || 0,\n        sum: timer.getSum().toString() || 0\n      },\n      type: this.summaryType\n    }\n  }\n\n  /**\n   * Gets the mapping of tags with normalized names and filtered for reserved tags.\n   *\n   * @protected\n   * @param {Taggable | SerializableMetric} taggable\n   * @param {string[]} exclude\n   * @param {Tags} [registryTags]\n   * @returns {Tags}\n   * @memberof PrometheusMetricReporter\n   */\n  protected buildPrometheusTags (\n    taggable: Taggable | SerializableMetric,\n    exclude: string[],\n    registryTags?: Tags\n  ): Tags {\n    exclude.sort((a: string, b: string) => a.localeCompare(b))\n\n    const tags: { [x: string]: string } = {}\n    this.options.tags.forEach((value, key) => {\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    if (registryTags) {\n      Object.keys(registryTags).forEach((key) => {\n        const value = registryTags[key]\n        const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n        if (!exclude.includes(normalizedKey) &&\n          !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n          tags[normalizedKey] = value\n        }\n      })\n    }\n    const customTags = getMetricTags(taggable)\n    Object.keys(customTags).forEach((key) => {\n      const value = customTags[key]\n      const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, '_')\n      if (!exclude.includes(normalizedKey) &&\n        !PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.includes(normalizedKey.charAt(0))) {\n        tags[normalizedKey] = value\n      }\n    })\n    return tags\n  }\n\n  /**\n   * Builds the metric string based on the specified type of the metric instance.\n   * Returns an empty string if the metric can't be reported - determined with the\n   * specified function.\n   *\n   * @private\n   * @template T\n   * @param {Date} now\n   * @param {T} metric\n   * @param {PrometheusMetricType} metricType\n   * @param {boolean} canReport\n   * @param {PrometheusFields} fields\n   * @param {Tags} [registryTags]\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricString(\n    now: Date,\n    metric: T,\n    metricType: PrometheusMetricType,\n    canReport: boolean,\n    fields: PrometheusFields,\n    registryTags?: Tags\n  ): string {\n    if (!canReport) {\n      return ''\n    }\n\n    const metricName = this.getMetricName(metric)\n    const description = this.getDescription(metric, metricName)\n    const timestamp = this.getTimestamp(now)\n    const tags = this.buildPrometheusTags(metric, ['le', 'quantile'], registryTags)\n    const tagStr = Object\n      .keys(tags)\n      .map((tag) => `${tag}=\"${tags[tag]}\"`)\n      .join(',')\n    let additionalFields = ''\n\n    if (metricType === 'histogram') {\n      additionalFields = this.getBuckets(metric as any, metricName, fields.count as number, tagStr, timestamp)\n    } else if (metricType === 'summary') {\n      additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp)\n    }\n\n    if (this.options.useUntyped) {\n      metricType = 'untyped'\n    }\n\n    let comments = ''\n    if (this.options.emitComments) {\n      comments = `# HELP ${metricName} ${description}\\n` +\n        `# TYPE ${metricName} ${metricType}\\n`\n    }\n\n    return comments + additionalFields + Object\n      .keys(fields)\n      .map((field) => {\n        const fieldStr = PrometheusMetricReporter.isEmpty(field) ? '' : `_${field}`\n        const valueStr = this.getValue(fields[field])\n\n        return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`\n      })\n      .join('')\n  }\n\n  /**\n   * Builds the description for a metric instance based on the description property.\n   * If no description was specified this function returns ' description'.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getDescription(metric: T, metricName: string): string {\n    let description = getMetricDescription(metric)\n    if (PrometheusMetricReporter.isEmpty(description)) {\n      description = `${metricName} description`\n    }\n    return description\n  }\n\n  /**\n   * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n   *\n   * @private\n   * @param {*} value\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getValue (value: any): string {\n    let valueStr = `${value}`\n\n    if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n      if (value === -Infinity) {\n        valueStr = '-Inf'\n      } else if (value === Infinity) {\n        valueStr = '+Inf'\n      }\n    }\n\n    return valueStr\n  }\n\n  /**\n   * Gets the UTC timestamp.\n   *\n   * @private\n   * @param {Date} now\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getTimestamp (now: Date): string {\n    return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : ''\n  }\n\n  /**\n   * Builds the string for bucket data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {number} count\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getBuckets(\n    metric: T,\n    metricName: string,\n    count: number,\n    tagStr: string,\n    timestamp: string): string {\n    const buckets: Buckets = getMetricBuckets(metric)\n    if (buckets) {\n      const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n      const bucketStrings: string[] = []\n      const counts: BucketToCountMap = getMetricCounts(metric)\n\n      for (const boundary of Object.keys(counts)) {\n        const bucketCount: number = counts[boundary as any]\n        bucketStrings.push(\n          `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`\n        )\n      }\n\n      return bucketStrings.join('\\n') +\n        `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`\n    }\n\n    return ''\n  }\n\n  /**\n   * Builds the string for percentile data lines.\n   *\n   * @private\n   * @template T\n   * @param {T} metric\n   * @param {string} metricName\n   * @param {string} tagStr\n   * @param {string} timestamp\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getQuantiles(\n    metric: T,\n    metricName: string,\n    tagStr: string,\n    timestamp: string): string {\n    const metadata: Metadata = getMetricMetadata(metric)\n    let quantiles: Percentiles | null = metadata[Percentiles.METADATA_NAME]\n    if (!quantiles) {\n      quantiles = new Percentiles()\n    }\n    const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? ',' : ''\n    const snapshot = getSnapshot(metric)\n\n    return quantiles\n      .boundaries\n      .map((boundary) => {\n        const value = snapshot.getValue(boundary)\n        return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`\n      })\n      .join('\\n') + '\\n'\n  }\n\n  /**\n   * Gets the normalized metric name.\n   *\n   * @private\n   * @param {Metric | SerializableMetric} metric\n   * @returns {string}\n   * @memberof PrometheusMetricReporter\n   */\n  private getMetricName (metric: Metric | SerializableMetric): string {\n    let name = getMetricName(metric)\n    const group = getMetricGroup(metric)\n    if (group) {\n      name = `${group}:${name}`\n    }\n\n    name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, '_')\n    if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.includes(name.charAt(0))) {\n      name = '_' + name.slice(1)\n    }\n    return name\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusReporterOptions.html":{"url":"interfaces/PrometheusReporterOptions.html","title":"interface - PrometheusReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PrometheusReporterOptions.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PrometheusMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clusterOptions\n                                \n                                \n                                            Optional\n                                        emitComments\n                                \n                                \n                                            Optional\n                                        includeTimestamp\n                                \n                                \n                                            Optional\n                                        log\n                                \n                                \n                                            Optional\n                                        useUntyped\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clusterOptions\n                                    \n                                \n                                \n                                    \n                                        clusterOptions:     PrometheusClusterOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrometheusClusterOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Options for clustering support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitComments\n                                    \n                                \n                                \n                                    \n                                        emitComments:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if comments like HELP and TYPE should be emitted\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeTimestamp\n                                    \n                                \n                                \n                                    \n                                        includeTimestamp:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if UTC converted timestamps should be appended to each metric data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useUntyped\n                                    \n                                \n                                \n                                    \n                                        useUntyped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if the untyped should always be used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport { MetricReporterOptions, Logger } from 'inspector-metrics'\nimport { PrometheusClusterOptions } from './PrometheusClusterOptions'\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n  /**\n   * indicates if UTC converted timestamps should be appended to each metric data\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly includeTimestamp?: boolean\n  /**\n   * indicates if comments like HELP and TYPE should be emitted\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly emitComments?: boolean\n  /**\n   * indicates if the untyped should always be used\n   *\n   * @type {boolean}\n   * @memberof PrometheusReporterOptions\n   */\n  readonly useUntyped?: boolean\n  /**\n   * Options for clustering support.\n   *\n   * @type {PrometheusClusterOptions}\n   * @memberof PrometheusReporterOptions\n   */\n  clusterOptions?: PrometheusClusterOptions\n  /**\n   * Minimal logger interface to report failures.\n   *\n   * @type {Logger}\n   * @memberof PrometheusReporterOptions\n   */\n  log?: Logger\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PushgatewayReporterOptions.html":{"url":"interfaces/PushgatewayReporterOptions.html","title":"interface - PushgatewayReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PushgatewayReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PushgatewayMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        host\n                                \n                                \n                                            Optional\n                                        instance\n                                \n                                \n                                            Optional\n                                        job\n                                \n                                \n                                            Optional\n                                        log\n                                \n                                \n                                            Optional\n                                        port\n                                \n                                \n                                            Optional\n                                        reporter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The hostname or ip address of the pushgateway\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                    \n                                \n                                \n                                    \n                                        instance:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of this instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        job\n                                    \n                                \n                                \n                                    \n                                        job:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of the job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:         Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A simplified logger interface to log response code and message of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The port of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reporter\n                                    \n                                \n                                \n                                    \n                                        reporter:         PrometheusMetricReporter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PrometheusMetricReporter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporter use ot generate the metrics string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support'\n\nimport * as http from 'http'\nimport {\n  Counter,\n  DisabledClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\nimport { PrometheusMetricReporter } from './PrometheusMetricReporter'\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @interface PushgatewayReporterOptions\n */\nexport interface PushgatewayReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * The hostname or ip address of the pushgateway\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly host?: string\n  /**\n   * The port of the pushgateway.\n   *\n   * @type {number}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly port?: number\n  /**\n   * The id of the job.\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly job?: string\n  /**\n   * The id of this instance.\n   *\n   * @type {string}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly instance?: string\n  /**\n   * The reporter use ot generate the metrics string.\n   *\n   * @type {PrometheusMetricReporter}\n   * @memberof PushgatewayReporterOptions\n   */\n  readonly reporter?: PrometheusMetricReporter\n  /**\n   * A simplified logger interface to log response code and message of the pushgateway.\n   *\n   * @type {Logger}\n   * @memberof PushgatewayReporterOptions\n   */\n  log?: Logger\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configured pushgateway using the text format.\n *\n * Clustering support is not implemented and disabled by default.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Creates an instance of PushgatewayMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof PushgatewayMetricReporter\n   */\n  public constructor ({\n    clock = new StdClock(),\n    host = '',\n    instance = '',\n    job = '',\n    log = console,\n    minReportingTimeout = 1,\n    port = 9091,\n    reporter,\n    reportInterval = 1000,\n    scheduler = setInterval,\n    tags = new Map(),\n    unit = MILLISECOND,\n    clusterOptions = new DisabledClusterOptions()\n  }: PushgatewayReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      host,\n      instance,\n      job,\n      log,\n      minReportingTimeout,\n      port,\n      reportInterval,\n      reporter,\n      scheduler,\n      tags,\n      unit\n    }, reporterType)\n  }\n\n  /**\n   * Uses {@link PrometheusMetricReporter#getEventString} to build the string and sends the event\n   * straight to the pushgateway.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof PushgatewayMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    const payload = await this.options.reporter.getEventString(event)\n\n    this.sendPayload(payload)\n\n    return event\n  }\n\n  /**\n   * Does nothing.\n   *\n   * @returns {Promise}\n   * @memberof PushgatewayMetricReporter\n   */\n  public async flushEvents (): Promise {\n  }\n\n  /**\n   * Calls the {@link PrometheusMetricReporter} to generate the metrics in a valid prometheus text format.\n   * Sends the metrics via 'PUT' to the configured pushgateway.\n   * The {@link #beforeReport} and {@link #afterReport} methods are not invoked.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected async report (): Promise {\n    const ctx = this.createOverallReportContext()\n    const payload = await this.options.reporter.getMetricsString()\n\n    this.sendPayload(payload)\n\n    ctx.result = payload\n    return ctx\n  }\n\n  /**\n   * Sends the specified payload to the prometheus pushgateway.\n   *\n   * @protected\n   * @param {string} payload\n   * @memberof PushgatewayMetricReporter\n   */\n  protected sendPayload (payload: string): void {\n    const options = {\n      headers: {\n        'Content-Length': payload.length,\n        'Content-Type': 'text/plain'\n      },\n      host: this.options.host,\n      method: 'PUT',\n      path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n      port: `${this.options.port}`\n    }\n\n    const req = http.request(options, (res) => {\n      if (this.options.log) {\n        this.options.log.trace(`${res.statusCode} ${res.statusMessage}`)\n      }\n    })\n    req.write(payload)\n    req.end()\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): void {\n  }\n\n  /**\n   * Not implemented.\n   *\n   * @protected\n   * @memberof PushgatewayMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): void {\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReportMessageReceiver.html":{"url":"interfaces/ReportMessageReceiver.html","title":"interface - ReportMessageReceiver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReportMessageReceiver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts\n        \n\n            \n                Description\n            \n            \n                Interface for abstracting event-emitter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    on\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            on\n                        \n                        \n                    \n                \n            \n            \n                \non(messageType: string, callback: (worker: Worker,message: any,handle: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts:21\n                \n            \n\n\n            \n                \n                    Receives an event with a message-type-id and payload. The specified callback gets\ninvoked if a message is received.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    messageType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nusually 'message'\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Worker } from \"cluster\";\n\n/**\n * Interface for abstracting event-emitter.\n *\n * @export\n * @interface ReportMessageReceiver\n */\nexport interface ReportMessageReceiver {\n  /**\n   * Receives an event with a message-type-id and payload. The specified callback gets\n   * invoked if a message is received.\n   *\n   * @param {string} messageType - usually 'message'\n   * @param {(worker: Worker, message: any, handle: any) => any} callback\n   * @returns {*}\n   * @memberof ReportMessageReceiver\n   */\n  on(messageType: string, callback: (worker: Worker, message: any, handle: any) => any): any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReportingResult.html":{"url":"interfaces/ReportingResult.html","title":"interface - ReportingResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReportingResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/reporting-result.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reporting results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        metric\n                                \n                                \n                                        result\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        metric\n                                    \n                                \n                                \n                                    \n                                        metric:     M\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     M\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The metric the result refers to.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                    \n                                \n                                \n                                    \n                                        result:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The reporting result - implementation specific.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"../model/metric\";\n\n/**\n * Helper interface for reporting results.\n */\nexport interface ReportingResult {\n  /**\n   * The metric the result refers to.\n   *\n   * @type {M}\n   * @memberof ReportingResult\n   */\n  readonly metric: M;\n  /**\n   * The reporting result - implementation specific.\n   *\n   * @type {T}\n   * @memberof ReportingResult\n   */\n  readonly result: T;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    snapshot\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            size\n                        \n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:19\n                \n            \n\n\n            \n                \n                    Gets the capacity of this reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            snapshot\n                        \n                        \n                    \n                \n            \n            \n                \nsnapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:36\n                \n            \n\n\n            \n                \n                    Creates a new snapshot of this reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:28\n                \n            \n\n\n            \n                \n                    Adds a value to the reservoir.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/sampling.ts\n        \n\n            \n                Description\n            \n            \n                Interface for all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSnapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSnapshot\n                        \n                        \n                    \n                \n            \n            \n                \ngetSnapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/sampling.ts:19\n                \n            \n\n\n            \n                \n                    Gets the snapshot of values.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializedSnapshot, SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Interface for all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n  /**\n   * Gets the snapshot of values.\n   *\n   * @returns {Snapshot}\n   * @memberof Sampling\n   */\n  getSnapshot(): Snapshot;\n\n}\n\n/**\n * The serialized version of {@link Sampling}.\n *\n * @export\n * @interface SerializableSampling\n */\nexport interface SerializableSampling {\n\n  /**\n   * Gets the serialized, sorted collection of samples.\n   *\n   * @returns {SerializedSnapshot}\n   * @memberof SerializableSampling\n   */\n  snapshot: SerializedSnapshot;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableSampling} or not.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {metric is SerializableSampling}\n */\nexport function isSerializableSampling(metric: Sampling | SerializableSampling): metric is SerializableSampling {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getSnapshot && typeof anyMetric.getSnapshot === \"function\")) {\n    return false;\n  }\n  return anyMetric.hasOwnProperty(\"snapshot\");\n}\n\n/**\n * Convenience method to get the snapshot of a {@link Sampling} or a {@link SerializableSampling}.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {Snapshot}\n */\nexport function getSnapshot(metric: Sampling | SerializableSampling): Snapshot {\n  if (isSerializableSampling(metric)) {\n    return new SimpleSnapshot(metric.snapshot.values);\n  } else {\n    return metric.getSnapshot();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScheduledMetricReporterOptions.html":{"url":"interfaces/ScheduledMetricReporterOptions.html","title":"interface - ScheduledMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScheduledMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for the ScheduledMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                        MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        reportInterval\n                                \n                                \n                                            Optional\n                                        scheduler\n                                \n                                \n                                            Optional\n                                        unit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        reportInterval\n                                    \n                                \n                                \n                                    \n                                        reportInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporting interval in the time-unit specified in #unit.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheduler\n                                    \n                                \n                                \n                                    \n                                        scheduler:         Scheduler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scheduler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The scheduler function used to trigger reporting runs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                    \n                                \n                                \n                                    \n                                        unit:         TimeUnit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimeUnit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time unit for the reporting interval.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MILLISECOND, TimeUnit } from \"../model/time-unit\";\nimport { MetricReporter } from \"./metric-reporter\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\n\n/**\n * Scheduler function type definition.\n */\nexport type Scheduler = (prog: () => Promise, interval: number) => NodeJS.Timer;\n\n/**\n * Options for the {@link ScheduledMetricReporter}.\n *\n * @export\n * @interface ScheduledMetricReporterOptions\n * @extends {MetricReporterOptions}\n */\nexport interface ScheduledMetricReporterOptions extends MetricReporterOptions {\n  /**\n   * The reporting interval in the time-unit specified in {@link #unit}.\n   *\n   * @type {number}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly reportInterval?: number;\n  /**\n   * Time unit for the reporting interval.\n   *\n   * @type {TimeUnit}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly unit?: TimeUnit;\n  /**\n   * The scheduler function used to trigger reporting runs.\n   *\n   * @type {Scheduler}\n   * @memberof ScheduledMetricReporterOptions\n   */\n  readonly scheduler?: Scheduler;\n}\n\n/**\n * Base-class for scheduled metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class ScheduledMetricReporter\n */\nexport abstract class ScheduledMetricReporter\n  extends MetricReporter {\n\n  /**\n   * Timer instance returned by the scheduler function.\n   *\n   * @private\n   * @type {NodeJS.Timer}\n   * @memberof ScheduledMetricReporter\n   */\n  private timer: NodeJS.Timer;\n\n  /**\n   * Creates an instance of ScheduledMetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof ScheduledMetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n    super(options, reporterType);\n  }\n\n  /**\n   * Uses the scheduler function to call the {@link #report} function\n   * in the interval specified. The interval is converted into {@link MILLISECOND}s.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start(): Promise {\n    const interval: number = this.options.unit.convertTo(this.options.reportInterval, MILLISECOND);\n    this.timer = this.options.scheduler(async () => this.report(), interval);\n    return this;\n  }\n\n  /**\n   * Stops reporting metrics.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async stop(): Promise {\n    if (this.timer) {\n        this.timer.unref();\n    }\n    return this;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:48\n                \n            \n\n\n            \n                \n                    Triggers the initialization process.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isReady\n                        \n                        \n                    \n                \n            \n            \n                \nisReady()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:40\n                \n            \n\n\n            \n                \n                    Indicates if the sender is ready to send data.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            send\n                        \n                        \n                    \n                \n            \n            \n                \nsend(points: IPoint[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts:57\n                \n            \n\n\n            \n                \n                    Sends the given data points to influxdb.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                            IPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { IPoint } from 'influx'\nimport {\n  Counter,\n  DefaultClusterOptions,\n  Event,\n  Gauge,\n  Histogram,\n  Logger,\n  Meter,\n  Metric,\n  MetricRegistry,\n  MetricSetReportContext,\n  MetricType,\n  MILLISECOND,\n  MonotoneCounter,\n  OverallReportContext,\n  ReportingResult,\n  ScheduledMetricReporter,\n  ScheduledMetricReporterOptions,\n  StdClock,\n  Timer\n} from 'inspector-metrics'\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n  /**\n   * Indicates if the sender is ready to send data.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  isReady(): Promise\n\n  /**\n   * Triggers the initialization process.\n   *\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  init(): Promise\n\n  /**\n   * Sends the given data points to influxdb.\n   *\n   * @param {IPoint[]} points\n   * @returns {Promise}\n   * @memberof Sender\n   */\n  send(points: IPoint[]): Promise\n\n}\n\n/**\n * Options for {@link InfluxMetricReporter}.\n *\n * @export\n * @interface InfluxMetricReporterOptions\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface InfluxMetricReporterOptions extends ScheduledMetricReporterOptions {\n  /**\n   * A logger instance used to report errors.\n   *\n   * @type {(Logger | null)}\n   * @memberof InfluxMetricReporterOptions\n   */\n  log: Logger | null\n  /**\n   * A sender implementation used to send metrics to influx DB server.\n   *\n   * @type {Sender}\n   * @memberof InfluxMetricReporterOptions\n   */\n  readonly sender: Sender\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {ScheduledMetricReporter}\n */\nexport class InfluxMetricReporter extends ScheduledMetricReporter {\n  /**\n   * Metadata for the logger.\n   *\n   * @private\n   * @type {*}\n   * @memberof InfluxMetricReporter\n   */\n  private readonly logMetadata: any;\n\n  /**\n   * Creates an instance of InfluxMetricReporter.\n   *\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof InfluxMetricReporter\n   */\n  public constructor ({\n    sender,\n    log = console,\n    reportInterval = 1000,\n    unit = MILLISECOND,\n    clock = new StdClock(),\n    scheduler = setInterval,\n    minReportingTimeout = 1,\n    clusterOptions = new DefaultClusterOptions(),\n    tags = new Map()\n  }: InfluxMetricReporterOptions,\n  reporterType?: string) {\n    super({\n      clock,\n      clusterOptions,\n      log,\n      minReportingTimeout,\n      reportInterval,\n      scheduler,\n      sender,\n      tags,\n      unit\n    }, reporterType)\n\n    this.logMetadata = {\n      reportInterval,\n      tags,\n      unit\n    }\n  }\n\n  /**\n   * Gets the logger instance.\n   *\n   * @returns {Logger}\n   * @memberof InfluxMetricReporter\n   */\n  public getLog (): Logger {\n    return this.options.log\n  }\n\n  /**\n   * Sets the logger instance.\n   *\n   * @param {(Logger | null)} log\n   * @memberof InfluxMetricReporter\n   */\n  public setLog (log: Logger | null): void {\n    this.options.log = log\n  }\n\n  /**\n   * Starts the sender and calls the super method to start scheduling.\n   *\n   * @returns {Promise}\n   * @memberof ScheduledMetricReporter\n   */\n  public async start (): Promise {\n    await this.options.sender.init()\n    return await super.start()\n  }\n\n  /**\n   * Sends an event directly to influxdb.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n    if (!(await this.options.sender.isReady())) {\n      throw new Error(\"Sender is not ready. Wait for the 'start' method to complete.\")\n    }\n\n    const value = event.getValue()\n    if (!value) {\n      return await Promise.reject(new Error('Invalid event value'))\n    }\n\n    const point = this.reportGauge(event, {\n      date: event.getTime(),\n      metrics: [],\n      overallCtx: {},\n      registry: null,\n      type: 'gauge'\n    })\n    point.timestamp = event.getTime()\n\n    try {\n      await this.handleResults({}, null, null, 'gauge', [{\n        metric: event,\n        result: point\n      }])\n\n      if (this.options.log) {\n        this.options.log.debug('wrote event', this.logMetadata)\n      }\n      return event\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing event - reason: ${message}`, reason, this.logMetadata)\n      }\n      throw reason\n    }\n  }\n\n  /**\n   * Reports the data points for each registered {@link MetricRegistry}.\n   *\n   * @protected\n   * @memberof InfluxMetricReporter\n   */\n  protected async report (): Promise {\n    const senderReady = await this.options.sender.isReady()\n    if (senderReady) {\n      return await super.report()\n    }\n    return {}\n  }\n\n  /**\n   * Uses the sender to report the given data points.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof InfluxMetricReporter\n   */\n  protected async handleResults (\n    ctx: OverallReportContext,\n    registry: MetricRegistry | null,\n    date: Date,\n    type: MetricType,\n    results: Array>): Promise {\n    const points = results.map((result) => result.result)\n    if (points.length === 0) {\n      return\n    }\n\n    try {\n      points.forEach((point) => {\n        if (!(point.timestamp instanceof Date)) {\n          point.timestamp = new Date(point.timestamp)\n        }\n      })\n\n      await this.options.sender.send(points)\n      if (this.options.log) {\n        this.options.log.debug(`wrote ${type} metrics`, this.logMetadata)\n      }\n    } catch (reason) {\n      if (this.options.log) {\n        const message = reason.message as string\n        this.options.log\n          .error(`error writing ${type} metrics - reason: ${message}`, reason, this.logMetadata)\n      }\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Counter} or  {@link MonotoneCounter}.\n   *\n   * @protected\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportCounter (\n    counter: MonotoneCounter | Counter,\n    ctx: MetricSetReportContext): IPoint {\n    const value = counter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(counter)\n    const measurement = this.getMeasurementName(counter)\n\n    fields[`${fieldNamePrefix}count`] = counter.getCount() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, counter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Gauge}.\n   *\n   * @protected\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportGauge (gauge: Gauge, ctx: MetricSetReportContext>): IPoint {\n    const value = gauge.getValue()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(gauge)\n    const measurement = this.getMeasurementName(gauge)\n\n    fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx ? ctx.registry : null, gauge),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Histogram}.\n   *\n   * @protected\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportHistogram (histogram: Histogram, ctx: MetricSetReportContext): IPoint {\n    const value = histogram.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = histogram.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(histogram)\n    const measurement = this.getMeasurementName(histogram)\n\n    fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, histogram),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Meter}.\n   *\n   * @protected\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportMeter (meter: Meter, ctx: MetricSetReportContext): IPoint {\n    const value = meter.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(meter)\n    const measurement = this.getMeasurementName(meter)\n\n    fields[`${fieldNamePrefix}count`] = meter.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, meter),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds an IPoint instance for the given {@link Timer}.\n   *\n   * @protected\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {IPoint}\n   * @memberof InfluxMetricReporter\n   */\n  protected reportTimer (timer: Timer, ctx: MetricSetReportContext): IPoint {\n    const value = timer.getCount()\n    if (!value || isNaN(value)) {\n      return null\n    }\n    const snapshot = timer.getSnapshot()\n    const fields: any = {}\n    const fieldNamePrefix = this.getFieldNamePrefix(timer)\n    const measurement = this.getMeasurementName(timer)\n\n    fields[`${fieldNamePrefix}count`] = timer.getCount() || 0\n    fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate())\n    fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate())\n    fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate())\n    fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax())\n    fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean())\n    fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate())\n    fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin())\n    fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian())\n    fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile())\n    fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile())\n    fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile())\n    fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile())\n    fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile())\n    fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev())\n\n    return {\n      fields,\n      measurement,\n      tags: this.buildTags(ctx.registry, timer),\n      timestamp: ctx.date\n    }\n  }\n\n  /**\n   * Builds the prefix for a field name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getFieldNamePrefix (metric: Metric): string {\n    if (metric.getGroup()) {\n      return `${metric.getName()}.`\n    }\n    return ''\n  }\n\n  /**\n   * Builds the prefix for the metric name.\n   *\n   * @private\n   * @param {Metric} metric\n   * @returns {string}\n   * @memberof InfluxMetricReporter\n   */\n  private getMeasurementName (metric: Metric): string {\n    if (metric.getGroup()) {\n      return metric.getGroup()\n    }\n    return metric.getName()\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableBucketCounting.html":{"url":"interfaces/SerializableBucketCounting.html","title":"interface - SerializableBucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializableBucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/counting.ts\n        \n\n            \n                Description\n            \n            \n                Serialized version of BucketCounting.\n\n            \n\n            \n                Extends\n            \n            \n                        SerializableMetric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buckets\n                                \n                                \n                                        counts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buckets\n                                    \n                                \n                                \n                                    \n                                        buckets:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The boundaries used to do the counting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:         BucketToCountMap\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BucketToCountMap\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mapping: boundary to the count of events within boundary.\nThe meaning of the count is implementation specific.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n  /**\n   * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n   *\n   * @returns {number}\n   * @memberof Counting\n   */\n  getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n  /**\n   * Creates a new Buckets object with linear-distributed values.\n   *\n   * @static\n   * @param {number} start\n   * @param {number} bucketWidth\n   * @param {number} count\n   * @param {number} [precision=10000]\n   * @returns {Buckets}\n   * @memberof Buckets\n   */\n  public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n    const boundaries = new Array(count);\n    const buckets = new Buckets(boundaries);\n    for (let i = 0; i  a - b);\n  }\n\n}\n\n/**\n * Interface for defining a collection of boundaries to count events (e.g. method calls, requests per time-unit).\n * The meaning of the counts is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n  /**\n   * Gets the current Buckets object used to do the counting.\n   *\n   * @returns {Buckets}\n   * @memberof BucketCounting\n   */\n  getBuckets(): Buckets;\n\n  /**\n   * Gets a mapping from the boundary to the count of events\n   * within the corresponding boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {Map}\n   * @memberof BucketCounting\n   */\n  getCounts(): Map;\n\n}\n\n/**\n * Helper interface for serialized bucket counts.\n */\nexport interface BucketToCountMap {\n  [bucket: number]: number;\n}\n\n/**\n * Serialized version of {@link BucketCounting}.\n *\n * @export\n * @interface SerializableBucketCounting\n * @extends {SerializableMetric}\n */\nexport interface SerializableBucketCounting extends SerializableMetric {\n\n  /**\n   * The boundaries used to do the counting.\n   *\n   * @returns {number[]}\n   * @memberof SerializableBucketCounting\n   */\n  buckets: number[];\n\n  /**\n   * Mapping: boundary to the count of events within boundary.\n   * The meaning of the count is implementation specific.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof SerializableBucketCounting\n   */\n  counts: BucketToCountMap;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableBucketCounting} or not.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {metric is SerializableBucketCounting}\n */\nexport function isSerializableBucketCounting(\n  metric: BucketCounting | SerializableBucketCounting): metric is SerializableBucketCounting {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getBuckets && typeof anyMetric.getBuckets === \"function\") ||\n    (anyMetric.getCounts && typeof anyMetric.getCounts === \"function\")) {\n    return false;\n  }\n  return Array.isArray(anyMetric.buckets);\n}\n\n/**\n * Convenience method the get the {@link Buckets} of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {Buckets}\n */\nexport function getMetricBuckets(metric: BucketCounting | SerializableBucketCounting): Buckets {\n  if (isSerializableBucketCounting(metric)) {\n    return new Buckets(metric.buckets);\n  } else {\n    return metric.getBuckets();\n  }\n}\n\n/**\n * Convenience method the get the counts of a\n * {@link BucketCounting} or a {@link SerializableBucketCounting}.\n *\n * @export\n * @param {(BucketCounting | SerializableBucketCounting)} metric\n * @returns {BucketToCountMap}\n */\nexport function getMetricCounts(metric: BucketCounting | SerializableBucketCounting): BucketToCountMap {\n  if (isSerializableBucketCounting(metric)) {\n    return metric.counts;\n  } else {\n    const counts: BucketToCountMap = {};\n    for (const [bucket, count] of metric.getCounts()) {\n      counts[bucket] = count;\n    }\n    return counts;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableMetered.html":{"url":"interfaces/SerializableMetered.html","title":"interface - SerializableMetered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializableMetered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metered.ts\n        \n\n            \n                Description\n            \n            \n                Serializable version of a Meter.\n\n            \n\n            \n                Extends\n            \n            \n                        SerializableMetric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        meanRate\n                                \n                                \n                                        rates\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total count of events reported.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meanRate\n                                    \n                                \n                                \n                                    \n                                        meanRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rates\n                                    \n                                \n                                \n                                    \n                                        rates:         MeteredRates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MeteredRates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric, SerializableMetric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n  /**\n   * Gets the total number of events.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getCount(): number;\n\n  /**\n   * Gets the rate of the last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get15MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get5MinuteRate(): number;\n\n  /**\n   * Gets the rate of the last minute.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  get1MinuteRate(): number;\n\n  /**\n   * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @returns {number}\n   * @memberof Metered\n   */\n  getMeanRate(): number;\n\n}\n\n/**\n * Helper interface for serialized {@link Meter} metrics - represents a snapshot of the rates of a {@link Meter}.\n *\n * @export\n * @interface MeteredRates\n */\nexport interface MeteredRates {\n  [rate: number]: number;\n}\n\n/**\n * Serializable version of a {@link Meter}.\n *\n * @export\n * @interface SerializableMetered\n * @extends {SerializableMetric}\n */\nexport interface SerializableMetered extends SerializableMetric {\n  /**\n   * Total count of events reported.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  count: number;\n  /**\n   * mean rate - the meaning of the mean-rate depends on the actual implementation.\n   *\n   * @type {number}\n   * @memberof SerializableMetered\n   */\n  meanRate: number;\n  /**\n   * Mapping of time-frame to rate values - time-unit and meaning depend on the actual implementation.\n   *\n   * @type {MeteredRates}\n   * @memberof SerializableMetered\n   */\n  rates: MeteredRates;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableMetric.html":{"url":"interfaces/SerializableMetric.html","title":"interface - SerializableMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializableMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/metric.ts\n        \n\n            \n                Description\n            \n            \n                A Metric with public fields for convenient use after serialization.\n\n            \n\n            \n                Extends\n            \n            \n                        Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        group\n                                \n                                \n                                        metadata\n                                \n                                \n                                        name\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Description of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                    \n                                \n                                \n                                    \n                                        group:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Group of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                    \n                                \n                                \n                                    \n                                        metadata:         Metadata\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Metadata\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata map of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    name of the metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:         Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tags of the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { mapToMetadata, Metadata, MetadataContainer } from \"./metadata-container\";\nimport { mapToTags, Taggable, Tags } from \"./taggable\";\n\n/**\n * Determines if the metric passed is a {@link SerializableMetric} or not.\n *\n * @export\n * @param {(Groupable | MetadataContainer | Taggable | Metric | SerializableMetric)} metric\n * @returns {metric is SerializableMetric}\n */\nexport function isSerializableMetric(\n  metric: Groupable | MetadataContainer | Taggable | Metric | SerializableMetric): metric is SerializableMetric {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getGroup && typeof anyMetric.getGroup === \"function\") ||\n    (anyMetric.getMetadataMap && typeof anyMetric.getMetadataMap === \"function\") ||\n    (anyMetric.getTags && typeof anyMetric.getTags === \"function\") ||\n    (anyMetric.getName && typeof anyMetric.getName === \"function\")) {\n    return false;\n  }\n  return typeof anyMetric.name === \"string\";\n}\n\n/**\n * Convenience method the get the name of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricName(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.name;\n  } else {\n    return metric.getName();\n  }\n}\n\n/**\n * Convenience method the get the description of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Metric | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricDescription(metric: Metric | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.description;\n  } else {\n    return metric.getDescription();\n  }\n}\n\n/**\n * Convenience method the get the group of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Groupable | SerializableMetric)} metric\n * @returns {string}\n */\nexport function getMetricGroup(metric: Groupable | SerializableMetric): string {\n  if (isSerializableMetric(metric)) {\n    return metric.group;\n  } else {\n    return metric.getGroup();\n  }\n}\n\n/**\n * Convenience method the get the tags of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(Taggable | SerializableMetric)} metric\n * @returns {Tags}\n */\nexport function getMetricTags(metric: Taggable | SerializableMetric): Tags {\n  if (isSerializableMetric(metric)) {\n    return (metric.tags as any) as Tags;\n  } else {\n    return mapToTags(metric.getTags());\n  }\n}\n\n/**\n * Convenience method the get the metadata of a {@link Metric} or a {@link SerializableMetric}.\n *\n * @export\n * @param {(MetadataContainer | SerializableMetric)} metric\n * @returns {Metadata}\n */\nexport function getMetricMetadata(metric: MetadataContainer | SerializableMetric): Metadata {\n  if (isSerializableMetric(metric)) {\n    return metric.metadata;\n  } else {\n    return mapToMetadata(metric.getMetadataMap());\n  }\n}\n\n/**\n * Representation of a metric.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {MetadataContainer}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n  /**\n   * Gets the name of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getName(): string;\n\n  /**\n   * Sets the name of the metric.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Metric\n   */\n  setName(name: string): this;\n\n  /**\n   * Gets the description of the metric.\n   *\n   * @returns {string}\n   * @memberof Metric\n   */\n  getDescription(): string;\n\n  /**\n   * Sets the description of the metric.\n   *\n   * @param {string} description\n   * @returns {this}\n   * @memberof Metric\n   */\n  setDescription(description: string): this;\n\n}\n\n/**\n * A {@link Metric} with public fields for convenient use after serialization.\n *\n * @export\n * @interface SerializableMetric\n * @extends {Metric}\n */\nexport interface SerializableMetric extends Metric {\n  /**\n   * Description of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  description: string;\n  /**\n   * Group of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  group: string;\n  /**\n   * Metadata map of the metric.\n   *\n   * @type {Metadata}\n   * @memberof SerializableMetric\n   */\n  metadata: Metadata;\n  /**\n   * name of the metric.\n   *\n   * @type {string}\n   * @memberof SerializableMetric\n   */\n  name: string;\n  /**\n   * Tags of the metric.\n   *\n   * @type {Tags}\n   * @memberof SerializableMetric\n   */\n  tags: Tags;\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set description\n * - get / set tags\n * - get / set metadata\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n * @implements {SerializableMetric}\n */\nexport abstract class BaseMetric implements Metric, SerializableMetric {\n\n  /**\n   * A static number instance to give an unique id within an application instance.\n   * This counter is only unique per process, forked processes start from 0.\n   *\n   * @private\n   * @static\n   * @memberof BaseMetric\n   */\n  private static COUNTER = 0;\n\n  /**\n   * The unique id of this metric instance.\n   *\n   * @type {number}\n   * @memberof BaseMetric\n   */\n  public readonly id: number = BaseMetric.COUNTER++;\n  /**\n   * The group set to this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public group: string;\n  /**\n   * The name of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public name: string;\n  /**\n   * The description of this metric.\n   *\n   * @protected\n   * @type {string}\n   * @memberof BaseMetric\n   */\n  public description: string;\n  /**\n   * The metadata associated with an instance of class.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected metadataMap: Map = new Map();\n  /**\n   * Maps of tags for this metric.\n   *\n   * @protected\n   * @type {Map}\n   * @memberof BaseMetric\n   */\n  protected tagMap: Map = new Map();\n\n  public get metadata(): Metadata {\n    return mapToMetadata(this.metadataMap);\n  }\n\n  public get tags(): Tags {\n    return mapToTags(this.tagMap);\n  }\n\n  public getMetadataMap(): Map {\n    return this.metadataMap;\n  }\n\n  public getMetadata(name: string): T {\n    return this.metadataMap.get(name) as T;\n  }\n\n  public removeMetadata(name: string): T {\n    const value = this.metadataMap.get(name) as T;\n    this.metadataMap.delete(name);\n    return value;\n  }\n\n  public setMetadata(name: string, value: T): this {\n    this.metadataMap.set(name, value);\n    return this;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public setName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public setDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  public getGroup(): string {\n    return this.group;\n  }\n\n  public setGroup(group: string): this {\n    this.group = group;\n    return this;\n  }\n\n  public getTags(): Map {\n    return this.tagMap;\n  }\n\n  public getTag(name: string): string {\n    return this.tagMap.get(name);\n  }\n\n  public setTag(name: string, value: string): this {\n    this.tagMap.set(name, value);\n    return this;\n  }\n\n  public setTags(tags: Map): this {\n    this.tagMap = tags;\n    return this;\n  }\n\n  public addTags(tags: Map): this {\n    tags.forEach((value, key) => this.tagMap.set(key, value));\n    return this;\n  }\n\n  public removeTag(name: string): this {\n    this.tagMap.delete(name);\n    return this;\n  }\n\n  public removeTags(...names: string[]): this {\n    names.forEach((name) => this.removeTag(name));\n    return this;\n  }\n\n  public toString(): string {\n    if (this.group) {\n      return `${this.group}.${this.name}`;\n    }\n    return this.name;\n  }\n\n  /**\n   * Generates a serialized version of this metric.\n   *\n   * @returns {*}\n   * @memberof BaseMetric\n   */\n  public toJSON(): any {\n    return {\n      description: this.getDescription(),\n      group: this.getGroup(),\n      metadata: this.metadata,\n      name: this.getName(),\n      tags: this.tags,\n    };\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableSampling.html":{"url":"interfaces/SerializableSampling.html","title":"interface - SerializableSampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializableSampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/sampling.ts\n        \n\n            \n                Description\n            \n            \n                The serialized version of Sampling.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        snapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        snapshot\n                                    \n                                \n                                \n                                    \n                                        snapshot:         SerializedSnapshot\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializedSnapshot\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gets the serialized, sorted collection of samples.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SerializedSnapshot, SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Interface for all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n  /**\n   * Gets the snapshot of values.\n   *\n   * @returns {Snapshot}\n   * @memberof Sampling\n   */\n  getSnapshot(): Snapshot;\n\n}\n\n/**\n * The serialized version of {@link Sampling}.\n *\n * @export\n * @interface SerializableSampling\n */\nexport interface SerializableSampling {\n\n  /**\n   * Gets the serialized, sorted collection of samples.\n   *\n   * @returns {SerializedSnapshot}\n   * @memberof SerializableSampling\n   */\n  snapshot: SerializedSnapshot;\n\n}\n\n/**\n * Determines if the metric passed is a {@link SerializableSampling} or not.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {metric is SerializableSampling}\n */\nexport function isSerializableSampling(metric: Sampling | SerializableSampling): metric is SerializableSampling {\n  const anyMetric: any = metric as any;\n  if ((anyMetric.getSnapshot && typeof anyMetric.getSnapshot === \"function\")) {\n    return false;\n  }\n  return anyMetric.hasOwnProperty(\"snapshot\");\n}\n\n/**\n * Convenience method to get the snapshot of a {@link Sampling} or a {@link SerializableSampling}.\n *\n * @export\n * @param {(Sampling | SerializableSampling)} metric\n * @returns {Snapshot}\n */\nexport function getSnapshot(metric: Sampling | SerializableSampling): Snapshot {\n  if (isSerializableSampling(metric)) {\n    return new SimpleSnapshot(metric.snapshot.values);\n  } else {\n    return metric.getSnapshot();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializableSummarizing.html":{"url":"interfaces/SerializableSummarizing.html","title":"interface - SerializableSummarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializableSummarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                The serialized version of Summarizing.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        sum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sum\n                                    \n                                \n                                \n                                    \n                                        sum:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    int64 number in it's string representation.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n  /**\n   * Gets the sum of values.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Summarizing\n   */\n  getSum(): Int64Wrapper;\n\n}\n\n/**\n * The serialized version of {@link Summarizing}.\n *\n * @export\n * @interface SerializableSummarizing\n */\nexport interface SerializableSummarizing {\n\n  /**\n   * int64 number in it's string representation.\n   *\n   * @type {string}\n   * @memberof SerializableSummarizing\n   */\n  sum: string;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializedSnapshot.html":{"url":"interfaces/SerializedSnapshot.html","title":"interface - SerializedSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SerializedSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A serialized version of Snapshot.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A sorted array of samples.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleGauge.html":{"url":"classes/SimpleGauge.html","title":"class - SimpleGauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleGauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseMetric\n            \n\n            \n                Implements\n            \n            \n                            Gauge\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadataMap\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Protected\n                                tagMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                setValue\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                addTags\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                removeTags\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                setTags\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/gauge.ts:42\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleGauge with an optional name.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric name.\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric description.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:42\n                            \n                        \n\n                \n                    \n                        The value - initially set to 0.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:217\n\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id within an application instance.\nThis counter is only unique per process, forked processes start from 0.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:249\n\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:233\n\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:225\n\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadataMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:257\n\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:241\n\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tagMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseMetric:265\n\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:63\n                \n            \n\n\n            \n                \n                    Gets the current value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:74\n                \n            \n\n\n            \n                \n                    Sets the current value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/gauge.ts:85\n                \n            \n\n\n            \n                \n                    Same as BaseMetric, also adding value property.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:339\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDescription()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:303\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:312\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:279\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadataMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadataMap()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:275\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:294\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:325\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:321\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Map\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMetadata(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:283\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTag(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:344\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:349\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDescription(description: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:307\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroup(group: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:316\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(name: string, value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:289\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setName(name: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:298\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:329\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:334\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:367\n\n                \n            \n\n\n            \n                \n                    Generates a serialized version of this metric.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseMetric\n\n                \n            \n            \n                \n                        Defined in         BaseMetric:354\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { BaseMetric, Metric, SerializableMetric } from './model/metric'\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @extends {SerializableMetric}\n * @template T\n */\nexport interface Gauge extends Metric, SerializableMetric {\n\n  /**\n   * Gets the current value of the gauge.\n   *\n   * @returns {T}\n   * @memberof Gauge\n   */\n  getValue(): T\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n  /**\n   * The value - initially set to 0.\n   *\n   * @private\n   * @type {number}\n   * @memberof SimpleGauge\n   */\n  private value: number = 0;\n\n  /**\n   * Creates an instance of SimpleGauge with an optional name.\n   *\n   * @param {string} [name] optional metric name.\n   * @param {string} [description] optional metric description.\n   * @memberof SimpleGauge\n   */\n  public constructor (name?: string, description?: string) {\n    super()\n    this.name = name\n    this.description = description\n  }\n\n  /**\n   * Gets the current value.\n   *\n   * @returns {number}\n   * @memberof SimpleGauge\n   */\n  public getValue (): number {\n    return this.value\n  }\n\n  /**\n   * Sets the current value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof SimpleGauge\n   */\n  public setValue (value: number): this {\n    this.value = value\n    return this\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SimpleGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.value\n    return json\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Snapshot\n                            SerializedSnapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:150\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            values\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:150\n                            \n                        \n\n                \n                    \n                        Sorted collection of values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get75thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:169\n                \n            \n\n\n            \n                \n                    Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get95thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:179\n                \n            \n\n\n            \n                \n                    Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get98thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:189\n                \n            \n\n\n            \n                \n                    Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get999thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:199\n                \n            \n\n\n            \n                \n                    Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get99thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:209\n                \n            \n\n\n            \n                \n                    Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMax\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:229\n                \n            \n\n\n            \n                \n                    Gets the last value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:269\n                \n            \n\n\n            \n                \n                    Gets average value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMedian\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:219\n                \n            \n\n\n            \n                \n                    Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:239\n                \n            \n\n\n            \n                \n                    Gets the first value of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStdDev\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:285\n                \n            \n\n\n            \n                \n                    Gets the average deviation among the values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:319\n                \n            \n\n\n            \n                \n                    Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:249\n                \n            \n\n\n            \n                \n                    Gets the value array.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            size\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:259\n                \n            \n\n\n            \n                \n                    Gets the length of the value array.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor;\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            size\n                        \n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/size-gauge.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Gauge } from './gauge'\nimport { BaseMetric } from './model/metric'\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n  length(): number\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n  length: number\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n  size(): number\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n  size: number\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n  /**\n   * Checks if the specified collection is a {link LengthAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthAttributeInterface (collection: any): collection is LengthAttributeInterface {\n    return collection && typeof collection.length === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link LengthMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is LengthMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isLengthMethodInterface (collection: any): collection is LengthMethodInterface {\n    return collection && typeof collection.length === 'function'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeAttributeInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeAttributeInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeAttributeInterface (collection: any): collection is SizeAttributeInterface {\n    return collection && typeof collection.size === 'number'\n  }\n\n  /**\n   * Checks if the specified collection is a {link SizeMethodInterface}.\n   *\n   * @protected\n   * @static\n   * @param {*} collection\n   * @returns {collection is SizeMethodInterface}\n   * @memberof SizeGauge\n   */\n  protected static isSizeMethodInterface (collection: any): collection is SizeMethodInterface {\n    return collection && typeof collection.size === 'function'\n  }\n\n  /**\n   * Gets the actual value for the collection passed to the constructor.\n   *\n   * @private\n   * @type {ValueExtractor}\n   * @memberof SizeGauge\n   */\n  private readonly extractor: ValueExtractor;\n\n  /**\n   * Creates an instance of SizeGauge.\n   *\n   * @param {string} name The name of the metric\n   * @param collection The collection to get the size / length from.\n   * @param {string} [description] The description of the metric\n   * @memberof SizeGauge\n   */\n  public constructor (\n    name: string,\n    collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n    description?: string) {\n    super()\n    this.setName(name)\n    this.setDescription(description)\n\n    if (SizeGauge.isLengthAttributeInterface(collection)) {\n      this.extractor = () => collection.length\n    } else if (SizeGauge.isLengthMethodInterface(collection)) {\n      this.extractor = () => collection.length()\n    } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n      this.extractor = () => collection.size\n    } else if (SizeGauge.isSizeMethodInterface(collection)) {\n      this.extractor = () => collection.size()\n    } else {\n      this.extractor = () => -1\n    }\n  }\n\n  /**\n   * Reports the size / length of the collection.\n   *\n   * @returns {number} Returns the current size of the collection or -1.\n   * @memberof SizeGauge\n   */\n  public getValue (): number {\n    return this.extractor()\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding value property.\n   *\n   * @returns {*}\n   * @memberof SizeGauge\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    json.value = this.extractor()\n    return json\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:152\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:152\n                            \n                        \n\n                \n                    \n                        The current index in the value array.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:144\n                            \n                        \n\n                \n                    \n                        The capacity of the reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:136\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            size\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    size()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:170\n                \n            \n\n\n            \n                \n                    Gets the number of values, but at may the capacity of the reservoir.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            snapshot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    snapshot()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:198\n                \n            \n\n\n            \n                \n                    Creates a new snapshot using the values array.\n\n\n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(value: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/reservoir.ts:183\n                \n            \n\n\n            \n                \n                    Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n  /**\n   * Gets the capacity of this reservoir.\n   *\n   * @returns {number}\n   * @memberof Reservoir\n   */\n  size(): number;\n\n  /**\n   * Adds a value to the reservoir.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof Reservoir\n   */\n  update(value: number): this;\n\n  /**\n   * Creates a new snapshot of this reservoir.\n   *\n   * @returns {Snapshot}\n   * @memberof Reservoir\n   */\n  snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n  /**\n   * The values.\n   *\n   * @private\n   * @type {number[]}\n   * @memberof DefaultReservoir\n   */\n  private values: number[] = [];\n  /**\n   * The capacity of this reservoir.\n   *\n   * @private\n   * @type {number}\n   * @memberof DefaultReservoir\n   */\n  private maxSize: number;\n\n  /**\n   * Creates an instance of DefaultReservoir.\n   *\n   * @param {number} maxSize\n   * @memberof DefaultReservoir\n   */\n  public constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Gets the actual number of value, but at max the specified maximum.\n   *\n   * @returns {number}\n   * @memberof DefaultReservoir\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Adds the value to the array of numbers until the maximum number of\n   * values is reached. If the maximum number of values is reached\n   * an old value at a random position is replaced with the specified value.\n   *\n   * @param {number} value\n   * @returns {this}\n   * @memberof DefaultReservoir\n   */\n  public update(value: number): this {\n    if (this.values.length \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get75thPercentile\n                                \n                                \n                                    get95thPercentile\n                                \n                                \n                                    get98thPercentile\n                                \n                                \n                                    get999thPercentile\n                                \n                                \n                                    get99thPercentile\n                                \n                                \n                                    getMax\n                                \n                                \n                                    getMean\n                                \n                                \n                                    getMedian\n                                \n                                \n                                    getMin\n                                \n                                \n                                    getStdDev\n                                \n                                \n                                    getValue\n                                \n                                \n                                    getValues\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get75thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \nget75thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:17\n                \n            \n\n\n            \n                \n                    Gets the value of 75% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get95thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \nget95thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:25\n                \n            \n\n\n            \n                \n                    Gets the value of 95% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get98thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \nget98thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:33\n                \n            \n\n\n            \n                \n                    Gets the value of 98% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get999thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \nget999thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:41\n                \n            \n\n\n            \n                \n                    Gets the value of 99.9% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get99thPercentile\n                        \n                        \n                    \n                \n            \n            \n                \nget99thPercentile()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:49\n                \n            \n\n\n            \n                \n                    Gets the value of 99% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMax\n                        \n                        \n                    \n                \n            \n            \n                \ngetMax()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:65\n                \n            \n\n\n            \n                \n                    Gets the maximum value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMean\n                        \n                        \n                    \n                \n            \n            \n                \ngetMean()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:97\n                \n            \n\n\n            \n                \n                    Gets the average of all values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMedian\n                        \n                        \n                    \n                \n            \n            \n                \ngetMedian()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:57\n                \n            \n\n\n            \n                \n                    Gets the value of 50% boundary.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMin\n                        \n                        \n                    \n                \n            \n            \n                \ngetMin()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:73\n                \n            \n\n\n            \n                \n                    Gets the minimum value.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStdDev\n                        \n                        \n                    \n                \n            \n            \n                \ngetStdDev()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:105\n                \n            \n\n\n            \n                \n                    Gets the average deviation among the values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue(quantile: number)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:114\n                \n            \n\n\n            \n                \n                    Gets the value of boundary specified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quantile\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValues\n                        \n                        \n                    \n                \n            \n            \n                \ngetValues()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:81\n                \n            \n\n\n            \n                \n                    Gets all values.\n\n\n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            size\n                        \n                        \n                    \n                \n            \n            \n                \nsize()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/snapshot.ts:89\n                \n            \n\n\n            \n                \n                    Gets the number of values.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n  /**\n   * Gets the value of 75% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get75thPercentile(): number;\n\n  /**\n   * Gets the value of 95% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get95thPercentile(): number;\n\n  /**\n   * Gets the value of 98% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get98thPercentile(): number;\n\n  /**\n   * Gets the value of 99.9% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get999thPercentile(): number;\n\n  /**\n   * Gets the value of 99% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  get99thPercentile(): number;\n\n  /**\n   * Gets the value of 50% boundary.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMedian(): number;\n\n  /**\n   * Gets the maximum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMax(): number;\n\n  /**\n   * Gets the minimum value.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMin(): number;\n\n  /**\n   * Gets all values.\n   *\n   * @returns {number[]}\n   * @memberof Snapshot\n   */\n  getValues(): number[];\n\n  /**\n   * Gets the number of values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  size(): number;\n\n  /**\n   * Gets the average of all values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getMean(): number;\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getStdDev(): number;\n\n  /**\n   * Gets the value of boundary specified.\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof Snapshot\n   */\n  getValue(quantile: number): number;\n\n}\n\n/**\n * A serialized version of {@link Snapshot}.\n *\n * @export\n * @interface SerializedSnapshot\n */\nexport interface SerializedSnapshot {\n  /**\n   * A sorted array of samples.\n   *\n   * @type {number[]}\n   * @memberof SerializedSnapshot\n   */\n  values: number[];\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot, SerializedSnapshot {\n\n  /**\n   * Sorted collection of values.\n   *\n   * @public\n   * @type {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public values: number[] = [];\n\n  /**\n   * Creates an instance of SimpleSnapshot.\n   *\n   * @param {number[]} values\n   * @memberof SimpleSnapshot\n   */\n  public constructor(values: number[]) {\n    this.values = values.slice(0, values.length);\n    this.values = this.values.sort((a, b) => a - b);\n  }\n\n  /**\n   * Calls getValue(0.75) to get the value of the 75% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get75thPercentile(): number {\n    return this.getValue(0.75);\n  }\n\n  /**\n   * Calls getValue(0.95) to get the value of the 95% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get95thPercentile(): number {\n    return this.getValue(0.95);\n  }\n\n  /**\n   * Calls getValue(0.98) to get the value of the 98% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get98thPercentile(): number {\n    return this.getValue(0.98);\n  }\n\n  /**\n   * Calls getValue(0.999) to get the value of the 99.9% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get999thPercentile(): number {\n    return this.getValue(0.999);\n  }\n\n  /**\n   * Calls getValue(0.99) to get the value of the 99% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public get99thPercentile(): number {\n    return this.getValue(0.99);\n  }\n\n  /**\n   * Calls getValue(0.5) to get the value of the 50% boundary\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMedian(): number {\n    return this.getValue(0.5);\n  }\n\n  /**\n   * Gets the last value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMax(): number {\n    return this.values[this.values.length - 1];\n  }\n\n  /**\n   * Gets the first value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMin(): number {\n    return this.values[0];\n  }\n\n  /**\n   * Gets the value array.\n   *\n   * @returns {number[]}\n   * @memberof SimpleSnapshot\n   */\n  public getValues(): number[] {\n    return this.values;\n  }\n\n  /**\n   * Gets the length of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public size(): number {\n    return this.values.length;\n  }\n\n  /**\n   * Gets average value of the value array.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getMean(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.values.forEach((value) => sum += value);\n    return sum / this.values.length;\n  }\n\n  /**\n   * Gets the average deviation among the values.\n   *\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getStdDev(): number {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const mean = this.getMean();\n    let sum = 0;\n    this.values.forEach((value) => {\n      const diff = value - mean;\n      sum += diff * diff;\n    });\n\n    return Math.sqrt(sum / (this.values.length - 1));\n  }\n\n  /**\n   * Gets the value of the boundary specified.\n   *\n   * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n   *\n   * quantile | position / index | value\n   *\n   * 0.25 | 3 | 24.25\n   *\n   * 0.5 | 5 | 36\n   *\n   * 0.75 | 8 | 51,25\n   *\n   * 0.95 | 10 | NaN\n   *\n   * @param {number} quantile\n   * @returns {number}\n   * @memberof SimpleSnapshot\n   */\n  public getValue(quantile: number): number {\n    if (quantile  1.0 || isNaN(quantile)) {\n      return NaN;\n    }\n\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    const pos = quantile * (this.values.length + 1);\n    const index = Math.round(pos);\n\n    if (index = this.values.length) {\n      return this.getMax();\n    }\n\n    const lower = this.values[index - 1];\n    const upper = this.values[index];\n    return lower + (pos - Math.floor(pos)) * (upper - lower);\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpaceHistory.html":{"url":"classes/SpaceHistory.html","title":"class - SpaceHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpaceHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n        \n\n            \n                Description\n            \n            \n                A collection of SimpleGauge values for space metrics.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableSize\n                            \n                            \n                                    Public\n                                physicalSize\n                            \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                usedSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(spaceName: string, metrics: Metric[])\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of SpaceHistory.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spaceName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metrics\n                                                  \n                                                        \n                                                                        Metric[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:38\n                            \n                        \n\n                \n                    \n                        Available size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            physicalSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:45\n                            \n                        \n\n                \n                    \n                        Physical size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:24\n                            \n                        \n\n                \n                    \n                        Total size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            usedSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts:31\n                            \n                        \n\n                \n                    \n                        Used size.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  BaseMetric,\n  Metric,\n  MetricSet,\n  SimpleGauge\n} from 'inspector-metrics'\nimport * as v8 from 'v8'\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n  /**\n   * Total size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public size: SimpleGauge;\n  /**\n   * Used size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public usedSize: SimpleGauge;\n  /**\n   * Available size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public availableSize: SimpleGauge;\n  /**\n   * Physical size.\n   *\n   * @type {SimpleGauge}\n   * @memberof SpaceHistory\n   */\n  public physicalSize: SimpleGauge;\n\n  /**\n   * Creates an instance of SpaceHistory.\n   *\n   * @param {string} spaceName\n   * @param {Metric[]} metrics\n   * @memberof SpaceHistory\n   */\n  public constructor (spaceName: string, metrics: Metric[]) {\n    this.size = new SimpleGauge('spaceSize')\n    this.usedSize = new SimpleGauge('spaceUsedSize')\n    this.availableSize = new SimpleGauge('spaceAvailableSize')\n    this.physicalSize = new SimpleGauge('spacePhysicalSize')\n\n    this.size.setTag('space', spaceName)\n    this.usedSize.setTag('space', spaceName)\n    this.availableSize.setTag('space', spaceName)\n    this.physicalSize.setTag('space', spaceName)\n\n    metrics.push(this.size)\n    metrics.push(this.usedSize)\n    metrics.push(this.availableSize)\n    metrics.push(this.physicalSize)\n  }\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n  /**\n   * Contains all the metrics in this metric-set.\n   *\n   * @private\n   * @type {Metric[]}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly metrics: Metric[] = [];\n  /**\n   * Stores the size gauges for different specs.\n   *\n   * @private\n   * @type {Map}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly spaces: Map = new Map();\n  /**\n   * Total heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalHeapSize: SimpleGauge = new SimpleGauge('totalHeapSize');\n  /**\n   * Total available size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalAvailableSize: SimpleGauge = new SimpleGauge('totalAvailableSize');\n  /**\n   * Total physical size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalPhysicalSize: SimpleGauge = new SimpleGauge('totalPhysicalSize');\n  /**\n   * Total heap size for executable code.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly totalHeapSizeExecutable: SimpleGauge = new SimpleGauge('totalHeapSizeExecutable');\n  /**\n   * Used heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly usedHeapSize: SimpleGauge = new SimpleGauge('usedHeapSize');\n  /**\n   * Maximum heap size.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly heapSizeLimit: SimpleGauge = new SimpleGauge('heapSizeLimit');\n  /**\n   * Allocated memory.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly mallocedMemory: SimpleGauge = new SimpleGauge('mallocedMemory');\n  /**\n   * Maximum allocated memory.\n   *\n   * @private\n   * @type {SimpleGauge}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly peakMallocedMemory: SimpleGauge = new SimpleGauge('peakMallocedMemory');\n  /**\n   * The timer reference from the scheduler.\n   *\n   * @private\n   * @type {NodeJS.Timer}\n   * @memberof V8MemoryMetrics\n   */\n  private readonly intervalRef: NodeJS.Timer;\n\n  /**\n   * Creates an instance of V8MemoryMetrics.\n   *\n   * @param {string} name\n   * @param {number} [sampleRate=1000]\n   * @memberof V8MemoryMetrics\n   */\n  public constructor (name: string, sampleRate = 1000) {\n    super()\n    this.name = name\n\n    this.metrics.push(this.totalHeapSize)\n    this.metrics.push(this.totalPhysicalSize)\n    this.metrics.push(this.totalAvailableSize)\n    this.metrics.push(this.totalHeapSizeExecutable)\n    this.metrics.push(this.usedHeapSize)\n    this.metrics.push(this.heapSizeLimit)\n    this.metrics.push(this.mallocedMemory)\n    this.metrics.push(this.peakMallocedMemory)\n\n    this.spaces.set('new_space', new SpaceHistory('new_space', this.metrics))\n    this.spaces.set('old_space', new SpaceHistory('old_space', this.metrics))\n    this.spaces.set('code_space', new SpaceHistory('code_space', this.metrics))\n    this.spaces.set('map_space', new SpaceHistory('map_space', this.metrics))\n    this.spaces.set('large_object_space', new SpaceHistory('large_object_space', this.metrics))\n\n    this.intervalRef = global.setInterval(() => {\n      const heapSpaceStatistics = v8.getHeapSpaceStatistics()\n      const heapStatistics = v8.getHeapStatistics()\n\n      this.totalHeapSize.setValue(heapStatistics.total_heap_size)\n      this.totalPhysicalSize.setValue(heapStatistics.total_physical_size)\n      this.totalAvailableSize.setValue(heapStatistics.total_available_size)\n      this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable)\n      this.usedHeapSize.setValue(heapStatistics.used_heap_size)\n      this.heapSizeLimit.setValue(heapStatistics.heap_size_limit)\n      this.mallocedMemory.setValue(heapStatistics.heap_size_limit)\n      this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit)\n\n      heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n        if (this.spaces.has(heapSpaceStatistic.space_name)) {\n          const history = this.spaces.get(heapSpaceStatistic.space_name)\n          history.availableSize.setValue(heapSpaceStatistic.space_available_size)\n          history.physicalSize.setValue(heapSpaceStatistic.physical_space_size)\n          history.size.setValue(heapSpaceStatistic.space_size)\n          history.usedSize.setValue(heapSpaceStatistic.space_used_size)\n        }\n      })\n    }, sampleRate)\n  }\n\n  /**\n   * Stops the recording of memory metrics.\n   *\n   * @memberof V8MemoryMetrics\n   */\n  public stop (): void {\n    this.intervalRef.unref()\n  }\n\n  /**\n   * Gets all metrics.\n   *\n   * @returns {Map}\n   * @memberof V8MemoryMetrics\n   */\n  public getMetrics (): Map {\n    const map: Map = new Map()\n    this.metrics.forEach((metric) => map.set(metric.getName(), metric))\n    return map\n  }\n\n  /**\n   * Gets all metrics.\n   *\n   * @returns {Metric[]}\n   * @memberof V8MemoryMetrics\n   */\n  public getMetricList (): Metric[] {\n    return this.metrics\n  }\n\n  /**\n   * Sets the group of this metric-set as well as all contained metrics.\n   *\n   * @param {string} group\n   * @returns {this}\n   * @memberof V8MemoryMetrics\n   */\n  public setGroup (group: string): this {\n    this.group = group\n\n    this.totalHeapSize.setGroup(group)\n    this.totalAvailableSize.setGroup(group)\n    this.totalPhysicalSize.setGroup(group)\n    this.totalHeapSizeExecutable.setGroup(group)\n    this.usedHeapSize.setGroup(group)\n    this.heapSizeLimit.setGroup(group)\n    this.mallocedMemory.setGroup(group)\n    this.peakMallocedMemory.setGroup(group)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.setGroup(group)\n      history.physicalSize.setGroup(group)\n      history.size.setGroup(group)\n      history.usedSize.setGroup(group)\n    })\n\n    return this\n  }\n\n  /**\n   * Sets the tags of this metric-set all contained metrics accordingly.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof V8MemoryMetrics\n   */\n  public setTag (name: string, value: string): this {\n    this.tagMap.set(name, value)\n\n    this.totalHeapSize.setTag(name, value)\n    this.totalAvailableSize.setTag(name, value)\n    this.totalPhysicalSize.setTag(name, value)\n    this.totalHeapSizeExecutable.setTag(name, value)\n    this.usedHeapSize.setTag(name, value)\n    this.heapSizeLimit.setTag(name, value)\n    this.mallocedMemory.setTag(name, value)\n    this.peakMallocedMemory.setTag(name, value)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.setTag(name, value)\n      history.physicalSize.setTag(name, value)\n      history.size.setTag(name, value)\n      history.usedSize.setTag(name, value)\n    })\n\n    return this\n  }\n\n  /**\n   * Removes the specified tag from this metric-set and all contained metrics accordingly.\n   *\n   * @param {string} name\n   * @memberof V8MemoryMetrics\n   */\n  public removeTag (name: string): this {\n    this.tagMap.delete(name)\n\n    this.totalHeapSize.removeTag(name)\n    this.totalAvailableSize.removeTag(name)\n    this.totalPhysicalSize.removeTag(name)\n    this.totalHeapSizeExecutable.removeTag(name)\n    this.usedHeapSize.removeTag(name)\n    this.heapSizeLimit.removeTag(name)\n    this.mallocedMemory.removeTag(name)\n    this.peakMallocedMemory.removeTag(name)\n\n    this.spaces.forEach((history) => {\n      history.availableSize.removeTag(name)\n      history.physicalSize.removeTag(name)\n      history.size.removeTag(name)\n      history.usedSize.removeTag(name)\n    })\n\n    return this\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                        Clock\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            time\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    time()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/clock.ts:65\n                \n            \n\n\n            \n                \n                    Returns a Time object who's nanoseconds component is always zero.\n\n\n                    \n                    \n                    \n                        Returns :         Time\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            time\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    time()\n                \n            \n\n\n            \n                \n                    Inherited from         Clock\n\n                \n            \n            \n                \n                        Defined in         Clock:48\n\n                \n            \n\n\n            \n                \n                    Gets the current point in time according to the logic of the clock implementation.\n\n\n                    \n                    \n                    \n                        Returns :         Time\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time(): Time;\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/timer.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                    Readonly\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/timer.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                        Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                        Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            clock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Clock\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:30\n                            \n                        \n\n                \n                    \n                        Used to determine a duration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            startTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Time\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:46\n                            \n                        \n\n                \n                    \n                        Gets set when the start function is invoked using the clock.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:38\n                            \n                        \n\n                \n                    \n                        The timer the duration is reported to.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:66\n                \n            \n\n\n            \n                \n                    Sets the startTime variable.\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/timer.ts:78\n                \n            \n\n\n            \n                \n                    Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                    \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Clock, diff, Time } from './clock'\nimport { Histogram } from './histogram'\nimport { Meter } from './meter'\nimport { BucketCounting, Buckets, BucketToCountMap, SerializableBucketCounting } from './model/counting'\nimport { Int64Wrapper } from './model/int64'\nimport { Metered, MeteredRates, SerializableMetered } from './model/metered'\nimport { BaseMetric } from './model/metric'\nimport { Reservoir } from './model/reservoir'\nimport { Sampling, SerializableSampling } from './model/sampling'\nimport { SerializedSnapshot, Snapshot } from './model/snapshot'\nimport { SerializableSummarizing, Summarizing } from './model/summarizing'\nimport { NANOSECOND, TimeUnit } from './model/time-unit'\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n  /**\n   * Used to determine a duration.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof StopWatch\n   */\n  private readonly clock: Clock;\n  /**\n   * The timer the duration is reported to.\n   *\n   * @private\n   * @type {Timer}\n   * @memberof StopWatch\n   */\n  private readonly timer: Timer;\n  /**\n   * Gets set when the start function is invoked using the clock.\n   *\n   * @private\n   * @type {Time}\n   * @memberof StopWatch\n   */\n  private startTime: Time;\n\n  /**\n   * Creates an instance of StopWatch.\n   *\n   * @param {Clock} clock\n   * @param {Timer} timer\n   * @memberof StopWatch\n   */\n  public constructor (clock: Clock, timer: Timer) {\n    this.clock = clock\n    this.timer = timer\n  }\n\n  /**\n   * Sets the startTime variable.\n   *\n   * @returns {this}\n   * @memberof StopWatch\n   */\n  public start (): this {\n    this.startTime = this.clock.time()\n    return this\n  }\n\n  /**\n   * Adds the duration between the last invocation of the start function\n   * and this invocation to the timer in nanoseconds.\n   *\n   * @returns {this}\n   * @memberof StopWatch\n   */\n  public stop (): this {\n    this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND)\n    return this\n  }\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements\n    BucketCounting, Metered, Sampling, Summarizing,\n    SerializableSummarizing, SerializableBucketCounting,\n    SerializableSampling, SerializableMetered {\n  /**\n   * Used to determine a duration.\n   *\n   * @private\n   * @type {Clock}\n   * @memberof Timer\n   */\n  private readonly clock: Clock;\n  /**\n   * Metric to measure the event rate.\n   *\n   * @private\n   * @type {Meter}\n   * @memberof Timer\n   */\n  private readonly meter: Meter;\n  /**\n   * Metric to measure the duration of events.\n   *\n   * @private\n   * @type {Histogram}\n   * @memberof Timer\n   */\n  private readonly histogram: Histogram;\n\n  /**\n   * Creates an instance of Timer.\n   *\n   * @param {Clock} clock\n   * @param {Reservoir} reservoir\n   * @param {string} [name]\n   * @param {string} [description]\n   * @param {string} [buckets=new Buckets()]\n   * @memberof Timer\n   */\n  public constructor (\n    clock: Clock,\n    reservoir: Reservoir,\n    name?: string,\n    description?: string,\n    buckets: Buckets = new Buckets()) {\n    super()\n    this.clock = clock\n    this.name = name\n    this.description = description\n    this.meter = new Meter(clock, 1, name)\n    this.histogram = new Histogram(reservoir, name, description, buckets)\n  }\n\n  /**\n   * Gets the bucket boundaries from the internal {@link Histogram}.\n   *\n   * @returns {number[]}\n   * @memberof Timer\n   */\n  public get buckets (): number[] {\n    return this.histogram.buckets\n  }\n\n  /**\n   * Gets the {@link BucketToCountMap} from the internal {@link Histogram}.\n   *\n   * @returns {BucketToCountMap}\n   * @memberof Timer\n   */\n  public get counts (): BucketToCountMap {\n    return this.histogram.counts\n  }\n\n  /**\n   * Gets the 64bit number as string from the internal {@link Histogram}.\n   *\n   * @readonly\n   * @type {string}\n   * @memberof Timer\n   */\n  public get sum (): string {\n    return this.histogram.sum\n  }\n\n  /**\n   * Gets the {@link SerializedSnapshot} from the internal histogram.\n   *\n   * @readonly\n   * @type {SerializedSnapshot}\n   * @memberof Timer\n   */\n  public get snapshot (): SerializedSnapshot {\n    return this.histogram.snapshot\n  }\n\n  /**\n   * Gets the count of event reported.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof Timer\n   */\n  public get count (): number {\n    return this.getCount()\n  }\n\n  /**\n   * Getter method for mean-rate\n   *\n   * @readonly\n   * @type {number}\n   * @memberof Timer\n   */\n  public get meanRate (): number {\n    return this.getMeanRate()\n  }\n\n  /**\n   * Getter method for rates 'snapshot'\n   *\n   * @readonly\n   * @type {MeteredRates}\n   * @memberof Timer\n   */\n  public get rates (): MeteredRates {\n    return {\n      15: this.get15MinuteRate(),\n      5: this.get5MinuteRate(),\n      1: this.get1MinuteRate()\n    }\n  }\n\n  /**\n   * Adds a duration manually.\n   *\n   * @param {number} duration\n   * @param {TimeUnit} unit\n   * @returns {this}\n   * @memberof Timer\n   */\n  public addDuration (duration: number, unit: TimeUnit): this {\n    if (duration >= 0) {\n      this.histogram.update(unit.convertTo(duration, NANOSECOND))\n      this.meter.mark(1)\n    }\n    return this\n  }\n\n  /**\n   * Gets a snapshot from the embedded {@link Histogram}.\n   *\n   * @returns {Snapshot}\n   * @memberof Timer\n   */\n  public getSnapshot (): Snapshot {\n    return this.histogram.getSnapshot()\n  }\n\n  /**\n   * Gets the count from the embedded {@link Histogram}.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public getCount (): number {\n    return this.histogram.getCount()\n  }\n\n  /**\n   * Gets the sum from the embedded {@link Histogram}.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Timer\n   */\n  public getSum (): Int64Wrapper {\n    return this.histogram.getSum()\n  }\n\n  /**\n   * Gets the average rate per second of last 15 minutes.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get15MinuteRate (): number {\n    return this.meter.get15MinuteRate()\n  }\n\n  /**\n   * Gets the average rate per second of last 5 minutes.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get5MinuteRate (): number {\n    return this.meter.get5MinuteRate()\n  }\n\n  /**\n   * Gets the average rate per second of last minute.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public get1MinuteRate (): number {\n    return this.meter.get1MinuteRate()\n  }\n\n  /**\n   * Gets the mean rate from the embedded {@link Meter}.\n   *\n   * @returns {number}\n   * @memberof Timer\n   */\n  public getMeanRate (): number {\n    return this.meter.getMeanRate()\n  }\n\n  /**\n   * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.\n   *\n   * @returns {Buckets}\n   * @memberof Timer\n   */\n  public getBuckets (): Buckets {\n    return this.histogram.getBuckets()\n  }\n\n  /**\n   * Gets the bucket counts from the internal {@link Histogram}.\n   *\n   * @returns {Map}\n   * @memberof Timer\n   */\n  public getCounts (): Map {\n    return this.histogram.getCounts()\n  }\n\n  /**\n   * Measures the duration of the passed function's invocation\n   * synchronously and adds it to the pool.\n   *\n   * @template T\n   * @returns {T}\n   * @memberof Timer\n   */\n  public time (f: () => T): T {\n    const startTime: Time = this.clock.time()\n    try {\n      return f()\n    } finally {\n      this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n    }\n  }\n\n  /**\n   * Measures the duration of the passed function's invocation\n   * asynchronously and adds it to the pool.\n   *\n   * @template T\n   * @returns {T}\n   * @memberof Timer\n   */\n  public async timeAsync (f: () => Promise): Promise {\n    const startTime: Time = this.clock.time()\n    return await f()\n      .then((res) => {\n        this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n        return res\n      })\n      .catch((err) => {\n        this.addDuration(diff(startTime, this.clock.time()), NANOSECOND)\n        throw err\n      })\n  }\n\n  /**\n   * Builds a new StopWatch.\n   *\n   * @returns {StopWatch}\n   * @memberof Timer\n   */\n  public newStopWatch (): StopWatch {\n    return new StopWatch(this.clock, this)\n  }\n\n  /**\n   * Same as {@link BaseMetric#toJSON()}, also adding the values of the internal histogram property.\n   *\n   * @returns {*}\n   * @memberof Timer\n   */\n  public toJSON (): any {\n    const json = super.toJSON()\n    const histogramJson = this.histogram.toJSON()\n    const meterJson = this.meter.toJSON()\n    return {\n      ...meterJson,\n      ...histogramJson,\n      ...json\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSum\n                        \n                        \n                    \n                \n            \n            \n                \ngetSum()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/summarizing.ts:19\n                \n            \n\n\n            \n                \n                    Gets the sum of values.\n\n\n                    \n                    \n                    \n                        Returns :         Int64Wrapper\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n  /**\n   * Gets the sum of values.\n   *\n   * @returns {Int64Wrapper}\n   * @memberof Summarizing\n   */\n  getSum(): Int64Wrapper;\n\n}\n\n/**\n * The serialized version of {@link Summarizing}.\n *\n * @export\n * @interface SerializableSummarizing\n */\nexport interface SerializableSummarizing {\n\n  /**\n   * int64 number in it's string representation.\n   *\n   * @type {string}\n   * @memberof SerializableSummarizing\n   */\n  sum: string;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/taggable.ts\n        \n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addTags\n                                \n                                \n                                    getTag\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeTag\n                                \n                                \n                                    removeTags\n                                \n                                \n                                    setTag\n                                \n                                \n                                    setTags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTags\n                        \n                        \n                    \n                \n            \n            \n                \naddTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:61\n                \n            \n\n\n            \n                \n                    Adds the specified tags to metric's tags.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTag\n                        \n                        \n                    \n                \n            \n            \n                \ngetTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:33\n                \n            \n\n\n            \n                \n                    Gets the specified tag or {@code null}.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \ngetTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:24\n                \n            \n\n\n            \n                \n                    Gets all tags.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeTag\n                        \n                        \n                    \n                \n            \n            \n                \nremoveTag(name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:70\n                \n            \n\n\n            \n                \n                    Removes the specified tag.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeTags\n                        \n                        \n                    \n                \n            \n            \n                \nremoveTags(...names: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:79\n                \n            \n\n\n            \n                \n                    Removes the specified tag names.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTag\n                        \n                        \n                    \n                \n            \n            \n                \nsetTag(name: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:43\n                \n            \n\n\n            \n                \n                    Sets the specified tag.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTags\n                        \n                        \n                    \n                \n            \n            \n                \nsetTags(tags: Map)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:52\n                \n            \n\n\n            \n                \n                    Sets tags set.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n                                    \n                                            Map\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n  [key: string]: string;\n}\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n  /**\n   * Gets all tags.\n   *\n   * @returns {Map}\n   * @memberof Taggable\n   */\n  getTags(): Map;\n\n  /**\n   * Gets the specified tag or {@code null}.\n   *\n   * @param {string} name\n   * @returns {string}\n   * @memberof Taggable\n   */\n  getTag(name: string): string;\n\n  /**\n   * Sets the specified tag.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTag(name: string, value: string): this;\n\n  /**\n   * Sets tags set.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Adds the specified tags to metric's tags.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  addTags(tags: Map): this;\n\n  /**\n   * Removes the specified tag.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTag(name: string): this;\n\n  /**\n   * Removes the specified tag names.\n   *\n   * @param {string[]} names\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTags(...names: string[]): this;\n\n}\n\n/**\n * Transforms the {@link Tags} object into a {@link Map} object.\n *\n * @export\n * @param {Tags} tags\n * @returns {Map}\n */\nexport function tagsToMap(tags: Tags): Map {\n  const tagMap: Map = new Map();\n  if (tags) {\n    Object.keys(tags).forEach((key) => tagMap.set(key, tags[key]));\n  }\n  return tagMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Tags} object.\n *\n * @export\n * @param {Map} tagMap\n * @returns {Tags}\n */\nexport function mapToTags(tagMap: Map): Tags {\n  const tags: Tags = {};\n  if (tagMap) {\n    tagMap.forEach((tag, name) => tags[name] = tag);\n  }\n  return tags;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tags.html":{"url":"interfaces/Tags.html","title":"interface - Tags","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tags\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/taggable.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for handling tags.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/taggable.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Helper interface for handling tags.\n */\nexport interface Tags {\n  [key: string]: string;\n}\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n  /**\n   * Gets all tags.\n   *\n   * @returns {Map}\n   * @memberof Taggable\n   */\n  getTags(): Map;\n\n  /**\n   * Gets the specified tag or {@code null}.\n   *\n   * @param {string} name\n   * @returns {string}\n   * @memberof Taggable\n   */\n  getTag(name: string): string;\n\n  /**\n   * Sets the specified tag.\n   *\n   * @param {string} name\n   * @param {string} value\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTag(name: string, value: string): this;\n\n  /**\n   * Sets tags set.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Adds the specified tags to metric's tags.\n   *\n   * @param {Map} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  addTags(tags: Map): this;\n\n  /**\n   * Removes the specified tag.\n   *\n   * @param {string} name\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTag(name: string): this;\n\n  /**\n   * Removes the specified tag names.\n   *\n   * @param {string[]} names\n   * @returns {this}\n   * @memberof Taggable\n   */\n  removeTags(...names: string[]): this;\n\n}\n\n/**\n * Transforms the {@link Tags} object into a {@link Map} object.\n *\n * @export\n * @param {Tags} tags\n * @returns {Map}\n */\nexport function tagsToMap(tags: Tags): Map {\n  const tagMap: Map = new Map();\n  if (tags) {\n    Object.keys(tags).forEach((key) => tagMap.set(key, tags[key]));\n  }\n  return tagMap;\n}\n\n/**\n * Transforms the {@link Map} object into a {@link Tags} object.\n *\n * @export\n * @param {Map} tagMap\n * @returns {Tags}\n */\nexport function mapToTags(tagMap: Map): Tags {\n  const tags: Tags = {};\n  if (tagMap) {\n    tagMap.forEach((tag, name) => tags[name] = tag);\n  }\n  return tags;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagsOnlyMetricRegistry.html":{"url":"classes/TagsOnlyMetricRegistry.html","title":"class - TagsOnlyMetricRegistry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagsOnlyMetricRegistry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Pseudo-MetricRegistry used to provide an interface for registry tags.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(tags: Tags)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:123\n                            \n                        \n\n                \n                    \n                            Creates an instance of TagsOnlyMetricRegistry.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                                        Tags\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:123\n                            \n                        \n\n                \n                    \n                        private tags map.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTags\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts:141\n                \n            \n\n\n            \n                \n                    Gets the tags map.\n\n\n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as cluster from \"cluster\";\nimport { Counter, MonotoneCounter } from \"../counter\";\nimport { Event } from \"../event\";\nimport { Gauge } from \"../gauge\";\nimport { Histogram } from \"../histogram\";\nimport { Meter } from \"../meter\";\nimport { MetricRegistry } from \"../metric-registry\";\nimport { getMetricTags, Metric } from \"../model/metric\";\nimport { Taggable, Tags, tagsToMap } from \"../model/taggable\";\nimport { MILLISECOND, MINUTE } from \"../model/time-unit\";\nimport { Timer } from \"../timer\";\nimport { InterprocessMessage, InterprocessReportMessage } from \"./interprocess-message\";\nimport { MetricEntry } from \"./metric-entry\";\nimport { MetricReporterOptions } from \"./metric-reporter-options\";\nimport { MetricSetReportContext } from \"./metric-set-report-context\";\nimport { MetricType } from \"./metric-type\";\nimport { OverallReportContext } from \"./overall-report-context\";\nimport { ReportingResult } from \"./reporting-result\";\n\n/**\n * Interface for metric-reporter.\n *\n * @export\n * @interface IMetricReporter\n */\nexport interface IMetricReporter {\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof IMetricReporter\n   */\n  getTags(): Map;\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  setTags(tags: Map): this;\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  addMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof IMetricReporter\n   */\n  removeMetricRegistry(metricRegistry: MetricRegistry): this;\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  reportEvent>(event: TEvent): Promise;\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof IMetricReporter\n   */\n  flushEvents(): Promise;\n}\n\n/**\n * Pseudo-{@link MetricRegistry} used to provide an interface for registry tags.\n *\n * @class TagsOnlyMetricRegistry\n */\nclass TagsOnlyMetricRegistry {\n\n  /**\n   * private tags map.\n   *\n   * @private\n   * @type {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  private tags: Map;\n\n  /**\n   * Creates an instance of TagsOnlyMetricRegistry.\n   *\n   * @param {Tags} tags\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public constructor(tags: Tags) {\n      this.tags = tagsToMap(tags);\n  }\n\n  /**\n   * Gets the tags map.\n   *\n   * @returns {Map}\n   * @memberof TagsOnlyMetricRegistry\n   */\n  public getTags(): Map {\n      return this.tags;\n  }\n\n}\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter implements IMetricReporter {\n\n  /**\n   * Constant for the \"type\" variable of process-level message identifying report-messages\n   * from reporter of forked processes.\n   *\n   * @static\n   * @memberof MetricReporter\n   */\n  public static readonly MESSAGE_TYPE = \"inspector-metrics:metric-reporter:report\";\n\n  /**\n   * {@link MetricRegistry} instances.\n   *\n   * @protected\n   * @readonly\n   * @type {MetricRegistry[]}\n   * @memberof MetricReporter\n   */\n  protected readonly metricRegistries: MetricRegistry[] = [];\n  /**\n   * options for this reporter instance.\n   *\n   * @protected\n   * @readonly\n   * @type {O}\n   * @memberof MetricReporter\n   */\n  protected readonly options: O;\n  /**\n   * Keeps track of the reporting states for each metric.\n   *\n   * @protected\n   * @readonly\n   * @type {Map}\n   * @memberof MetricReporter\n   */\n  protected readonly metricStates: Map = new Map();\n  /**\n   * The type of the reporter implementation - for internal use.\n   *\n   * @protected\n   * @readonly\n   * @type {string}\n   * @memberof MetricReporter\n   */\n  protected readonly reporterType: string;\n\n  /**\n   * Creates an instance of MetricReporter.\n   *\n   * @param {O} options\n   * @param {string} [reporterType] the type of the reporter implementation - for internal use\n   * @memberof MetricReporter\n   */\n  public constructor(options: O, reporterType?: string) {\n      this.options = options;\n      this.reporterType = reporterType || this.constructor.name;\n      const clusterOptions = this.options.clusterOptions;\n      if (clusterOptions &&\n          clusterOptions.enabled &&\n          !clusterOptions.sendMetricsToMaster) {\n          clusterOptions.eventReceiver.on(\"message\", (worker, message, handle) =>\n              this.handleReportMessage(worker, message, handle));\n      }\n  }\n\n  /**\n   * Gets the reporter tags.\n   *\n   * @returns {Map}\n   * @memberof MetricReporter\n   */\n  public getTags(): Map {\n      return this.options.tags;\n  }\n\n  /**\n   * Sets the reporter tags.\n   *\n   * @param {Map} tags\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public setTags(tags: Map): this {\n      this.options.tags = tags;\n      return this;\n  }\n\n  /**\n   * Implementations start reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract start(): Promise;\n\n  /**\n   * Implementations stop reporting metrics when called.\n   *\n   * @abstract\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public abstract stop(): Promise;\n\n  /**\n   * Adds a new {@link MetricRegistry} to be reported.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public addMetricRegistry(metricRegistry: MetricRegistry): this {\n      this.metricRegistries.push(metricRegistry);\n      return this;\n  }\n\n  /**\n   * Removes the given {@link MetricRegistry} if it was previously added.\n   *\n   * @param {MetricRegistry} metricRegistry\n   * @returns {this}\n   * @memberof MetricReporter\n   */\n  public removeMetricRegistry(metricRegistry: MetricRegistry): this {\n      const index: number = this.metricRegistries.indexOf(metricRegistry);\n      if (index > -1) {\n          this.metricRegistries.splice(index, 1);\n      }\n      return this;\n  }\n\n  /**\n   * Reports an {@link Event}.\n   *\n   * Implementations can choose how to process ad-hoc events, wether it's\n   * queuing the events to the next call to report or sending events\n   * immediately.\n   *\n   * Also the usual reporting process of calling {@link #beforeReport}, do the reporting\n   * and call {@link #afterReport} may not be applied for ad-hoc events.\n   *\n   * This implementation does nothing and always resolved the specified event.\n   *\n   * @param {TEvent} event\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async reportEvent>(event: TEvent): Promise {\n      return event;\n  }\n\n  /**\n   * Sends events remaining in the queue (if a queue is used in the implementation).\n   *\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  public async flushEvents(): Promise {\n  }\n\n  /**\n   * Checks if the specified message can be handle by this metric-reporter and is of the desired type.\n   *\n   * @protected\n   * @param {InterprocessMessage} message\n   * @param {string} [targetType=MetricReporter.MESSAGE_TYPE]\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected canHandleMessage(\n      message: InterprocessMessage,\n      targetType: string = MetricReporter.MESSAGE_TYPE): boolean {\n      return message &&\n          message.type && message.type === targetType &&\n          message.targetReporterType && message.targetReporterType === this.reporterType;\n  }\n\n  /**\n   * Handles messages from forked processes.\n   *\n   * @protected\n   * @param {cluster.Worker} worker\n   * @param {*} message\n   * @param {*} handle\n   * @memberof MetricReporter\n   */\n  protected async handleReportMessage(worker: cluster.Worker, message: any, handle: any) {\n      if (this.canHandleMessage(message)) {\n          const report: InterprocessReportMessage = message;\n          const reg: MetricRegistry = (new TagsOnlyMetricRegistry(report.tags) as any) as MetricRegistry;\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.monotoneCounters);\n          await this.handleResults(report.ctx, reg, report.date, \"counter\", report.metrics.counters);\n          await this.handleResults(report.ctx, reg, report.date, \"gauge\", report.metrics.gauges);\n          await this.handleResults(report.ctx, reg, report.date, \"histogram\", report.metrics.histograms);\n          await this.handleResults(report.ctx, reg, report.date, \"meter\", report.metrics.meters);\n          await this.handleResults(report.ctx, reg, report.date, \"timer\", report.metrics.timers);\n      }\n  }\n\n  /**\n   * Called before each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async beforeReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Called after each reporting run.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async afterReport(ctx: OverallReportContext) {\n  }\n\n  /**\n   * Run the reporting procedures. Calls {@link #beforeReport} before each\n   * {@link MetricRegistry}'s metrics are reported and {@link #afterReport}\n   * afterwards.\n   *\n   * @protected\n   * @memberof MetricReporter\n   */\n  protected async report(): Promise {\n      if (this.metricRegistries && this.metricRegistries.length > 0) {\n          const ctx = this.createOverallReportContext();\n          await this.beforeReport(ctx);\n          for (const registry of this.metricRegistries) {\n              await this.reportMetricRegistry(ctx, registry);\n          }\n          await this.afterReport(ctx);\n          return ctx;\n      }\n      return {};\n  }\n\n  /**\n   * Reporting function for a single {@link MetricRegistry}.\n   * Calls {@link #createReportingContext} for each metric type.\n   * Afterwards calls {@link #reportMetrics} for each of the\n   * registry's metrics - grouped by type.\n   * And finally calls {@link #handleResults} for each of the results.\n   *\n   * @protected\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @memberof MetricReporter\n   */\n  protected async reportMetricRegistry(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null) {\n\n      const date: Date = new Date(this.options.clock.time().milliseconds);\n      const counterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"counter\");\n      const gaugeCtx: MetricSetReportContext> = this\n          .createMetricSetReportContext(ctx, registry, date, \"gauge\");\n      const histogramCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"histogram\");\n      const meterCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"meter\");\n      const timerCtx: MetricSetReportContext = this\n          .createMetricSetReportContext(ctx, registry, date, \"timer\");\n\n      counterCtx.metrics = registry.getMonotoneCounterList();\n      const monotoneCounterResults = this.reportMetrics(ctx, counterCtx,\n          (counter: MonotoneCounter) => this.reportCounter(counter, counterCtx),\n          (counter: MonotoneCounter) => counter.getCount());\n\n      counterCtx.metrics = registry.getCounterList();\n      const counterResults = this.reportMetrics(ctx, counterCtx as MetricSetReportContext,\n          (counter: Counter) => this.reportCounter(counter, counterCtx),\n          (counter: Counter) => counter.getCount());\n\n      gaugeCtx.metrics = registry.getGaugeList();\n      const gaugeResults = this.reportMetrics(ctx, gaugeCtx,\n          (gauge: Gauge) => this.reportGauge(gauge, gaugeCtx),\n          (gauge: Gauge) => gauge.getValue());\n\n      histogramCtx.metrics = registry.getHistogramList();\n      const histogramResults = this.reportMetrics(ctx, histogramCtx,\n          (histogram: Histogram) => this.reportHistogram(histogram, histogramCtx),\n          (histogram: Histogram) => histogram.getCount());\n\n      meterCtx.metrics = registry.getMeterList();\n      const meterResults = this.reportMetrics(ctx, meterCtx,\n          (meter: Meter) => this.reportMeter(meter, meterCtx),\n          (meter: Meter) => meter.getCount());\n\n      timerCtx.metrics = registry.getTimerList();\n      const timerResults = this.reportMetrics(ctx, timerCtx,\n          (timer: Timer) => this.reportTimer(timer, timerCtx),\n          (timer: Timer) => timer.getCount());\n\n      if (this.sendMetricsToMaster()) {\n          const message: InterprocessReportMessage = {\n              ctx,\n              date,\n              metrics: {\n                  counters: counterResults,\n                  gauges: gaugeResults,\n                  histograms: histogramResults,\n                  meters: meterResults,\n                  monotoneCounters: monotoneCounterResults,\n                  timers: timerResults,\n              },\n              tags: this.buildTags(registry, null),\n              targetReporterType: this.reporterType,\n              type: MetricReporter.MESSAGE_TYPE,\n          };\n          this.options.clusterOptions.sendToMaster(message);\n      } else {\n          await this.handleResults(ctx, registry, date, \"counter\", monotoneCounterResults);\n          await this.handleResults(ctx, registry, date, \"counter\", counterResults);\n          await this.handleResults(ctx, registry, date, \"gauge\", gaugeResults);\n          await this.handleResults(ctx, registry, date, \"histogram\", histogramResults);\n          await this.handleResults(ctx, registry, date, \"meter\", meterResults);\n          await this.handleResults(ctx, registry, date, \"timer\", timerResults);\n      }\n  }\n\n  /**\n   * Called in {@link #reportMetricRegistry} to determine to send a reporting-message to the master process.\n   *\n   * @protected\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected sendMetricsToMaster(): boolean {\n      return  this.options.clusterOptions &&\n              this.options.clusterOptions.enabled &&\n              this.options.clusterOptions.sendMetricsToMaster;\n  }\n\n  /**\n   * Creates an OverallReportContext.\n   *\n   * @protected\n   * @returns {OverallReportContext}\n   * @memberof MetricReporter\n   */\n  protected createOverallReportContext(): OverallReportContext {\n      return {\n      };\n  }\n\n  /**\n   * Creates a MetricSetReportContext with the specified arguments.\n   *\n   * @protected\n   * @param {OverallReportContext} overallCtx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @returns {MetricSetReportContext}\n   * @memberof MetricReporter\n   */\n  protected createMetricSetReportContext(\n      overallCtx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType): MetricSetReportContext {\n      return {\n          date,\n          metrics: [],\n          overallCtx,\n          registry,\n          type,\n      };\n  }\n\n  /**\n   * Filters out each metric that does not necessarily need to be reported\n   * and calls the specified reporting function for the remaining.\n   *\n   * @protected\n   * @template M type of the metric\n   * @template C typed ReportingContext\n   * @param {C} ctx\n   * @param {(metric: M, ctx: C) => T} reportFunction\n   * @param {(metric: M, ctx: C) => number} lastModifiedFunction\n   * @returns {Array>}\n   * @memberof MetricReporter\n   */\n  protected reportMetrics>(\n      overallCtx: OverallReportContext,\n      ctx: C,\n      reportFunction: (metric: M, ctx: C) => T,\n      lastModifiedFunction: (metric: M, ctx: C) => number): Array> {\n\n      return ctx.metrics\n          .filter((metric) => {\n              const metricId = (metric as any).id;\n              return !metricId || this.hasChanged(metricId, lastModifiedFunction(metric, ctx), ctx.date.getTime());\n          })\n          .map((metric) => ({\n              metric,\n              result: reportFunction(metric, ctx),\n          }))\n          .filter((result) => !!result.result);\n  }\n\n  /**\n   * Handles the reporting result for a group of metric instances.\n   *\n   * @protected\n   * @abstract\n   * @param {OverallReportContext} ctx\n   * @param {MetricRegistry | null} registry\n   * @param {Date} date\n   * @param {MetricType} type\n   * @param {Array>} results\n   * @returns {Promise}\n   * @memberof MetricReporter\n   */\n  protected abstract handleResults(\n      ctx: OverallReportContext,\n      registry: MetricRegistry | null,\n      date: Date,\n      type: MetricType,\n      results: Array>): Promise;\n\n  /**\n   * Does the reporting for a counter or monotone counter.\n   *\n   * @protected\n   * @abstract\n   * @param {(MonotoneCounter | Counter)} counter\n   * @param {(MetricSetReportContext)} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportCounter(\n      counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a gauge.\n   *\n   * @protected\n   * @abstract\n   * @param {Gauge} gauge\n   * @param {MetricSetReportContext>} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): T;\n\n  /**\n   * Does the reporting for a histogram.\n   *\n   * @protected\n   * @abstract\n   * @param {Histogram} histogram\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a meter.\n   *\n   * @protected\n   * @abstract\n   * @param {Meter} meter\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportMeter(meter: Meter, ctx: MetricSetReportContext): T;\n\n  /**\n   * Does the reporting for a timer.\n   *\n   * @protected\n   * @abstract\n   * @param {Timer} timer\n   * @param {MetricSetReportContext} ctx\n   * @returns {T}\n   * @memberof MetricReporter\n   */\n  protected abstract reportTimer(timer: Timer, ctx: MetricSetReportContext): T;\n\n  /**\n   * Determines if a metric instance has changed it's value since the last check.\n   * This is always true if the minimal-reporting timeout was reached.\n   *\n   * @private\n   * @param {number} metricId\n   * @param {number} lastValue\n   * @param {number} date\n   * @returns {boolean}\n   * @memberof MetricReporter\n   */\n  protected hasChanged(metricId: number, lastValue: number, date: number): boolean {\n      let changed = true;\n      let metricEntry = {\n          lastReport: 0,\n          lastValue,\n      };\n      if (this.metricStates.has(metricId)) {\n          metricEntry = this.metricStates.get(metricId);\n          changed = metricEntry.lastValue !== lastValue;\n          if (!changed) {\n              const minReportingTimeout = MINUTE.convertTo(this.options.minReportingTimeout, MILLISECOND);\n              changed = metricEntry.lastReport + minReportingTimeout  tags[key] = tag);\n      }\n      if (registry && registry.getTags()) {\n          registry.getTags().forEach((tag, key) => tags[key] = tag);\n      }\n      if (taggable) {\n          const customTags = getMetricTags(taggable);\n          Object.keys(customTags).forEach((key) => tags[key] = customTags[key]);\n      }\n      return tags;\n  }\n\n  /**\n   * Checks the number and gives it back or zero (0) if it's not a number.\n   *\n   * @protected\n   * @param {number} value\n   * @returns {number}\n   * @memberof MetricReporter\n   */\n  protected getNumber(value: number): number {\n      if (isNaN(value)) {\n          return 0;\n      }\n      return value;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        milliseconds\n                                \n                                \n                                        nanoseconds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                    \n                                \n                                \n                                    \n                                        milliseconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                    \n                                \n                                \n                                    \n                                        nanoseconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import 'source-map-support/register'\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n  milliseconds: number\n  nanoseconds: number\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time is older than the second point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff (one: Time, two: Time): number {\n  if (!one || !two) {\n    return 0\n  }\n  const oneValue: number = one.nanoseconds + one.milliseconds * 1000000\n  const twoValue: number = two.nanoseconds + two.milliseconds * 1000000\n  return twoValue - oneValue\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n  /**\n   * Gets the current point in time according to the logic of the clock implementation.\n   *\n   * @abstract\n   * @returns {Time}\n   * @memberof Clock\n   */\n  public abstract time(): Time;\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n  /**\n   * Returns a Time object who's nanoseconds component is always zero.\n   *\n   * @returns {Time}\n   * @memberof StdClock\n   */\n  public time (): Time {\n    const time = {\n      milliseconds: Date.now(),\n      nanoseconds: 0\n    }\n    return time\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/inspector-metrics/lib/metrics/model/time-unit.ts\n        \n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            nanosecondsPerUnit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                        The nanoseconds for one unit of this time unit.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convertTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convertTo(value: number, unit: TimeUnit)\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:53\n                \n            \n\n\n            \n                \n                    Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unit\n                                    \n                                                TimeUnit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNanosecondsPerUnit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNanosecondsPerUnit()\n                \n            \n\n\n            \n                \n                    Defined in packages/inspector-metrics/lib/metrics/model/time-unit.ts:36\n                \n            \n\n\n            \n                \n                    Gets the nanoseconds in one unit of this time unit.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n  /**\n   * The nanoseconds for one unit of this time unit.\n   *\n   * @private\n   * @type {number}\n   * @memberof TimeUnit\n   */\n  private nanosecondsPerUnit: number;\n\n  /**\n   * Creates an instance of TimeUnit.\n   *\n   * @param {number} nanosecondsPerUnit\n   * @memberof TimeUnit\n   */\n  public constructor(nanosecondsPerUnit: number) {\n    this.nanosecondsPerUnit = nanosecondsPerUnit;\n  }\n\n  /**\n   * Gets the nanoseconds in one unit of this time unit.\n   *\n   * @returns {number}\n   * @memberof TimeUnit\n   */\n  public getNanosecondsPerUnit(): number {\n    return this.nanosecondsPerUnit;\n  }\n\n  /**\n   * Converts the given value to the time unit specified.\n   *\n   * E.g.:\n   *\n   * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n   * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n   *\n   * @param {number} value\n   * @param {TimeUnit} unit\n   * @returns {number}\n   * @memberof TimeUnit\n   */\n  public convertTo(value: number, unit: TimeUnit): number {\n    return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n  }\n\n}\n\n/**\n * One nanosecond.\n */\nexport const NANOSECOND = new TimeUnit(1);\n/**\n * One microsecond in nanoseconds.\n */\nexport const MICROSECOND = new TimeUnit(1000);\n/**\n * One millisecond in nanoseconds.\n */\nexport const MILLISECOND = new TimeUnit(1000000);\n/**\n * One second in nanoseconds.\n */\nexport const SECOND = new TimeUnit(1000000000);\n/**\n * One minute in nanoseconds.\n */\nexport const MINUTE = new TimeUnit(60000000000);\n/**\n * One hour in nanoseconds.\n */\nexport const HOUR = new TimeUnit(3600000000000);\n/**\n * One day in nanoseconds.\n */\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            class\n            CarbonMetricReporter\n            \n                100 %\n                (52/52)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonMetricReporterOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n            \n            variable\n            graphite\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            class\n            CsvMetricReporter\n            \n                100 %\n                (58/58)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            CsvFileWriter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            CsvMetricReporterOptions\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            interface\n            Fields\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            class\n            DefaultCsvFileWriter\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            interface\n            DefaultCsvFileWriterOptions\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n            \n            class\n            ElasticsearchMetricReporter\n            \n                100 %\n                (60/60)\n            \n        \n        \n            \n                \n                packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n            \n            interface\n            ElasticsearchMetricReporterOption\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/DefaultSender.ts\n            \n            class\n            DefaultSender\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            class\n            InfluxMetricReporter\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            InfluxMetricReporterOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-influx/lib/metrics/InfluxMetricReporter.ts\n            \n            interface\n            Sender\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            class\n            Clock\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            class\n            StdClock\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            interface\n            Time\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/clock.ts\n            \n            function\n            diff\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/counter.ts\n            \n            class\n            Counter\n            \n                40 %\n                (25/61)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/counter.ts\n            \n            class\n            MonotoneCounter\n            \n                45 %\n                (15/33)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/event.ts\n            \n            class\n            Event\n            \n                50 %\n                (18/36)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            class\n            SimpleGauge\n            \n                43 %\n                (14/32)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            interface\n            Gauge\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            class\n            HdrHistogram\n            \n                60 %\n                (27/45)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            class\n            HdrSnapshot\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            variable\n            NativeHistogram\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/histogram.ts\n            \n            class\n            Histogram\n            \n                55 %\n                (22/40)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/meter.ts\n            \n            class\n            Meter\n            \n                64 %\n                (32/50)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            interface\n            MetricRegistryListener\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistry\n            \n                61 %\n                (56/91)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            class\n            MetricRegistryListenerRegistration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/metric-set.ts\n            \n            interface\n            MetricSet\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            class\n            Buckets\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            BucketCounting\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            BucketToCountMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            Counting\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            interface\n            SerializableBucketCounting\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            getMetricBuckets\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            getMetricCounts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            function\n            isSerializableBucketCounting\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/groupable.ts\n            \n            interface\n            Groupable\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            class\n            Int64Wrapper\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            variable\n            Int64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            interface\n            Metadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            interface\n            MetadataContainer\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            function\n            mapToMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            function\n            metadataToMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            Metered\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            MeteredRates\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metered.ts\n            \n            interface\n            SerializableMetered\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            class\n            BaseMetric\n            \n                33 %\n                (9/27)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            interface\n            Metric\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            interface\n            SerializableMetric\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricDescription\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricGroup\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            getMetricTags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            function\n            isSerializableMetric\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            class\n            ExponentiallyWeightedMovingAverage\n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            interface\n            MovingAverage\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            class\n            DefaultReservoir\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            class\n            SlidingWindowReservoir\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            interface\n            Reservoir\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            interface\n            Sampling\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            interface\n            SerializableSampling\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            function\n            getSnapshot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            function\n            isSerializableSampling\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            class\n            SimpleSnapshot\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            interface\n            SerializedSnapshot\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            interface\n            Snapshot\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/summarizing.ts\n            \n            interface\n            SerializableSummarizing\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/summarizing.ts\n            \n            interface\n            Summarizing\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            interface\n            Taggable\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            interface\n            Tags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            function\n            mapToTags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            function\n            tagsToMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            class\n            TimeUnit\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            DAY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            HOUR\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MICROSECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MILLISECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            MINUTE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            NANOSECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            variable\n            SECOND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n            \n            interface\n            InterprocessMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/interprocess-message.ts\n            \n            interface\n            InterprocessReportMessage\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            class\n            LoggerReporter\n            \n                100 %\n                (48/48)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LoggerReporterOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LoggerReportingContext\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            interface\n            LogLine\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/logger.ts\n            \n            interface\n            Logger\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-entry.ts\n            \n            interface\n            MetricEntry\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            class\n            DefaultClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            class\n            DisabledClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            interface\n            ClusterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            interface\n            MetricReporterOptions\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            class\n            MetricReporter\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            class\n            TagsOnlyMetricRegistry\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            interface\n            IMetricReporter\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/metric-set-report-context.ts\n            \n            interface\n            MetricSetReportContext\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/overall-report-context.ts\n            \n            interface\n            OverallReportContext\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/report-message-receiver.ts\n            \n            interface\n            ReportMessageReceiver\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/reporting-result.ts\n            \n            interface\n            ReportingResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            class\n            ScheduledMetricReporter\n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            interface\n            ScheduledMetricReporterOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            class\n            SizeGauge\n            \n                48 %\n                (17/35)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            LengthAttributeInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            LengthMethodInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            SizeAttributeInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            interface\n            SizeMethodInterface\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/timer.ts\n            \n            class\n            StopWatch\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-metrics/lib/metrics/timer.ts\n            \n            class\n            Timer\n            \n                60 %\n                (27/45)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n            \n            class\n            DefaultPrometheusClusterOptions\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/InterprocessReportRequest.ts\n            \n            interface\n            InterprocessReportRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/InterprocessReportResponse.ts\n            \n            interface\n            InterprocessReportResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/Percentiles.ts\n            \n            class\n            Percentiles\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusClusterOptions.ts\n            \n            interface\n            PrometheusClusterOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            class\n            PrometheusMetricReporter\n            \n                91 %\n                (68/74)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            interface\n            PrometheusFields\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            interface\n            PrometheusMetricResult\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PrometheusReporterOptions.ts\n            \n            interface\n            PrometheusReporterOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            class\n            PushgatewayMetricReporter\n            \n                100 %\n                (47/47)\n            \n        \n        \n            \n                \n                packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            interface\n            PushgatewayReporterOptions\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8EventLoop.ts\n            \n            class\n            V8EventLoop\n            \n                52 %\n                (20/38)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            class\n            V8GCMetrics\n            \n                56 %\n                (23/41)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            variable\n            GC\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            class\n            SpaceHistory\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            class\n            V8MemoryMetrics\n            \n                60 %\n                (27/45)\n            \n        \n        \n            \n                \n                packages/inspector-vm/lib/metrics/V8ProcessMetrics.ts\n            \n            class\n            V8ProcessMetrics\n            \n                52 %\n                (24/46)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExportMode   (packages/.../CsvMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        ExportMode\n                    \n                \n                    \n                        \n                            Tags and metadata can be exported in one row or in separate rows.\n\n                        \n                    \n                        \n                            \n                                 ALL_IN_ONE_COLUMN\n                            \n                        \n                        \n                            \n                                 EACH_IN_OWN_COLUMN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (packages/.../clock.ts)\n                        \n                        \n                            getMetricBuckets   (packages/.../counting.ts)\n                        \n                        \n                            getMetricCounts   (packages/.../counting.ts)\n                        \n                        \n                            getMetricDescription   (packages/.../metric.ts)\n                        \n                        \n                            getMetricGroup   (packages/.../metric.ts)\n                        \n                        \n                            getMetricMetadata   (packages/.../metric.ts)\n                        \n                        \n                            getMetricName   (packages/.../metric.ts)\n                        \n                        \n                            getMetricTags   (packages/.../metric.ts)\n                        \n                        \n                            getSnapshot   (packages/.../sampling.ts)\n                        \n                        \n                            isSerializableBucketCounting   (packages/.../counting.ts)\n                        \n                        \n                            isSerializableMetric   (packages/.../metric.ts)\n                        \n                        \n                            isSerializableSampling   (packages/.../sampling.ts)\n                        \n                        \n                            mapToMetadata   (packages/.../metadata-container.ts)\n                        \n                        \n                            mapToTags   (packages/.../taggable.ts)\n                        \n                        \n                            metadataToMap   (packages/.../metadata-container.ts)\n                        \n                        \n                            tagsToMap   (packages/.../taggable.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-metrics/lib/metrics/clock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            diff\n                        \n                        \n                    \n                \n            \n            \n                \ndiff(one, two)\n                \n            \n\n\n\n\n            \n                \n                    Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time is older than the second point in time.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    one\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        time sample\n\n                                    \n                                \n                                \n                                    two\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        time sample\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a duration in nanoseconds\n\n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/counting.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getMetricBuckets\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricBuckets(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the Buckets of a\nBucketCounting or a SerializableBucketCounting.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Buckets\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricCounts\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricCounts(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the counts of a\nBucketCounting or a SerializableBucketCounting.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BucketToCountMap\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSerializableBucketCounting\n                        \n                        \n                    \n                \n            \n            \n                \nisSerializableBucketCounting(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableBucketCounting or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableBucketCounting\n\n                    \n                    \n                        is SerializableBucketCounting}\n\n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/metric.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getMetricDescription\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricDescription(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the description of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricGroup\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricGroup(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the group of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricMetadata(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the metadata of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metadata\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricName\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricName(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the name of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetricTags\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetricTags(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method the get the tags of a Metric or a SerializableMetric.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Tags\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSerializableMetric\n                        \n                        \n                    \n                \n            \n            \n                \nisSerializableMetric(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableMetric or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableMetric\n\n                    \n                    \n                        is SerializableMetric}\n\n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/sampling.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getSnapshot\n                        \n                        \n                    \n                \n            \n            \n                \ngetSnapshot(metric)\n                \n            \n\n\n\n\n            \n                \n                    Convenience method to get the snapshot of a Sampling or a SerializableSampling.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Snapshot\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSerializableSampling\n                        \n                        \n                    \n                \n            \n            \n                \nisSerializableSampling(metric)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the metric passed is a SerializableSampling or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metric\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SerializableSampling\n\n                    \n                    \n                        is SerializableSampling}\n\n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            mapToMetadata\n                        \n                        \n                    \n                \n            \n            \n                \nmapToMetadata(metadataMap)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the any> object into a Metadata object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadataMap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metadata\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            metadataToMap\n                        \n                        \n                    \n                \n            \n            \n                \nmetadataToMap(metadata)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Metadata object into a any> object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/model/taggable.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            mapToTags\n                        \n                        \n                    \n                \n            \n            \n                \nmapToTags(tagMap)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the string> object into a Tags object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tagMap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Tags\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tagsToMap\n                        \n                        \n                    \n                \n            \n            \n                \ntagsToMap(tags)\n                \n            \n\n\n\n\n            \n                \n                    Transforms the Tags object into a string> object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tags\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Map\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n\n\nThis is the mono repository for the inspector-metrics modules.inspector-metrics modules are a collection of modules around application metrics and monitoring for nodejs.  \nTake a look at the Documentation.\nFeatures\n\nmetric model independent from time-series DB\nmultiple reporter modules\nmulti process support (nodejs cluster)\nbusiness friendly license (MIT License)\n\nModules\n\n\n\nModule\nDescription\nLink\n\n\n\n\n\ninspector-metrics\nAPI / interface module\n\n  \n\n\nReporter\n\n\n\n\n\ninspector-carbon\nreporter for graphite / carbon\ngraphite\n  \n\n\ninspector-csv\nreporter for CSV files\n\n  \n\n\ninspector-elasticsearch\nreporter for elasticsearch\nelasticsearch\n  \n\n\ninspector-influx\nreporter for influxdb\ninfluxdb\n  \n\n\ninspector-prometheus\nreporter for prometheus / pushgateway\nprometheus\n  \n\n\nMetric Collectors\n\n\n\n\n\ninspector-vm\nmetric collection for nodejs VM\n\n  \n\n\n\n3rd party modules\n\n\n\nModule\nDescription\nLink\n\n\n\n\n\ninspector-amqp\nreporter for AMQP\namqp-ts\n  \n\n\ninspector-nats\nreporter for NATS\nnode-nats\n  \n\n\n\nExamples\nCode examples for javascript and typescript are in the examples folder.\ndevelopment\nlocal setup / prerequisites\nYou should have nodejs, docker and docker-compose installed.\nboot test environment:./test-env/boot.sh\nshutdown test environment:./test-env/reset.sh\nexecute compatibility tests:docker-compose run --rm nodeXX = nodejs version (available: 8, 9, 10, 11, 12, 13)\ninit / update project (if a new dependency is introduced or an existing is updated):  \nnpm i\nnpm run bootstrapgenerate dependency report:  \n# run 'npm run build' before checking dependencies\ndocker-compose run --rm depsrelease packages / publish docs:  \n# check functionality\nnpm i\nnpm run bootstrap\nnpm run build\n\n# publish docs\nrm -fr docs/\ngit branch -D gh-pages\ngit worktree prune\ngit worktree list\ngit worktree add -b gh-pages docs origin/gh-pages\nnpm run publishDocs\n\n# publish package (using lerna)\nnpm publishLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    45 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    61 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnType   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Filter   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            MetricDocumentBuilder   (packages/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricInfoDeterminator   (packages/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricType   (packages/.../metric-type.ts)\n                        \n                        \n                            NameFactory   (packages/.../metric-registry.ts)\n                        \n                        \n                            PrometheusMetricType   (packages/.../PrometheusMetricReporter.ts)\n                        \n                        \n                            Row   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Rows   (packages/.../CsvMetricReporter.ts)\n                        \n                        \n                            Scheduler   (packages/.../scheduled-reporter.ts)\n                        \n                        \n                            ValueExtractor   (packages/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    ColumnType\n                \n            \n            \n                \n                    Lists all possible column types.\n\n                \n            \n            \n                \n                        \"date\" | \"name\" | \"field\" | \"group\" | \"description\" | \"value\" | \"tags\" | \"type\" | \"metadata\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                    Type for a tag or metadata filter.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Row\n                \n            \n            \n                \n                    Shortcut type for a row.\n\n                \n            \n            \n                \n                        string[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Rows\n                \n            \n            \n                \n                    Shortcut type for many rows.\n\n                \n            \n            \n                \n                            Row[]\n\n                \n            \n        \n    \n    packages/inspector-elasticsearch/lib/metrics/ElasticsearchMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    MetricDocumentBuilder\n                \n            \n            \n                \n                    Interface for building a document for a metric.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MetricInfoDeterminator\n                \n            \n            \n                \n                    Interface for getting a certain information using the specified metric metadata -\ne.g. name of the index, metric type, etc.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/reporter/metric-type.ts\n    \n    \n        \n            \n                \n                    \n                    MetricType\n                \n            \n            \n                \n                    Enumeration of all metric types.\n\n                \n            \n            \n                \n                        \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/metric-registry.ts\n    \n    \n        \n            \n                \n                    \n                    NameFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n    \n    \n        \n            \n                \n                    \n                    PrometheusMetricType\n                \n            \n            \n                \n                    Enumeration used to determine valid metric types of prometheus.\n\n                \n            \n            \n                \n                        \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\"\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n    \n    \n        \n            \n                \n                    \n                    Scheduler\n                \n            \n            \n                \n                    Scheduler function type definition.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    packages/inspector-metrics/lib/metrics/size-gauge.ts\n    \n    \n        \n            \n                \n                    \n                    ValueExtractor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-csv/lib/metrics/CsvMetricReporter.ts\n            \n            \n                97 %\n                (153/157)\n            \n            \n                75 %\n                (76/102)\n            \n            \n                89 %\n                (40/45)\n            \n            \n                99 %\n                (148/150)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-csv/lib/metrics/DefaultCsvFileWriter.ts\n            \n            \n                10 %\n                (6/58)\n            \n            \n                0 %\n                (0/25)\n            \n            \n                0 %\n                (0/19)\n            \n            \n                11 %\n                (6/55)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (23/23)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/event.ts\n            \n            \n                16 %\n                (3/19)\n            \n            \n                0 %\n                (0/1)\n            \n            \n                0 %\n                (0/7)\n            \n            \n                16 %\n                (3/19)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (13/13)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            \n                93 %\n                (43/46)\n            \n            \n                69 %\n                (11/16)\n            \n            \n                90 %\n                (18/20)\n            \n            \n                93 %\n                (43/46)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                86 %\n                (37/43)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                75 %\n                (9/12)\n            \n            \n                86 %\n                (37/43)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                98 %\n                (55/56)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                92 %\n                (12/13)\n            \n            \n                98 %\n                (55/56)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                92 %\n                (163/178)\n            \n            \n                88 %\n                (82/93)\n            \n            \n                84 %\n                (72/86)\n            \n            \n                91 %\n                (159/174)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                75 %\n                (21/28)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                75 %\n                (9/12)\n            \n            \n                78 %\n                (18/23)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                84 %\n                (47/56)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                70 %\n                (19/27)\n            \n            \n                84 %\n                (47/56)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/counting.ts\n            \n            \n                38 %\n                (18/47)\n            \n            \n                11 %\n                (2/19)\n            \n            \n                43 %\n                (3/7)\n            \n            \n                36 %\n                (16/44)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/int64.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/metadata-container.ts\n            \n            \n                62 %\n                (8/13)\n            \n            \n                25 %\n                (1/4)\n            \n            \n                50 %\n                (2/4)\n            \n            \n                64 %\n                (7/11)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/metric.ts\n            \n            \n                43 %\n                (30/69)\n            \n            \n                0 %\n                (0/22)\n            \n            \n                40 %\n                (12/30)\n            \n            \n                45 %\n                (30/67)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/moving-average.ts\n            \n            \n                93 %\n                (27/29)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                67 %\n                (4/6)\n            \n            \n                93 %\n                (27/29)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/reservoir.ts\n            \n            \n                91 %\n                (20/22)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                75 %\n                (6/8)\n            \n            \n                91 %\n                (20/22)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/sampling.ts\n            \n            \n                36 %\n                (4/11)\n            \n            \n                0 %\n                (0/6)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                36 %\n                (4/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                    /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/taggable.ts\n            \n            \n                62 %\n                (8/13)\n            \n            \n                25 %\n                (1/4)\n            \n            \n                50 %\n                (2/4)\n            \n            \n                64 %\n                (7/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/model/time-unit.ts\n            \n            \n                92 %\n                (11/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                67 %\n                (2/3)\n            \n            \n                92 %\n                (11/12)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/logger-reporter.ts\n            \n            \n                11 %\n                (6/57)\n            \n            \n                0 %\n                (0/20)\n            \n            \n                0 %\n                (0/11)\n            \n            \n                11 %\n                (6/57)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-reporter-options.ts\n            \n            \n                22 %\n                (4/18)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                0 %\n                (0/4)\n            \n            \n                25 %\n                (4/16)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/metric-reporter.ts\n            \n            \n                5 %\n                (6/119)\n            \n            \n                0 %\n                (0/44)\n            \n            \n                0 %\n                (0/41)\n            \n            \n                5 %\n                (6/116)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-metrics/lib/metrics/reporter/scheduled-reporter.ts\n            \n            \n                31 %\n                (4/13)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                36 %\n                (4/11)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/DefaultPrometheusClusterOptions.ts\n            \n            \n                63 %\n                (12/19)\n            \n            \n                33 %\n                (2/6)\n            \n            \n                33 %\n                (2/6)\n            \n            \n                67 %\n                (12/18)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/Percentiles.ts\n            \n            \n                82 %\n                (9/11)\n            \n            \n                40 %\n                (2/5)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                92 %\n                (158/171)\n            \n            \n                84 %\n                (88/105)\n            \n            \n                86 %\n                (42/49)\n            \n            \n                92 %\n                (154/167)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                95 %\n                (18/19)\n            \n            \n                50 %\n                (7/14)\n            \n            \n                50 %\n                (6/12)\n            \n            \n                95 %\n                (18/19)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            \n                81 %\n                (52/64)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                89 %\n                (8/9)\n            \n            \n                81 %\n                (51/63)\n            \n        \n        \n            \n                \n                        /root/inspector-metrics/packages/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            \n                85 %\n                (94/111)\n            \n            \n                33 %\n                (1/3)\n            \n            \n                86 %\n                (12/14)\n            \n            \n                85 %\n                (93/110)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (packages/.../time-unit.ts)\n                        \n                        \n                            GC   (packages/.../V8GCMetrics.ts)\n                        \n                        \n                            graphite   (packages/.../CarbonMetricReporter.ts)\n                        \n                        \n                            HOUR   (packages/.../time-unit.ts)\n                        \n                        \n                            Int64   (packages/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (packages/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (packages/.../time-unit.ts)\n                        \n                        \n                            NativeHistogram   (packages/.../hdr-histogram.ts)\n                        \n                        \n                            SECOND   (packages/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/inspector-metrics/lib/metrics/model/time-unit.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DAY\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(86400000000000)\n                        \n                    \n\n                \n                    \n                        One day in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HOUR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(3600000000000)\n                        \n                    \n\n                \n                    \n                        One hour in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MICROSECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000)\n                        \n                    \n\n                \n                    \n                        One microsecond in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MILLISECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : new TimeUnit(1000000)\n                        \n                    \n\n                \n                    \n                        One millisecond in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MINUTE\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(60000000000)\n                        \n                    \n\n                \n                    \n                        One minute in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NANOSECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1)\n                        \n                    \n\n                \n                    \n                        One nanosecond.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECOND\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000000)\n                        \n                    \n\n                \n                    \n                        One second in nanoseconds.\n\n                    \n                \n\n            \n        \n\n    packages/inspector-vm/lib/metrics/V8GCMetrics.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GC\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('gc-stats')\n                        \n                    \n\n                \n                    \n                        Event emitter for GC event within nodejs.\n\n                    \n                \n\n            \n        \n\n    packages/inspector-carbon/lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('graphite')\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n    packages/inspector-metrics/lib/metrics/model/int64.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Int64\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require(\"node-cint64\").Int64\n                        \n                    \n\n                \n                    \n                        native Int64 lib.\n\n                    \n                \n\n            \n        \n\n    packages/inspector-metrics/lib/metrics/hdr-histogram.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NativeHistogram\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n\n                \n                    \n                        The 'native-hdr-histogram' module (optional).\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-metrics.html":{"url":"additional-documentation/inspector-metrics.html","title":"additional-page - inspector-metrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called, number of bookings in a sales system\")\nMonotoneCounter - a monotonically increasing integer value (e.g. \"error count\")\nEvent - ad-hoc event to report events (e.g. \"application start / deployment\", \"batch import started / ended\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHdrHistogram - recording and analyzing sampled data value counts across a configurable integer value range with configurable value precision\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThere are libraries which collect some metrics:\n\nnode VM - collects memory & garbage collection metric for node VM\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nAMQP\nCarbon / Graphite\nCSV\nElasticsearch\nInflux\nNATS\nPrometheus / Pushgateway\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n});\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();MonotoneCounter\nimport { MonotoneCounter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst errorCount: MonotoneCounter = registry.newMonotoneCounter(\"errorCount\");\n\n// +1\nerrorCount.increment(1);\n\n// causes error\nerrorCount.increment(-1);\n\n// =1\nerrorCount.getCount();\n\nerrorCount.reset();Event\nimport { BaseMetric, Event, MetricRegistry } from \"inspector-metrics\";\n\n// common application tags - applied to each metric / event\nconst tags: Map = new Map();\ntags.set(\"application\", \"project-name\");\ntags.set(\"hostname\", \"127.0.0.4\");\n\n// the reporter prints the stats\nconst reporter = new LoggerReporter({\n    log: global.console,\n    tags,\n});\n\n// not connected to a MetricRegistry like the other metrics\nconst event = new Event(\"application_started\", \"signals an application start\")\n    .setValue(\"started\")\n    .setTag(\"mode\", \"test\")\n    .setTag(\"component\", \"main\");\n\n// directly send to time-series DB\nawait reporter.reportEvent(event);Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency\nconst requestLatency: Histogram = registry.newHistogram(\"requestLatency\");\n\nrequestLatency.update(12345);\nrequestLatency.update(23456);\nrequestLatency.update(34567);\n\n// a copy of the current values\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();HdrHistogram\nimport { HdrHistogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency between 1 and 1000000000 nanoseconds\nconst requestLatency: HdrHistogram = registry.newHdrHistogram(\"requestLatency\", 1, 1000000000);\n\n// 102 microseconds in nanoseconds\nrequestLatency.update(102000);\n// 4.390 milliseconds in nanoseconds\nrequestLatency.update(4390000);\n\n// only snapshot interface - always uses the current values\n// since the native-hdr-histogram is used as a reference\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-carbon.html":{"url":"additional-documentation/inspector-carbon.html","title":"additional-page - inspector-carbon","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.  \nIt uses node-graphite as graphite/carbon client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");reporting events\nimport { Event, MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to graphite\nreporter.reportEvent(event);multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The CarbonMetricReporter is listening for those messagesand reports the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    host: \"http://graphite-server/\",\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-csv.html":{"url":"additional-documentation/inspector-csv.html","title":"additional-page - inspector-csv","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-csv\nTypescript metric reporter for CSV files.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan exported into CSV files.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-csv\nbasic usage\nexample.ts\nimport {\n    CsvMetricReporter,\n    DefaultCsvFileWriter,\n} from \"inspector-csv\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// metric registry is used in the application code to measure durations, error codes, etc...\nconst registry: MetricRegistry = new MetricRegistry();\n\n// some timers for this example\nconst requests1: Timer = registry.newTimer(\"requests1\");\nconst requests2: Timer = registry.newTimer(\"requests2\");\nconst requests3: Timer = registry.newTimer(\"requests3\");\n\nrequests1.setGroup(\"requests\");\nrequests2.setGroup(\"requests\");\n\nrequests1.setTag(\"host\", \"127.0.0.1\");\nrequests2.setTag(\"host\", \"127.0.0.2\");\nrequests3.setTag(\"host\", \"127.0.0.3\");\n\n// default csv file writer\nconst writer = new DefaultCsvFileWriter({});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\"],\n    writer,\n});\n\n// register registry in the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();\n\n// simulate a running application which produces some custom measures\nsetInterval(() => requests1.time(() => { ... }), 100);\nsetInterval(() => requests2.time(() => { ... }), 50);\nsetInterval(() => requests3.time(() => { ... }), 25);201810201900_metrics.csv (example output file)\ndate,group,name,field,value\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.005\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.01\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.025\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.05\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.1\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.25\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_0.5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_1\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_2.5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_5\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_10\",0\n20181020191953.380+00:00,\"requests\",\"requests1\",\"bucket_inf\",10\n20181020191953.380+00:00,\"requests\",\"requests1\",\"count\",10\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m15_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m1_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"m5_rate\",9\n20181020191953.380+00:00,\"requests\",\"requests1\",\"max\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"mean\",1399961.6\n20181020191953.380+00:00,\"requests\",\"requests1\",\"mean_rate\",6.622515994912551\n20181020191953.380+00:00,\"requests\",\"requests1\",\"min\",999936\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p50\",999936\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p75\",2000128\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p95\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p98\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p99\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"p999\",2999808\n20181020191953.380+00:00,\"requests\",\"requests1\",\"stddev\",699209.9735144262\n20181020191953.380+00:00,\"requests\",\"requests1\",\"sum\",13999616\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_1\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_5\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_10\",5\n20181020191953.380+00:00,\"requests\",\"requests2\",\"bucket_inf\",20\n20181020191953.380+00:00,\"requests\",\"requests2\",\"count\",20\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m15_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m1_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"m5_rate\",19\n20181020191953.380+00:00,\"requests\",\"requests2\",\"max\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"mean\",850022.4\n20181020191953.380+00:00,\"requests\",\"requests2\",\"mean_rate\",13.227513227513228\n20181020191953.380+00:00,\"requests\",\"requests2\",\"min\",0\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p50\",999936\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p75\",1000192\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p95\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p98\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p99\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"p999\",2000128\n20181020191953.380+00:00,\"requests\",\"requests2\",\"stddev\",587171.928872124\n20181020191953.380+00:00,\"requests\",\"requests2\",\"sum\",17000448\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.005\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.01\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.025\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.05\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.1\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.25\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_0.5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_1\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_2.5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_5\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_10\",14\n20181020191953.380+00:00,\"\",\"requests3\",\"bucket_inf\",40\n20181020191953.380+00:00,\"\",\"requests3\",\"count\",40\n20181020191953.380+00:00,\"\",\"requests3\",\"m15_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"m1_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"m5_rate\",38\n20181020191953.380+00:00,\"\",\"requests3\",\"max\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"mean\",700012.8\n20181020191953.380+00:00,\"\",\"requests3\",\"mean_rate\",26.455026455026456\n20181020191953.380+00:00,\"\",\"requests3\",\"min\",0\n20181020191953.380+00:00,\"\",\"requests3\",\"p50\",999936\n20181020191953.380+00:00,\"\",\"requests3\",\"p75\",1000192\n20181020191953.380+00:00,\"\",\"requests3\",\"p95\",2000115.2\n20181020191953.380+00:00,\"\",\"requests3\",\"p98\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"p99\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"p999\",2000128\n20181020191953.380+00:00,\"\",\"requests3\",\"stddev\",563876.4091414141\n20181020191953.380+00:00,\"\",\"requests3\",\"sum\",28000512CSV reporter options\n\nwriter\nThe writer used to store the rows.\n\n\nreportInterval\nReporting interval in TimeUnit\ndefault value 1000\n\n\nunit\nTimeUnit of the reporting interval\ndefault value MILLISECOND\n\n\nscheduler\nfunction used to schedule reporting tasks\ndefault value setInterval\n\n\nclock\nClock used to determine the date for the reporting as well as the minimum-reporting timeout feature\ndefault value new StdClock()\n\n\nminReportingTimeout\nTimeout in minutes a metric need to be included in the report without having changed\ndefault value 1\n\n\ntags\nTags for this reporter instance - to be combined with the tags of each metric while reporting\ndefault value new Map()\n\n\nuseSingleQuotes\nIndicates that single quotes are used instead of double quotes.\ndefault value false\n\n\ntagExportMode\nExportMode for tags\ndefault value ExportMode.ALL_IN_ONE_COLUMN\n\n\nmetadataExportMode\nExportMode for metadata\ndefault value ExportMode.ALL_IN_ONE_COLUMN\n\n\ntagColumnPrefix\nPrefix for tag columns if exported separately\ndefault value \"tag_\"\n\n\ntagDelimiter\nDelimiter between the tags if exported in one column\ndefault value \";\"\n\n\nmetadataColumnPrefix\nPrefix for metadata columns if exported separately\ndefault value \"meta_\"\n\n\nmetadataDelimiter\nDelimiter between the metadata if exported in one column\ndefault value \";\"\n\n\ncolumns\nThe columns to export\ndefault value []\npossible values for each element\n\"date\" - the date of the current reporting run\n\"name\" - name of the metric\n\"field\" - field identifier (depends on the metric type)\n\"group\" - group of the metric\n\"description\" - description of the metric\n\"value\" - numeric value of the field of the metric\n\"tags\" - either one column with all tags or all tag columns\n\"type\" - type of the metric, one of \"counter\", \"gauge\", \"histogram\", \"meter\", \"timer\"\n\"metadata\" - either one column with all metadata or all metadata columns\n\n\n\n\ndateFormat\nThe format for the date column\ndefault value \"YYYYMMDDHHmmss.SSSZ\"\n\n\ntimezone\nThe timezone used to determine the date\ndefault value \"UTC\"\n\n\ntagFilter\nAn async filter function used to filter out unwanted tags\ndefault value async () => true\n\n\nmetadataFilter\nAn async filter function used to filter out unwanted metadata\ndefault value async () => true\n\n\n\ndefault CSV writer options\n\nfilename\nAn async function determining the filename of the metrics\ndefault value async () => ${moment().format(\"YYYYMMDDHH00\")}_metrics.csv\n\n\ndir\nAn async function determining the directory of the metricsfile\ndefault value async () => \"./metrics\"\n\n\nwriteHeaders\nDetermines if the column headers should be written at the top of each file\ndefault value true\n\n\ncreateDir\nDetermines if the dir for the metrics reporting should be created if it doesn't exist\ndefault value true\n\n\ndelimiter\nThe delimiter between the fields\ndefault value \",\"\n\n\nencoding\nThe encoding of the file\ndefault value \"utf8\"\n\n\nlineEnding\nThe line endings in the file\ndefault value \"\\n\"\n\n\n\nexporting tags\nexample.ts\nimport {\n    CsvMetricReporter,\n    DefaultCsvFileWriter,\n} from \"inspector-csv\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// metric registry is used in the application code to measure durations, error codes, etc...\nconst registry: MetricRegistry = new MetricRegistry();\n\n// some timers for this example\nconst requests1: Timer = registry.newTimer(\"requests1\");\nconst requests2: Timer = registry.newTimer(\"requests2\");\nconst requests3: Timer = registry.newTimer(\"requests3\");\n\nrequests1.setGroup(\"requests\");\nrequests2.setGroup(\"requests\");\n\nrequests1.setTag(\"host\", \"127.0.0.1\");\nrequests2.setTag(\"host\", \"127.0.0.2\");\n// override common tag from reporter\nrequests2.setTag(\"type\", \"override_tag\");\nrequests3.setTag(\"host\", \"127.0.0.3\");\nrequests3.setTag(\"special_tag\", \"test_abc\");\n\n// default csv file writer\nconst writer = new DefaultCsvFileWriter({});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    tagExportMode: ExportMode.ALL_IN_ONE_COLUMN,\n    writer,\n});\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"type\", \"metric\");\nreporter.setTags(tags);\n\n// register registry in the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();\n\n// simulate a running application which produces some custom measures\nsetInterval(() => requests1.time(() => { ... }), 100);\nsetInterval(() => requests2.time(() => { ... }), 50);\nsetInterval(() => requests3.time(() => { ... }), 25);201810201900_metrics.csv (example output file)\ndate,group,name,field,value,type,tags\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.005\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.01\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.025\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.05\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.25\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_0.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_1\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_2.5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_5\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_10\",1,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"max\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"mean\",1000012.8,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"mean_rate\",6.565989008975633,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p50\",1000064,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p75\",1000192,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p95\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p98\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p99\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"p999\",1999872,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"stddev\",471374.3671220714,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests1\",\"sum\",10000128,\"timer\",type=\"metric\";host=\"127.0.0.1\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.005\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.01\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.025\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.05\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.25\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_0.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_1\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_2.5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_5\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_10\",5,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"max\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"mean\",900006.4,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"mean_rate\",13.106160994487947,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p75\",1000192,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p95\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p98\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p99\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"p999\",3999744,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"stddev\",852194.9951649873,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"requests\",\"requests2\",\"sum\",18000128,\"timer\",type=\"override_tag\";host=\"127.0.0.2\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.005\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.01\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.025\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.05\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.25\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_0.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_1\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_2.5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_5\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_10\",10,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"count\",40,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"max\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"mean\",800006.4,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"mean_rate\",26.19515279863145,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"min\",0,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p75\",1000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p95\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p98\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p99\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"p999\",2000128,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"stddev\",516413.0421795807,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"\n20181020194618.877+00:00,\"\",\"requests3\",\"sum\",32000256,\"timer\",type=\"metric\";host=\"127.0.0.3\";special_tag=\"test_abc\"example-with-separate-columns.ts\n// same as in the example above ...\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    tagExportMode: ExportMode.EACH_IN_OWN_COLUMN,\n    ...\n});201810201900_metrics.csv (example output file)\ndate,group,name,field,value,type,tag_type,tag_host,tag_special_tag\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.005\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.01\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.025\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.05\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.1\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.25\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_0.5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_1\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_2.5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_5\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_10\",3,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"bucket_inf\",10,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"count\",10,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m15_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m1_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"m5_rate\",9,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"mean\",999987.2,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"mean_rate\",6.578947368421053,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"min\",0,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p75\",1250112,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p95\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"stddev\",942809.0458299838,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests1\",\"sum\",9999872,\"timer\",\"metric\",\"127.0.0.1\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.005\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.01\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.025\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.05\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.1\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.25\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_0.5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_1\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_2.5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_5\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_10\",3,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"bucket_inf\",20,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"count\",20,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m15_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m1_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"m5_rate\",19,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"max\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"mean\",1049996.8,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"mean_rate\",13.1319758106064,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"min\",0,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p50\",999936,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p75\",1749952,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p95\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p98\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p99\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"p999\",2000128,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"stddev\",604805.6067375874,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"requests\",\"requests2\",\"sum\",20999936,\"timer\",\"override_tag\",\"127.0.0.2\",\"\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.005\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.01\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.025\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.05\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.25\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_0.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_1\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_2.5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_5\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_10\",7,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"bucket_inf\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"count\",40,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m15_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m1_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"m5_rate\",38,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"max\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"mean\",899987.2,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"mean_rate\",26.2639516212128,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"min\",0,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p50\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p75\",999936,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p95\",2950067.1999999955,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p98\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p99\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"p999\",3000064,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"stddev\",545386.4756426474,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"\n20181020195009.787+00:00,\"\",\"requests3\",\"sum\",35999488,\"timer\",\"metric\",\"127.0.0.3\",\"test_abc\"multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The CsvMetricReporter is listening for those messagesand writes the metrics from the other processes into the CSV file.  \nOnly the master process writes the header of the CSV file.Also each write-operation is handled by the master process.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.And in case of disabling cluster support the pid should be part of the filename.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { CsvMetricReporter } from \"inspector-csv\";\n\nconst writer = new DefaultCsvFileWriter({\n    filename: async () => `${moment().format(\"YYYYMMDDHH00\")}_${process.pid}_metrics.csv`\n});\n\n// configure CSV metric reporter instance\nconst reporter = new CsvMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    columns: [\"date\", \"group\", \"name\", \"field\", \"value\", \"type\", \"tags\"],\n    writer,\n    ...\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-elasticsearch.html":{"url":"additional-documentation/inspector-elasticsearch.html","title":"additional-page - inspector-elasticsearch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-elasticsearch\nTypescript Metrics Reporter for\nelasticsearch.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.  \nIt uses the official elasticsearch js client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-elasticsearch\nbasic usage\nFrom version 2.6.0 onwards this library uses the official elasticsearch js client instead of the legacy elasticsearch js client.\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = {\n    node: \"http://localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator: ElasticsearchMetricReporter.dailyIndex(`metrics`),\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();For users of versions before 2.6.0:  \nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst clientOptions: ConfigOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator: ElasticsearchMetricReporter.dailyIndex(`metrics`),\n    log: null,\n    metricDocumentBuilder: ElasticsearchMetricReporter.defaultDocumentBuilder(),\n    typeDeterminator: ElasticsearchMetricReporter.defaultTypeDeterminator(),\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();determine the indexname for a metric\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricInfoDeterminator\n} from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = { ... };\n// computes the name of the index using the timestamp of the metric\nconst indexnameDeterminator: MetricInfoDeterminator = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date) => {\n\n    const day = date.getDate();\n    const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n    const month = date.getMonth() + 1;\n    const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n    return `metrics-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n};\n// the indexname generator needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator,\n});build a metric document\nimport { MetricRegistry, Tags } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricDocumentBuilder,\n    MetricType\n} from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = { ... };\n// only build documents for counter metrics\nconst metricDocumentBuilder: MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    timestamp: Date,\n    commonTags: Tags) => {\n\n    if (metric instanceof Counter) {\n        const tags = commonTags;\n        const name = metric.getName();\n        const group = metric.getGroup();\n        return { name, group, tags, timestamp, values: { count: metric.getCount() }, type };\n\n    } else {\n        // null values will not be reported / published\n        return null;\n    }\n};\n\n// the document builder needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    metricDocumentBuilder,\n});multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The ElasticsearchMetricReporter is listening for those messagesand report the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { tagsToMap, DisabledClusterOptions } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ClientOptions } from \"@elastic/elasticsearch\";\n\nconst clientOptions: ClientOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    clusterOptions: new DisabledClusterOptions(),\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-influx.html":{"url":"additional-documentation/inspector-influx.html","title":"additional-page - inspector-influx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.  \nIt uses node-influx as influxdb client.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    sender,\n});\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\n// need ot wait for the reporter to start\nawait reporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i reporting events\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { Event } from \"inspector-metrics\";\n\nconst reporter: InfluxMetricReporter = ...\n\n// need ot wait for the reporter to start before reporting events\nawait reporter.start();\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to influxdb\nawait reporter.reportEvent(event);multi process support (nodejs cluster)\nBy default forked processes are sending the metrics as inter-process messageto the master process. The InfluxMetricReporter is listening for those messagesand report the metrics from the other processes.  \nTo disable this behavior set the DisabledClusterOptions when creating an instance.  \nIn each case you should set the pid as reporter tag.  \nimport { DefaultSender, InfluxMetricReporter } from \"inspector-influx\";\nimport { tagsToMap, DisabledClusterOptions, MetricRegistry, Timer } from \"inspector-metrics\";\n\nconst dbConfig = {...};\nconst sender = new DefaultSender(dbConfig);\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter({\n    clusterOptions: new DisabledClusterOptions(),\n    sender,\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-prometheus.html":{"url":"additional-documentation/inspector-prometheus.html","title":"additional-page - inspector-prometheus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-prometheus\nTypescript metric reporter for prometheus.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan be pushed to a pushgateway or be exposed with\na custom /metrics endpoint in your application.\nTake a look at the Documentation.\ninstall\nnpm install --save inspector-prometheus\nbasic usage\nexample.ts\nimport {\n    MetricRegistry,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"app_version\", \"1.0.0\");\nreporter.setTags(tags);\n\n// a simple request timer used to report response latencies\nconst requests: Timer = registry.newTimer(\"requests\");\n// custom metric tag\nrequests.setTag(\"host\", \"127.0.0.3\");\n\n// some server implementation - could be anything KOA, Express, HAPI ...\nconst server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n// '/metrics' is the standard route used by prometheus ...\nserver.route({\n    method: \"GET\",\n    path: \"/metrics\",\n    handler(request, h) {\n        console.log(\"reporting metrics\");\n        return h.response(reporter.getMetricsString())\n            .code(200)\n            .type(\"text/plain\");\n    },\n});\n\n// starts the server\nserver.start();/etc/prometheus/config.yml\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 30s\n\nscrape_configs:\n- job_name: test-app\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:8080example metrics report\n# HELP requests request durations for some endpoint\n# TYPE requests summary\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98\"} 1999872\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99\"} 2000128\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999\"} 4000000\nrequests_count{app_version=\"1.0.0\",host=\"127.0.0.3\"} 362\nrequests_sum{app_version=\"1.0.0\",host=\"127.0.0.3\"} 283998208reporting options for PrometheusMetricReporter\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({\n    includeTimestamp: true,\n    emitComments: true,\n    useUntyped: false,\n});multi process support (nodejs cluster)\nDue to the nature of prometheus scraping multiple processes need to collectmetrics in order report all metrics of every process.  \nTherefore the PrometheusMetricReporter implements an internalrequest/response mechanism to gather all metrics from all forked processesand wait for the response before serving all metrics data.  \nYou should set the pid as reporter tag to be able to determinebetween the multiple metrics sources.  \nOnly the master process should serve the metrics to the prometheus server.  \nimport * as cluster from \"cluster\";\n\nimport {\n    tagsToMap,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));\n\nif (cluster.isMaster) {\n    // some server implementation - could be anything KOA, Express, HAPI ...\n    const server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n    // '/metrics' is the standard route used by prometheus ...\n    server.route({\n        method: \"GET\",\n        path: \"/metrics\",\n        handler(request, h) {\n            console.log(\"reporting metrics\");\n            return h.response(reporter.getMetricsString())\n                .code(200)\n                .type(\"text/plain\");\n        },\n    });\n\n    // starts the server\n    server.start();\n}report metrics with pushgateway\nimport ...; // like in the example above\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\nconst pushReporter = new PushgatewayMetricReporter({\n    reporter,\n\n    host: \"localhost\",\n    port: 9091,\n    job: \"pushgateway\",\n    instance: \"127.0.0.4\",\n});\n\n// start reporting\nawait pushReporter.start();multi process support (nodejs cluster)\nBy default cluster support is disabled for PushgatewayMetricReporter.  \nYou should set the pid as reporter tag.  \nimport {\n    tagsToMap,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({});\nconst pushReporter = new PushgatewayMetricReporter({\n    reporter,\n    ...\n});\n\n// set \"pid\" to process id\nreporter.setTags(tagsToMap({\n    pid: `${process.pid}`,\n}));\n\n// start reporting\nawait pushReporter.start();License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/inspector-vm.html":{"url":"additional-documentation/inspector-vm.html","title":"additional-page - inspector-vm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\ninspector-vm\nNodeJS VM Metric Collector\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nTake a look at the Documentation.\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-vm\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    V8EventLoop,\n    V8MemoryMetrics,\n    V8GCMetrics,\n    V8ProcessMetrics,\n} from \"inspector-vm\";\n\n// get a registry\nconst registry: MetricRegistry = ...;\n\n// instance the memory metric, contains\n//   - space statistics\n//   - memory statistics\nconst memoryMetrics: V8MemoryMetrics = new V8MemoryMetrics(\"v8\");\n//   - gc statistics\nconst gc: V8GCMetrics = new V8GCMetrics(\"gc\", registry.getDefaultClock());\n//   - event loop delay / latency\nconst eventLoop: V8EventLoop = new V8EventLoop(\"eventLoop\");\n//   - cpu_usage (system, user, total)\n//   - active_handles\n//   - active_requests\nconst processMetric: V8ProcessMetrics = new V8ProcessMetrics(\"process\");\n\n// metric is registered und the name \"v8\"\nregistry.registerMetric(memoryMetrics);\n// metric is registered und the name \"gc\"\nregistry.registerMetric(gc);\n// metric is registered und the name \"eventLoop\"\nregistry.registerMetric(eventLoop);\n// metric is registered und the name \"process\"\nregistry.registerMetric(processMetric);\n\n// setup reporter ...\n\n// note that unstopped metrics can cause the application to keep running\nmemoryMetrics.stop();\ngc.stop();\neventLoop.stop();\nprocessMetric.stop();License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
